var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AgentController.html",[0,1.41,1,2.465]],["body/controllers/AgentController.html",[0,1.701,1,3.797,2,1.805,3,0.3,4,0.268,5,0.268,6,3.706,7,0.55,8,1.31,9,1.907,10,6.109,11,4.342,12,5.493,13,1.805,14,0.022,15,4.342,16,0.719,17,4.342,18,1.026,19,0.915,20,0.632,21,1.026,22,5.545,23,1.026,24,2.05,25,0.522,26,2.974,27,5.545,28,0.55,29,2.724,30,2.516,31,2.974,32,2.516,33,2.516,34,2.875,35,3.706,36,3.287,37,1.213,38,4.342,39,0.3,40,0.065,41,2.182,42,4.342,43,1.213,44,3.706,45,1.605,46,4.342,47,4.342,48,1.026,49,4.342,50,1.213,51,1.918,52,4.342,53,0.016,54,0.016]],["title/modules/AgentModule.html",[55,0.804,56,2.258]],["body/modules/AgentModule.html",[1,4.403,2,2.473,3,0.336,4,0.3,5,0.3,14,0.022,25,0.493,28,0.616,39,0.336,40,0.073,53,0.017,54,0.017,55,1.328,56,4.388,57,1.697,58,2.077,59,4.146,60,4.146,61,3.766,62,2.331,63,1.903,64,1.903,65,4.857,66,2.473,67,4.146,68,4.857,69,2.019,70,2.146]],["title/controllers/AppController.html",[0,1.41,71,2.465]],["body/controllers/AppController.html",[0,2.368,2,2.074,3,0.345,4,0.308,5,0.308,7,0.632,8,1.428,13,2.074,14,0.022,16,0.826,23,1.178,25,0.464,28,0.632,39,0.345,40,0.075,41,2.506,50,1.393,53,0.018,54,0.018,71,4.14,72,4.257,73,6.761,74,4.987,75,2.111,76,3.768,77,4.257,78,4.987]],["title/modules/AppModule.html",[55,0.804,79,2.465]],["body/modules/AppModule.html",[2,2.082,3,0.257,4,0.23,5,0.23,14,0.022,25,0.537,28,0.471,39,0.257,40,0.056,53,0.015,54,0.015,55,1.118,56,4.087,57,1.298,58,1.749,62,1.962,63,1.456,64,1.456,66,2.082,69,2.082,71,3.878,76,3.775,77,3.172,79,4.882,80,3.172,81,3.172,82,3.172,83,3.775,84,4.087,85,3.775,86,3.716,87,2.331,88,1.642,89,3.716,90,3.716,91,3.716,92,3.552,93,2.331,94,2.813,95,1.545,96,5.007,97,3.716,98,3.716,99,3.716,100,3.716,101,3.716,102,3.716,103,2.219,104,3.716,105,2.331,106,2.813,107,2.331,108,3.716,109,3.716,110,3.716,111,3.716,112,3.716,113,2.001,114,3.716,115,2.545,116,3.716,117,3.716,118,3.716,119,3.716,120,3.716,121,3.716,122,2.813]],["title/injectables/AppService.html",[76,2.086,123,0.674]],["body/injectables/AppService.html",[3,0.353,4,0.316,5,0.316,14,0.021,16,0.846,18,1.207,19,1.077,20,0.744,21,1.207,25,0.471,28,0.647,39,0.353,40,0.077,41,2.567,53,0.018,54,0.018,76,3.553,123,1.149,124,2.002,125,4.36,126,1.784,127,5.109,128,4.101,129,5.109,130,5.109]],["title/controllers/AuthController.html",[0,1.41,131,2.465]],["body/controllers/AuthController.html",[0,1.549,2,1.643,3,0.273,4,0.244,5,0.244,7,0.501,8,1.233,9,1.823,13,2.428,14,0.022,16,0.968,18,1.233,19,1.1,20,0.759,21,1.233,23,1.38,24,2.296,25,0.495,26,2.707,28,0.501,30,2.29,31,2.707,37,1.104,39,0.273,40,0.059,41,1.986,43,1.104,50,1.631,53,0.015,54,0.015,113,2.128,115,3.573,131,3.573,132,3.374,133,4.453,134,3.949,135,6.21,136,3.953,137,4.631,138,3.953,139,3.953,140,5.019,141,3.953,142,3.953,143,3.953,144,3.953,145,3.953,146,3.573,147,2.934,148,2.992,149,3.999,150,2.707,151,2.992,152,2.992,153,3.953,154,3.953,155,3.953,156,3.953,157,3.953,158,3.953,159,3.953,160,3.953]],["title/modules/AuthModule.html",[55,0.804,83,2.086]],["body/modules/AuthModule.html",[2,2.139,3,0.268,4,0.239,5,0.239,14,0.022,25,0.536,28,0.491,39,0.268,40,0.058,43,1.081,53,0.015,54,0.015,55,1.149,57,1.352,58,1.797,61,3.549,62,2.016,63,1.517,64,1.517,66,2.139,69,2.139,70,2.273,83,4.08,92,3.625,93,2.428,95,1.609,105,2.428,106,2.93,107,2.428,131,3.958,147,3.562,148,2.93,150,2.651,151,2.93,161,3.304,162,3.871,163,3.304,164,3.304,165,4.135,166,2.93,167,5.145,168,2.651,169,3.871,170,2.651,171,3.871,172,3.871,173,3.895,174,2.651,175,3.871,176,3.228,177,2.651,178,4.375,179,3.304,180,1.517,181,2.93,182,3.304,183,3.304]],["title/injectables/AuthService.html",[123,0.674,147,1.809]],["body/injectables/AuthService.html",[3,0.209,4,0.186,5,0.186,7,0.382,8,1.023,9,2.044,14,0.022,16,1.011,18,1.441,19,1.286,20,0.888,21,1.441,23,1.385,24,2.256,25,0.468,28,0.382,33,1.747,34,2.87,37,0.842,39,0.209,40,0.045,43,1.637,45,1.872,48,1.653,50,1.704,53,0.013,54,0.013,75,2.131,113,2.33,115,3.468,123,0.811,124,1.181,126,1.512,134,3.276,137,4.013,147,2.175,152,3.833,170,2.065,184,2.573,185,3.694,186,4.328,187,4.328,188,4.328,189,3.015,190,5.363,191,3.015,192,4.328,193,3.015,194,4.328,195,3.015,196,3.276,197,4.328,198,3.015,199,4.328,200,3.015,201,4.328,202,1.984,203,3.015,204,1.053,205,3.694,206,2.282,207,3.276,208,3.015,209,2.964,210,1.912,211,1.891,212,4.328,213,1.747,214,1.623,215,3.015,216,2.282,217,3.015,218,1.891,219,3.015,220,2.282,221,2.573,222,3.015,223,3.015,224,3.015,225,4.328,226,3.015,227,3.015,228,3.015,229,4.328,230,3.015,231,1.891,232,1.253,233,2.573]],["title/classes/Call.html",[40,0.054,234,1.497]],["body/classes/Call.html",[3,0.196,4,0.175,5,0.175,7,0.359,8,0.978,13,2.819,14,0.022,16,1.124,18,0.67,19,0.598,20,1.009,21,0.67,23,0.67,25,0.439,37,0.792,39,0.196,40,0.043,48,1.524,51,2.161,53,0.012,54,0.012,75,1.878,103,2.107,146,1.942,202,2.568,204,1.708,234,1.722,235,1.335,236,2.421,237,2.229,238,2.458,239,1.623,240,2.633,241,4.882,242,3.703,243,2.633,244,4.882,245,3.703,246,2.975,247,3.918,248,4.175,249,4.175,250,4.891,251,4.141,252,2.836,253,2.836,254,3.35,255,2.836,256,4.254,257,2.836,258,2.836,259,2.836,260,2.836,261,1.779,262,2.598,263,2.836,264,2.836,265,2.836,266,2.836,267,3.08,268,2.836,269,3.534,270,3.116,271,2.836,272,2.836,273,4.141,274,2.836,275,2.836,276,2.836,277,2.836,278,1.643,279,4.141,280,4.141,281,3.35,282,2.147,283,3.684,284,4.141,285,2.399,286,1.253,287,1.179,288,2.836,289,1.779,290,1.779,291,3.534,292,4.141,293,2.836,294,2.836,295,2.836,296,2.836,297,2.836,298,2.836,299,2.836,300,2.836]],["title/modules/CallsModule.html",[55,0.804,301,2.086]],["body/modules/CallsModule.html",[3,0.312,4,0.279,5,0.279,14,0.022,25,0.516,28,0.572,39,0.312,40,0.068,53,0.017,54,0.017,55,1.269,57,1.578,58,1.986,61,3.699,62,2.228,63,1.77,64,1.77,66,2.364,67,3.855,69,2.364,70,2.512,87,2.834,88,1.996,234,1.878,301,4.124,302,3.855,303,4.517,304,3.855,305,3.855,306,3.902,307,4.517,308,4.517,309,3.094,310,3.855,311,4.517]],["title/injectables/CallsService.html",[123,0.674,306,1.938]],["body/injectables/CallsService.html",[3,0.148,4,0.132,5,0.132,7,0.271,8,0.79,9,2.132,14,0.022,16,0.96,18,1.323,19,1.18,20,0.815,21,1.323,23,1.323,24,2.333,25,0.476,28,0.271,32,1.239,33,1.239,34,2.635,35,1.825,37,0.597,39,0.148,40,0.032,43,1.301,45,2.365,48,0.505,50,1.412,51,2.368,53,0.01,54,0.01,75,2.081,88,0.945,103,1.614,123,0.626,124,0.838,126,1.168,202,2.334,204,1.438,210,1.82,213,1.239,214,1.8,231,3.171,232,2.101,234,1.712,238,1.68,240,2.217,241,1.825,242,4.239,243,2.217,244,1.825,245,3.117,247,2.29,267,1.151,286,2.632,287,0.889,289,1.341,306,1.8,309,3.19,310,1.825,312,1.619,313,3.344,314,4.574,315,3.344,316,4.118,317,4.118,318,3.344,319,4.118,320,2.138,321,2.138,322,3.344,323,3.19,324,2.138,325,2.138,326,3.344,327,3.975,328,2.138,329,3.344,330,2.138,331,2.138,332,2.138,333,2.138,334,3.344,335,2.138,336,2.138,337,3.975,338,2.138,339,1.464,340,1.825,341,1.619,342,1.619,343,1.619,344,1.619,345,1.341,346,2.217,347,3.526,348,1.619,349,2.531,350,1.619,351,1.464,352,2.138,353,1.341,354,4.118,355,1.464,356,4.118,357,2.138,358,1.619,359,3.344,360,3.344,361,3.344,362,3.344,363,3.344,364,2.138,365,2.138,366,3.344,367,1.619,368,2.138,369,2.138,370,2.138,371,3.344,372,2.138,373,2.138,374,3.117,375,3.67,376,2.138,377,2.138,378,2.138,379,3.117,380,2.138,381,1.825,382,2.138,383,2.138]],["title/injectables/CaslAbilityFactory.html",[123,0.674,384,2.086]],["body/injectables/CaslAbilityFactory.html",[3,0.294,4,0.263,5,0.263,7,0.539,8,1.293,14,0.022,16,0.705,18,1.005,19,0.897,20,0.619,21,1.005,23,1.005,25,0.507,28,0.539,33,2.465,37,1.188,39,0.294,40,0.064,43,1.188,48,1.561,50,1.188,53,0.016,54,0.016,123,1.025,124,1.667,221,5.164,232,1.768,234,1.768,384,3.171,385,3.63,386,5.472,387,5.472,388,4.254,389,3.748,390,5.472,391,5.472,392,5.472,393,3.22,394,2.913,395,2.913,396,3.22,397,2.913,398,3.22,399,5.472,400,4.254,401,5.472,402,3.63,403,4.254,404,6.05,405,4.254,406,4.254,407,4.254,408,4.254,409,4.254]],["title/modules/CaslModule.html",[55,0.804,410,2.258]],["body/modules/CaslModule.html",[3,0.33,4,0.295,5,0.295,14,0.021,25,0.452,28,0.605,39,0.33,40,0.072,53,0.017,54,0.017,55,1.314,57,1.668,58,2.056,62,2.306,63,1.871,64,1.871,66,2.447,69,2.447,70,2.6,384,4.271,410,4.508,411,4.075,412,4.075,413,4.075,414,4.774,415,4.075]],["title/classes/EventsGateway.html",[40,0.054,416,2.086]],["body/classes/EventsGateway.html",[3,0.146,4,0.131,5,0.131,7,0.268,8,0.782,9,2.201,13,2.615,14,0.022,16,1.057,18,1.486,19,1.326,20,0.928,21,1.486,23,1.462,24,2.506,25,0.483,28,0.268,29,1.324,39,0.146,40,0.032,45,2.245,53,0.01,54,0.01,95,0.878,105,1.324,126,1.156,146,2.268,151,1.598,176,1.324,177,2.268,210,1.463,214,3.688,235,0.993,239,1.297,267,1.137,342,1.598,345,1.324,355,1.446,416,1.918,417,1.802,418,4.55,419,4.085,420,3.486,421,4.085,422,4.085,423,4.085,424,4.085,425,3.311,426,4.085,427,4.085,428,4.085,429,3.486,430,2.111,431,3.229,432,3.107,433,3.311,434,4.085,435,2.111,436,4.466,437,2.111,438,2.111,439,1.802,440,2.111,441,2.111,442,2.111,443,2.111,444,2.111,445,2.111,446,2.111,447,2.111,448,2.111,449,2.111,450,2.111,451,2.111,452,2.111,453,2.111,454,2.111,455,3.311,456,2.111,457,2.111,458,2.111,459,2.111,460,2.111,461,2.111,462,2.111,463,2.111,464,2.111,465,2.111,466,1.802,467,2.111,468,2.111,469,1.446,470,2.111,471,6.189,472,2.111,473,3.311,474,1.598,475,1.324,476,1.598,477,1.446,478,1.598,479,1.598,480,2.111,481,1.446,482,1.446,483,1.446,484,1.802,485,2.111,486,1.598,487,2.111,488,2.111,489,2.111,490,2.111,491,2.111,492,2.111,493,2.826,494,2.111,495,2.111,496,2.111,497,2.111,498,2.111,499,4.625,500,1.446,501,2.111,502,1.598,503,2.111,504,1.598,505,2.111,506,2.111,507,2.111,508,2.111,509,2.111,510,2.111,511,2.111,512,2.111,513,2.111,514,2.111,515,2.111,516,2.111,517,2.111]],["title/modules/EventsModule.html",[55,0.804,518,2.258]],["body/modules/EventsModule.html",[3,0.303,4,0.271,5,0.271,14,0.022,25,0.523,28,0.556,39,0.303,40,0.066,53,0.016,54,0.016,55,1.246,57,1.532,58,1.949,62,2.187,63,1.719,64,1.719,66,2.321,69,1.824,70,2.466,83,3.951,85,3.234,410,4.278,416,4.064,469,4.204,518,4.442,519,3.744,520,4.387,521,3.744,522,4.387,523,4.387,524,4.387,525,3.501,526,4.387,527,4.387,528,4.387]],["title/interfaces/IPolicyHandler.html",[529,2.465,530,2.465]],["body/interfaces/IPolicyHandler.html",[3,0.305,4,0.273,5,0.273,7,0.559,8,1.323,14,0.022,16,0.731,18,1.042,19,0.93,20,0.973,21,1.042,23,1.042,25,0.43,33,2.555,39,0.472,48,1.042,53,0.016,54,0.016,211,3.513,389,4.434,393,3.338,396,3.338,397,4.577,398,3.338,529,3.02,530,4.215,531,4.41,532,3.02,533,5.6,534,5.6,535,4.41,536,6.154,537,4.78,538,3.764,539,4.78,540,4.78,541,4.239,542,4.78,543,4.78,544,3.02]],["title/modules/InitModule.html",[55,0.804,84,2.258]],["body/modules/InitModule.html",[3,0.319,4,0.285,5,0.285,14,0.022,25,0.52,28,0.585,39,0.319,40,0.069,48,1.091,53,0.017,54,0.017,55,1.287,57,1.612,58,2.013,62,2.259,63,1.809,64,1.809,66,1.919,69,2.396,70,2.547,84,4.396,87,2.896,88,2.04,128,4.212,180,1.809,289,2.896,346,2.485,545,3.94,546,3.94,547,3.94,548,4.617,549,3.948,550,3.94,551,4.617,552,3.94]],["title/injectables/InitService.html",[123,0.674,128,2.086]],["body/injectables/InitService.html",[3,0.284,4,0.254,5,0.254,7,0.521,8,1.264,9,1.858,14,0.022,16,0.886,18,0.971,19,1.329,20,0.598,21,0.971,23,0.971,25,0.501,28,0.521,39,0.284,40,0.062,43,1.495,45,2.2,48,0.971,53,0.016,54,0.016,88,1.815,123,1.002,124,1.61,126,1.869,128,3.1,180,1.61,210,2.629,286,3.058,287,1.708,289,2.577,339,2.813,346,3.393,353,3.356,549,4.477,550,3.506,553,3.506,554,5.38,555,3.506,556,4.108,557,4.108,558,3.506,559,3.506,560,4.108,561,4.108,562,4.108,563,5.35,564,4.108,565,4.108,566,4.108,567,4.108,568,4.108]],["title/injectables/JwtAuthGuard.html",[123,0.674,569,2.725]],["body/injectables/JwtAuthGuard.html",[3,0.293,4,0.262,5,0.262,7,0.536,8,1.289,14,0.022,16,0.904,18,1.289,19,1.15,20,0.794,21,1.289,23,1,25,0.506,28,0.691,39,0.377,40,0.064,41,2.126,43,1.524,50,1.524,53,0.016,54,0.016,95,1.76,103,2.137,123,1.022,124,1.658,126,1.478,149,2.899,168,2.899,237,2.278,475,3.786,569,4.129,570,2.899,571,4.129,572,3.612,573,5.766,574,4.232,575,4.129,576,4.826,577,4.232,578,3.204,579,4.232,580,4.232,581,2.899,582,3.204,583,3.612,584,4.232,585,3.612,586,4.129,587,4.232,588,3.612,589,4.232,590,4.232]],["title/injectables/JwtStrategy.html",[123,0.674,165,2.258]],["body/injectables/JwtStrategy.html",[3,0.29,4,0.259,5,0.259,7,0.531,8,1.28,9,1.875,14,0.022,16,0.898,18,1.28,19,1.142,20,0.789,21,1.28,23,0.99,25,0.526,28,0.531,37,1.171,39,0.29,40,0.063,41,2.105,50,1.171,53,0.016,54,0.016,92,3.984,93,2.628,95,1.742,107,3.768,122,3.172,123,1.015,124,1.642,126,1.463,147,3.385,148,3.172,150,2.87,165,3.4,168,2.87,174,2.87,181,3.172,209,4.35,214,2.256,237,2.256,585,3.576,591,3.576,592,5.419,593,3.576,594,4.19,595,5.419,596,4.19,597,4.19,598,4.19,599,4.19,600,3.576,601,4.19,602,4.19,603,4.19,604,4.19,605,4.19,606,4.19,607,4.19]],["title/guards/PoliciesGuard.html",[608,2.725,609,2.725]],["body/guards/PoliciesGuard.html",[3,0.251,4,0.224,5,0.224,7,0.46,8,1.164,9,1.746,14,0.022,16,0.927,18,1.321,19,1.179,20,0.814,21,1.321,23,1.164,24,1.821,25,0.496,28,0.46,37,1.014,39,0.251,40,0.054,43,1.676,48,0.857,50,1.676,53,0.014,54,0.014,95,1.508,103,1.422,123,0.923,126,1.72,210,2.771,351,2.485,353,2.276,384,3.834,389,4.296,397,4.109,415,3.096,544,4.109,571,4.541,572,3.096,573,5.521,575,3.729,576,4.541,578,2.746,581,3.374,582,2.746,586,3.729,588,4.204,609,3.729,610,2.746,611,3.096,612,4.926,613,3.628,614,3.628,615,4.926,616,3.628,617,4.204,618,3.628,619,3.729,620,4.926,621,3.628,622,3.628,623,3.628,624,3.628,625,3.628,626,2.746,627,3.628,628,3.628]],["title/classes/Record.html",[40,0.054,246,1.694]],["body/classes/Record.html",[3,0.228,4,0.204,5,0.204,7,0.417,13,2.845,14,0.022,16,1.134,20,1.005,25,0.408,39,0.228,40,0.049,53,0.014,54,0.014,75,2.193,103,2.256,202,2.46,204,1.856,234,2.734,235,1.55,237,2.481,238,2.671,239,1.805,246,2.168,252,2.255,254,2.255,256,4.247,261,2.066,262,2.89,270,1.908,281,3.156,282,2.493,283,3.156,285,2.67,286,1.455,287,1.369,290,2.066,323,4.15,394,2.255,629,2.81,630,4.023,631,4.536,632,4.536,633,4.536,634,4.023,635,4.023,636,4.023,637,4.023,638,3.293,639,3.293,640,2.81,641,3.293,642,3.293,643,3.293,644,3.293,645,3.293,646,3.746,647,4.358,648,3.933,649,3.293,650,3.933,651,3.293,652,3.933,653,3.293,654,3.933,655,3.293,656,4.587,657,2.493,658,2.81]],["title/controllers/RecordsController.html",[0,1.41,659,2.465]],["body/controllers/RecordsController.html",[0,1.235,2,1.31,3,0.218,4,0.195,5,0.195,7,0.399,8,1.055,9,2.065,13,2.157,14,0.022,16,0.86,18,1.226,19,1.094,20,0.755,21,1.226,23,1.226,24,2.289,25,0.508,26,2.158,28,0.399,30,1.825,31,2.158,37,0.88,39,0.218,40,0.047,41,1.583,43,1.45,45,2.087,50,1.665,51,1.392,53,0.013,54,0.013,140,5.078,204,1.1,213,3.006,232,1.31,240,2.405,243,2.405,246,2.102,267,1.696,278,1.825,432,2.794,482,2.158,500,2.158,630,2.385,659,3.059,660,2.689,661,5.189,662,4.467,663,5.189,664,3.151,665,4.818,666,3.151,667,3.151,668,3.151,669,4.818,670,3.151,671,3.151,672,3.151,673,4.818,674,3.151,675,3.151,676,2.689,677,3.812,678,2.689,679,2.385,680,2.158,681,2.158,682,2.689,683,2.385,684,2.385,685,3.151,686,3.151,687,3.381,688,3.812,689,3.151,690,2.385,691,3.151,692,3.151,693,2.385,694,2.385,695,3.151,696,3.151,697,3.151,698,3.151,699,3.151,700,3.151,701,2.689,702,2.385,703,3.151,704,3.151,705,3.151,706,3.151,707,2.158,708,3.151,709,2.385,710,3.151,711,3.151,712,3.151,713,3.151,714,3.151,715,2.385,716,3.151,717,3.151,718,3.151,719,3.151]],["title/modules/RecordsModule.html",[55,0.804,525,2.258]],["body/modules/RecordsModule.html",[2,2.246,3,0.288,4,0.258,5,0.258,14,0.022,25,0.533,28,0.528,39,0.288,40,0.063,53,0.016,54,0.016,55,1.206,57,1.456,58,1.887,62,2.117,63,1.634,64,1.634,66,2.246,69,2.246,70,2.387,87,2.615,88,1.842,246,1.962,301,3.898,432,3.859,525,4.47,646,2.244,657,3.156,659,4.104,678,3.558,720,3.558,721,3.558,722,3.558,723,3.558,724,4.221,725,4.169,726,3.558,727,4.169,728,4.169,729,3.558,730,3.156,731,4.089,732,4.169]],["title/injectables/RecordsService.html",[123,0.674,432,1.938]],["body/injectables/RecordsService.html",[3,0.085,4,0.076,5,0.076,7,0.156,8,0.502,9,1.918,14,0.022,16,0.804,18,1.097,19,0.978,20,0.707,21,1.097,23,1.038,24,1.977,25,0.496,28,0.156,29,0.774,37,0.594,39,0.085,40,0.019,43,1.825,45,2.377,48,0.291,50,1.297,53,0.006,54,0.006,75,0.978,88,0.545,95,0.513,123,0.398,124,0.483,126,0.742,202,2.145,204,1.163,210,1.658,211,0.774,213,0.715,214,2.209,216,2.52,231,1.757,232,1.706,234,1.827,238,2.208,239,0.833,240,0.664,243,0.664,246,2.285,247,1.456,267,0.664,270,1.929,278,0.715,286,2.145,287,0.513,289,0.774,306,2.366,309,1.456,323,1.918,339,0.845,341,0.934,342,0.934,343,0.934,344,0.934,345,0.774,346,1.507,348,2.12,353,1.333,358,2.52,374,2.12,375,3.01,379,2.52,381,1.053,394,0.845,420,1.814,429,1.814,432,1.144,436,3.162,439,1.814,466,1.814,477,0.845,482,0.845,483,0.845,484,1.053,486,0.934,630,2.841,633,1.053,634,0.934,635,0.934,636,0.934,637,0.934,646,0.664,657,0.934,677,1.053,679,0.934,680,3.179,681,1.456,682,1.053,684,0.934,687,1.609,688,1.814,690,1.609,693,1.609,694,0.934,701,1.814,702,0.934,707,1.918,715,0.934,729,2.841,730,0.934,731,3.675,733,0.934,734,3.501,735,2.8,736,2.39,737,2.8,738,2.8,739,2.8,740,1.234,741,2.546,742,2.125,743,1.234,744,1.234,745,1.234,746,1.053,747,2.841,748,2.8,749,1.234,750,1.234,751,3.661,752,1.234,753,0.934,754,1.234,755,1.234,756,1.234,757,1.234,758,2.28,759,3.661,760,2.52,761,2.52,762,1.234,763,0.934,764,1.456,765,1.053,766,1.053,767,1.053,768,1.814,769,2.841,770,0.845,771,1.609,772,1.609,773,0.934,774,0.934,775,1.234,776,1.053,777,1.053,778,1.234,779,1.053,780,0.934,781,0.934,782,0.934,783,0.934,784,1.234,785,2.125,786,1.234,787,2.39,788,1.234,789,1.234,790,1.234,791,1.053,792,0.934,793,1.053,794,0.934,795,2.12,796,1.814,797,1.814,798,1.053,799,1.234,800,1.234,801,1.234,802,1.234,803,1.234,804,2.125,805,2.125,806,1.234,807,1.234,808,1.234,809,1.234,810,2.125,811,1.234,812,0.934,813,1.053,814,1.814,815,1.234,816,1.234,817,1.234,818,1.456,819,1.053,820,2.125,821,1.234,822,1.234,823,1.234,824,1.234,825,1.234,826,2.125,827,2.125,828,1.234,829,1.234,830,1.053,831,1.234,832,2.125,833,1.234,834,4.144,835,1.234,836,2.125,837,2.125,838,1.814,839,2.125,840,1.234,841,2.125,842,2.125,843,2.125,844,2.125,845,1.234,846,2.12,847,2.8,848,3.328,849,1.234,850,1.234,851,1.234,852,2.125,853,2.39,854,1.234,855,2.8,856,1.234,857,1.234,858,2.125,859,1.234,860,1.234,861,1.234,862,1.814,863,1.234,864,1.234,865,2.125,866,1.609,867,1.234,868,2.125,869,1.234,870,1.234,871,1.234,872,1.234,873,1.234,874,2.125,875,1.234,876,1.234,877,2.125,878,1.234,879,2.8,880,1.234,881,1.234,882,1.234,883,1.234,884,1.234,885,1.234,886,1.234,887,1.234,888,1.234,889,1.234,890,1.053,891,1.234,892,1.234,893,1.234,894,2.125,895,1.234,896,3.328,897,2.125,898,3.328,899,1.234,900,1.814,901,1.234,902,1.234,903,2.125,904,1.234,905,1.234,906,1.609,907,2.125,908,1.234,909,1.234,910,1.234,911,1.234,912,1.234,913,1.234,914,1.234,915,1.234,916,1.234,917,1.814,918,0.845,919,2.125,920,1.234,921,0.934,922,1.234,923,1.234,924,1.234,925,1.234,926,1.234,927,1.234]],["title/modules/SRModule.html",[55,0.804,724,2.258]],["body/modules/SRModule.html",[3,0.336,4,0.3,5,0.3,14,0.021,25,0.456,28,0.616,39,0.336,40,0.073,53,0.017,54,0.017,55,1.328,57,1.697,58,2.077,62,2.331,63,1.903,64,1.903,66,2.019,69,2.473,70,2.628,724,4.444,741,4.239,928,4.146,929,4.146,930,4.146,931,4.857,932,4.857]],["title/injectables/SRService.html",[123,0.674,741,2.086]],["body/injectables/SRService.html",[3,0.27,4,0.242,5,0.242,7,0.495,8,1.223,9,1.813,14,0.022,16,0.962,18,0.923,19,0.823,20,0.753,21,0.923,23,0.923,24,1.914,25,0.493,28,0.495,37,1.091,39,0.27,40,0.059,43,1.091,45,1.445,50,1.091,53,0.015,54,0.015,75,2.308,95,1.624,123,0.97,124,1.531,126,2.028,204,2.159,232,2.152,239,2.028,707,2.676,741,2.999,751,4.234,753,2.957,758,4.234,761,4.679,768,3.334,795,3.919,866,4.395,933,2.957,934,5.806,935,5.806,936,5.177,937,3.907,938,3.907,939,4.234,940,3.907,941,3.919,942,3.919,943,3.334,944,3.334,945,3.334,946,3.919,947,3.334,948,3.334,949,3.334,950,3.907,951,3.907,952,3.907,953,3.907,954,3.907,955,3.907]],["title/classes/Secret.html",[40,0.054,180,1.41]],["body/classes/Secret.html",[3,0.308,4,0.276,5,0.276,7,0.565,13,2.571,14,0.022,16,1.025,19,1.303,20,0.9,25,0.433,39,0.308,40,0.067,48,1.536,53,0.017,54,0.017,75,1.969,103,2.683,180,2.209,202,2.209,204,2.16,235,2.097,237,3.035,238,3.107,239,2.209,256,3.879,261,3.537,262,3.537,285,3.267,286,1.969,287,1.853,290,3.537,647,3.374,656,4.268,956,3.804,957,4.681,958,4.457,959,4.457,960,4.457,961,3.374]],["title/classes/Transcription.html",[40,0.054,646,1.938]],["body/classes/Transcription.html",[3,0.23,4,0.206,5,0.206,7,0.421,13,2.85,14,0.022,16,1.136,20,1.037,25,0.356,39,0.23,40,0.05,53,0.014,54,0.014,75,2.019,103,2.266,202,2.779,204,1.866,235,1.565,237,2.498,238,2.685,239,1.818,246,3.226,247,3.178,252,2.278,254,3.96,256,4.372,261,2.086,262,2.91,270,3.096,281,3.178,282,2.517,283,4.165,285,2.688,286,1.469,287,1.383,290,2.086,640,4.56,646,2.498,648,4.56,650,4.56,652,4.56,654,4.56,658,4.56,730,2.517,918,3.66,921,4.045,962,2.838,963,4.56,964,4.56,965,3.326,966,3.326,967,3.326,968,3.326,969,3.326,970,3.326,971,3.326,972,3.326,973,3.326,974,3.326,975,3.326]],["title/classes/User.html",[40,0.054,48,0.851]],["body/classes/User.html",[3,0.267,4,0.239,5,0.239,7,0.489,14,0.022,16,1.145,19,0.814,20,1.024,32,3.345,39,0.443,40,0.058,43,1.079,48,1.514,51,2.551,53,0.015,54,0.015,75,2.49,113,3.313,180,2.581,202,2.013,204,2.016,218,3.621,220,4.37,235,1.817,239,2.013,395,3.953,538,4.384,812,2.923,957,2.923,976,2.645,977,4.37,978,4.37,979,4.927,980,3.862,981,3.862,982,3.862,983,3.862,984,3.862,985,3.862,986,3.862,987,3.862,988,3.862,989,4.384,990,4.384,991,4.384,992,4.384,993,4.384,994,2.645]],["title/classes/User-1.html",[40,0.045,48,0.712,818,2.063]],["body/classes/User-1.html",[3,0.228,4,0.204,5,0.204,7,0.418,13,2.846,14,0.022,16,1.134,20,0.996,25,0.442,32,3.083,37,0.922,39,0.228,40,0.05,48,1.09,51,2.351,53,0.014,54,0.014,75,2.366,103,2.462,113,2.864,180,2.578,202,2.258,204,1.858,218,3.338,220,4.028,234,2.396,235,1.553,237,2.484,238,2.673,239,1.808,252,2.26,254,2.26,256,4.367,261,2.07,262,2.894,269,3.938,270,2.673,281,3.16,283,3.16,285,2.673,286,1.458,287,1.372,290,2.07,291,3.938,367,2.498,394,2.26,395,3.644,402,2.816,647,2.498,656,3.493,977,4.028,978,4.028,979,4.541,995,2.816,996,5.321,997,5.321,998,3.299,999,3.299,1000,3.299,1001,3.299,1002,3.299,1003,3.299,1004,3.299,1005,3.299,1006,3.299,1007,3.299,1008,3.299,1009,3.299,1010,3.299,1011,4.614,1012,2.498,1013,3.299]],["title/controllers/UsersController.html",[0,1.41,1014,2.465]],["body/controllers/UsersController.html",[0,1.804,2,1.914,3,0.318,4,0.285,5,0.285,7,0.583,8,1.36,9,1.96,13,1.914,14,0.022,16,0.763,18,1.088,19,0.97,20,0.67,21,1.088,23,1.088,24,2.128,25,0.504,26,4.299,28,0.583,30,2.668,31,3.153,34,2.954,37,1.286,39,0.318,40,0.069,41,2.313,45,1.702,48,1.088,50,1.286,53,0.017,54,0.017,140,4.751,994,4.503,1014,3.941,1015,3.929,1016,5.754,1017,4.604,1018,4.604,1019,3.929,1020,4.604,1021,4.604,1022,4.604]],["title/modules/UsersModule.html",[55,0.804,61,1.938]],["body/modules/UsersModule.html",[2,2.36,3,0.312,4,0.278,5,0.278,14,0.022,25,0.527,28,0.571,34,3.41,39,0.312,40,0.068,48,1.064,53,0.017,54,0.017,55,1.267,57,1.573,58,1.982,61,3.753,62,2.224,63,1.765,64,1.765,66,1.873,69,2.36,70,2.508,87,2.826,88,1.991,180,1.765,346,2.425,549,3.887,552,3.845,961,3.41,1012,3.41,1014,4.256,1019,3.845,1023,3.845,1024,3.845,1025,3.845,1026,4.505,1027,4.505]],["title/injectables/UsersService.html",[34,1.694,123,0.674]],["body/injectables/UsersService.html",[3,0.151,4,0.135,5,0.135,7,0.276,8,0.802,9,2.138,14,0.022,16,0.967,18,1.333,19,1.23,20,0.821,21,1.333,23,1.333,24,2.344,25,0.493,28,0.276,29,1.367,32,1.263,34,1.597,36,3.156,37,0.609,39,0.151,40,0.033,43,1.509,44,3.559,45,2.086,48,1.378,50,1.509,51,1.842,53,0.01,54,0.01,75,2.14,88,0.963,92,2.953,93,1.367,95,0.906,103,0.854,107,2.616,113,2.534,115,2.325,123,0.636,124,0.854,126,1.186,137,3.7,180,1.33,202,1.634,204,1.186,205,2.897,206,1.65,207,2.57,210,2.08,211,1.367,213,2.416,214,1.174,218,2.616,231,1.367,232,0.906,270,1.263,286,2.648,287,0.906,314,4.611,339,1.493,343,1.65,346,2.534,351,1.493,353,2.13,367,2.57,374,2.57,375,3.223,379,2.57,436,2.953,549,3.493,555,1.86,558,1.86,559,1.86,709,1.65,736,2.897,746,2.897,753,1.65,791,1.86,812,1.65,813,1.86,814,1.86,961,1.65,977,3.861,978,1.65,994,3.223,1012,1.65,1028,1.86,1029,3.395,1030,4.17,1031,3.395,1032,3.395,1033,4.17,1034,2.18,1035,2.18,1036,3.395,1037,2.18,1038,2.18,1039,2.18,1040,2.18,1041,3.395,1042,2.18,1043,3.395,1044,2.18,1045,2.18,1046,2.18,1047,1.65,1048,2.18,1049,3.395,1050,2.18,1051,2.18,1052,3.395,1053,2.18,1054,2.18,1055,2.18,1056,2.18,1057,2.18,1058,2.18,1059,2.18,1060,2.18,1061,3.395,1062,2.18,1063,3.395,1064,2.18,1065,2.18,1066,2.18,1067,2.18,1068,3.395,1069,2.18,1070,2.18,1071,2.18,1072,2.18,1073,2.18,1074,2.18,1075,2.18,1076,2.18,1077,2.18,1078,2.18]],["title/modules/WebRTCModule.html",[55,0.804,85,2.086]],["body/modules/WebRTCModule.html",[3,0.321,4,0.287,5,0.287,14,0.022,25,0.506,28,0.588,39,0.321,40,0.07,53,0.017,54,0.017,55,1.291,57,1.621,58,2.02,62,2.266,63,1.819,64,1.819,66,1.93,69,2.405,70,2.556,85,4.065,301,3.351,431,4.215,469,4.315,518,3.628,726,3.962,1079,3.962,1080,3.962,1081,3.962,1082,4.642,1083,4.642,1084,4.642]],["title/injectables/WebRTCService.html",[123,0.674,431,2.086]],["body/injectables/WebRTCService.html",[3,0.16,4,0.143,5,0.143,7,0.293,8,0.84,9,2.074,14,0.022,16,0.917,18,1.307,19,1.166,20,0.805,21,1.307,23,1.238,25,0.478,28,0.293,29,1.45,37,0.646,39,0.16,40,0.035,43,1.61,45,2.046,50,1.209,51,2.799,53,0.01,54,0.01,95,0.961,105,1.45,113,1.913,123,0.666,124,0.906,126,1.241,202,1.696,204,2.013,210,1.57,213,2.507,214,2.615,218,2.229,234,2.473,240,1.245,242,1.75,243,1.245,245,1.75,248,1.973,249,1.973,267,2.615,278,1.34,306,3.102,323,2.964,349,1.75,350,1.75,355,1.584,416,3.339,431,2.059,436,4.084,469,1.584,476,1.75,477,1.584,478,1.75,479,1.75,481,1.584,482,1.584,493,1.973,500,1.584,502,1.75,504,1.75,676,1.973,693,2.69,694,1.75,702,2.69,759,1.584,765,1.973,819,3.033,830,1.973,838,3.033,1085,1.973,1086,3.553,1087,3.553,1088,3.553,1089,3.553,1090,3.553,1091,2.312,1092,2.312,1093,3.553,1094,2.312,1095,3.553,1096,2.312,1097,3.553,1098,2.312,1099,3.553,1100,2.312,1101,3.553,1102,2.312,1103,2.433,1104,2.312,1105,2.312,1106,2.312,1107,2.69,1108,2.312,1109,4.857,1110,2.312,1111,6.51,1112,5.762,1113,3.553,1114,2.312,1115,5.241,1116,2.312,1117,2.312,1118,3.553,1119,2.312,1120,2.312,1121,2.312,1122,2.312,1123,1.973,1124,2.312,1125,2.312,1126,2.312,1127,2.312,1128,5.241,1129,2.312,1130,3.553,1131,3.553,1132,3.553,1133,2.312,1134,1.973,1135,2.312,1136,2.312,1137,3.553,1138,2.312,1139,3.553,1140,2.312,1141,2.312,1142,2.312,1143,2.312,1144,2.312,1145,2.312,1146,2.312,1147,3.553,1148,2.312,1149,2.312,1150,2.312,1151,2.312]],["title/classes/WorkersPool.html",[40,0.054,939,2.465]],["body/classes/WorkersPool.html",[0,2.087,3,0.229,4,0.204,5,0.204,7,0.419,8,1.092,14,0.022,16,1.069,18,1.092,19,0.974,20,0.883,21,1.092,23,1.259,25,0.466,37,0.924,39,0.229,40,0.05,43,1.488,50,0.924,53,0.014,54,0.014,95,1.374,103,1.81,122,2.502,126,1.155,146,3.648,210,2.955,232,1.374,235,1.556,239,1.81,278,1.915,375,3.648,617,4.546,763,2.502,764,2.264,900,2.822,906,4.032,939,3.164,1152,2.822,1153,5.326,1154,5.326,1155,4.62,1156,5.767,1157,5.767,1158,4.62,1159,5.179,1160,4.62,1161,5.326,1162,3.306,1163,4.922,1164,3.306,1165,4.922,1166,4.62,1167,4.62,1168,3.306,1169,3.306,1170,3.306,1171,3.306,1172,3.306,1173,3.306,1174,2.502,1175,3.497,1176,3.306,1177,3.306,1178,3.306,1179,3.306,1180,3.306,1181,3.306,1182,3.306,1183,3.306,1184,3.306,1185,3.306,1186,3.306,1187,3.306,1188,3.306,1189,4.62,1190,4.62,1191,3.306,1192,3.306,1193,5.767,1194,3.306,1195,3.306,1196,4.62,1197,3.306,1198,3.306,1199,3.306,1200,3.306,1201,3.306,1202,3.306,1203,3.306,1204,3.306,1205,3.306]],["title/guards/WsJwtGuard.html",[176,2.258,608,2.725]],["body/guards/WsJwtGuard.html",[3,0.258,4,0.23,5,0.23,7,0.472,8,1.185,9,1.77,14,0.022,16,0.831,18,1.185,19,1.057,20,0.73,21,1.185,23,0.88,24,1.854,25,0.52,28,0.472,33,2.158,37,1.041,39,0.258,40,0.056,43,1.694,45,1.854,48,1.339,50,1.041,51,1.646,53,0.015,54,0.015,75,1.751,123,0.939,126,1.751,147,3.276,170,2.551,176,3.145,177,4.335,190,5.686,196,2.819,206,2.819,209,3.434,210,2.215,231,2.336,232,1.548,233,3.179,344,3.796,345,2.336,351,2.551,474,2.819,475,3.556,570,2.551,571,4.59,575,3.796,576,4.59,578,2.819,593,3.179,610,2.819,684,2.819,1103,2.551,1206,3.724,1207,3.724,1208,3.724,1209,3.724,1210,3.724,1211,3.724,1212,3.724,1213,3.724,1214,3.724,1215,3.724,1216,3.724,1217,3.724,1218,3.724,1219,3.724,1220,3.724,1221,3.724,1222,3.724,1223,3.724,1224,3.724]],["title/coverage.html",[1225,3.709]],["body/coverage.html",[0,2.104,1,1.671,5,0.151,6,2.082,14,0.022,20,0.355,30,1.414,34,1.148,40,0.091,48,0.875,53,0.011,54,0.011,71,1.671,72,2.082,76,1.414,94,1.847,123,1.203,125,2.082,128,1.414,131,1.671,132,2.082,147,1.226,149,1.671,165,1.531,166,1.847,173,1.847,174,1.671,176,1.531,177,1.671,178,1.847,180,0.956,184,2.082,232,1.014,234,1.014,236,2.082,246,1.148,285,1.414,306,1.314,312,2.802,347,1.847,384,1.414,385,2.082,416,1.414,417,2.082,431,1.414,432,1.314,475,2.806,481,1.671,483,1.671,529,1.671,530,1.671,532,1.671,553,2.082,569,1.847,570,3.064,581,1.671,591,2.082,608,2.802,609,1.847,611,2.082,619,1.847,626,1.847,629,2.082,646,1.314,659,1.671,660,2.082,683,1.847,733,3.386,741,1.414,771,1.847,772,1.847,773,1.847,774,1.847,780,1.847,781,1.847,782,1.847,783,1.847,792,2.802,794,1.847,846,5.618,933,2.802,939,1.671,941,1.847,942,1.847,946,1.847,956,2.082,962,2.082,976,1.671,995,2.082,1014,1.671,1015,2.082,1028,2.082,1047,1.847,1085,2.082,1103,1.671,1107,1.847,1152,2.082,1174,1.847,1175,1.847,1225,1.847,1226,2.44,1227,2.44,1228,2.44,1229,2.082,1230,7.239,1231,7.25,1232,3.16,1233,5.369,1234,5.651,1235,3.702,1236,3.818,1237,2.082,1238,4.994,1239,3.702,1240,3.702,1241,1.671,1242,2.082,1243,2.082,1244,2.082,1245,2.082,1246,2.082,1247,2.082,1248,2.082,1249,2.082,1250,4.582,1251,2.082,1252,5.012,1253,2.082,1254,4.474,1255,3.702,1256,3.16,1257,2.082,1258,2.082,1259,2.082,1260,3.16,1261,2.44,1262,2.44]],["title/dependencies.html",[58,1.511,1263,2.571]],["body/dependencies.html",[14,0.022,28,0.552,37,1.216,53,0.016,54,0.016,58,1.52,88,1.923,93,2.731,150,2.981,168,2.981,170,2.981,207,3.295,278,2.522,286,2.454,287,1.81,345,2.731,393,3.295,474,3.295,582,3.295,600,4.74,769,3.715,770,2.981,776,3.715,777,3.715,779,3.715,787,3.715,1165,3.715,1264,4.353,1265,6.116,1266,4.353,1267,6.443,1268,4.353,1269,5.554,1270,4.353,1271,4.353,1272,4.353,1273,4.353,1274,4.353,1275,4.353,1276,4.353,1277,4.353,1278,4.353,1279,4.353,1280,4.353,1281,4.353,1282,5.554,1283,5.554,1284,4.353,1285,4.353,1286,4.353,1287,4.353,1288,4.353,1289,4.353,1290,4.353,1291,4.353,1292,4.353,1293,4.353,1294,4.353,1295,4.353,1296,4.353]],["title/miscellaneous/enumerations.html",[1297,1.514,1298,3.692]],["body/miscellaneous/enumerations.html",[7,0.448,14,0.022,32,2.805,48,1.144,53,0.014,54,0.014,211,3.037,240,2.606,243,2.606,267,2.606,340,4.131,395,3.315,396,3.664,532,2.422,539,4.131,540,4.131,541,3.664,542,4.131,631,4.131,632,4.131,680,3.315,758,3.315,760,3.664,764,5.088,766,4.131,770,4.065,976,2.422,989,4.131,990,4.131,991,4.131,992,4.131,993,4.131,1241,2.422,1297,1.777,1298,3.018,1299,5.248,1300,4.131,1301,4.84,1302,3.018,1303,4.84,1304,4.84,1305,4.131,1306,5.935,1307,4.84,1308,4.84,1309,4.84,1310,4.84,1311,4.84,1312,4.84,1313,4.84,1314,4.84,1315,4.131,1316,4.131,1317,4.84,1318,4.84,1319,3.018,1320,4.84,1321,3.018]],["title/miscellaneous/functions.html",[1297,1.514,1322,3.692]],["body/miscellaneous/functions.html",[7,0.713,14,0.019,53,0.019,54,0.019,1248,4.799,1249,5.838,1297,2.825,1322,4.799,1323,5.623]],["title/index.html",[7,0.382,1324,3.012,1325,3.012]],["body/index.html",[4,0.271,14,0.021,53,0.016,54,0.016,287,1.824,418,3.744,541,3.321,751,3.823,759,3.005,917,3.744,918,3.005,1225,3.321,1326,4.387,1327,4.387,1328,5.582,1329,4.387,1330,4.387,1331,4.387,1332,4.387,1333,3.744,1334,6.139,1335,4.387,1336,4.387,1337,4.387,1338,6.929,1339,4.387,1340,4.387,1341,4.387,1342,6.819,1343,4.387,1344,4.387,1345,4.387,1346,4.387,1347,5.582,1348,5.582,1349,4.387,1350,4.387,1351,4.387,1352,5.582,1353,5.582,1354,4.387,1355,4.387,1356,4.387,1357,4.387,1358,4.387,1359,3.744,1360,4.387,1361,4.387,1362,4.387,1363,4.387,1364,4.387,1365,4.387,1366,4.387,1367,4.387,1368,4.387,1369,3.744,1370,4.387,1371,4.387,1372,4.387,1373,4.387,1374,4.387,1375,4.387,1376,3.744]],["title/modules.html",[57,1.711]],["body/modules.html",[14,0.017,53,0.017,54,0.017,56,3.038,57,1.692,61,2.607,79,3.317,83,2.806,84,3.038,85,2.806,301,2.806,410,3.038,518,3.038,525,3.038,724,3.038,1359,6.216,1377,7.284,1378,7.284,1379,7.284]],["title/overview.html",[1380,4.182]],["body/overview.html",[2,1.327,14,0.022,34,3.007,53,0.013,54,0.013,56,3.758,57,1.115,58,1.575,59,2.725,60,2.725,61,3.513,62,1.767,63,1.251,64,1.251,76,3.028,79,4.703,80,2.725,81,2.725,82,2.725,83,3.942,84,3.9,85,3.602,124,1.251,128,3.702,147,3.211,161,2.725,163,2.725,164,2.725,165,3.279,235,1.502,301,3.781,302,2.725,304,2.725,305,2.725,306,3.44,384,3.781,410,4.094,411,2.725,412,2.725,413,2.725,416,3.29,431,3.702,432,3.44,518,4.008,519,2.725,521,2.725,525,4.163,529,2.187,545,2.725,546,2.725,547,2.725,610,2.417,720,2.725,721,2.725,722,2.725,723,2.725,724,3.9,741,3.702,818,2.187,890,2.725,928,2.725,929,2.725,930,2.725,1023,2.725,1024,2.725,1025,2.725,1079,2.725,1080,2.725,1081,2.725,1380,2.725,1381,4.509,1382,3.193,1383,3.193]],["title/properties.html",[239,1.695,1263,2.571]],["body/properties.html",[14,0.021,53,0.019,54,0.019,239,2.181,1333,4.751,1369,4.751,1376,4.751,1384,5.567,1385,5.567,1386,5.567]],["title/miscellaneous/typealiases.html",[1297,1.514,1387,4.326]],["body/miscellaneous/typealiases.html",[7,0.446,12,4.119,14,0.017,20,1.073,36,3.654,53,0.014,54,0.014,137,3.306,152,3.654,180,1.891,196,2.665,209,3.306,327,4.119,337,4.119,341,3.654,389,2.412,397,3.306,398,3.654,436,3.028,476,3.654,477,3.306,478,3.654,479,3.654,486,3.654,530,2.412,532,2.412,537,3.005,543,4.7,544,3.306,626,2.665,665,4.119,669,4.119,673,4.119,679,3.654,681,3.306,734,4.119,747,4.119,767,4.119,906,3.654,943,4.119,944,4.119,945,4.119,976,2.412,994,3.306,1159,4.119,1163,4.119,1241,2.412,1297,1.769,1299,5.622,1302,3.005,1319,3.005,1321,3.005,1388,3.521,1389,4.827,1390,4.827,1391,3.521,1392,7.36,1393,3.521,1394,3.521,1395,3.521]],["title/miscellaneous/variables.html",[1297,1.514,1396,3.692]],["body/miscellaneous/variables.html",[7,0.231,9,0.919,14,0.022,20,0.962,24,0.673,30,1.705,43,0.822,45,0.673,50,1.035,51,1.3,53,0.009,54,0.009,75,2.113,92,1.846,94,2.227,103,0.713,105,1.142,106,1.378,107,1.142,133,2.511,134,2.227,149,2.015,166,1.378,173,2.803,174,2.015,178,2.227,179,1.553,180,0.713,181,1.378,182,1.553,183,1.553,185,2.511,202,2.144,204,0.636,216,1.378,232,1.223,234,1.223,238,2.641,240,0.98,243,0.98,246,0.857,309,1.247,312,1.378,346,1.584,347,2.227,348,1.378,349,1.378,350,2.227,355,1.247,358,1.378,475,1.142,481,2.015,483,2.015,500,1.247,502,1.378,504,1.378,544,1.247,554,2.511,570,2.015,581,2.015,583,1.553,586,1.378,619,2.227,634,1.378,635,1.378,636,1.378,637,1.378,646,1.584,680,1.247,681,1.247,683,2.227,687,2.227,690,1.378,707,1.247,709,1.378,715,1.378,731,3.219,733,1.378,751,2.913,758,2.015,759,2.913,760,3.219,761,3.219,763,5.33,764,4.823,770,1.247,771,2.227,772,2.227,773,2.227,774,2.227,780,2.227,781,2.227,782,2.227,783,2.227,792,3.219,793,2.511,794,2.227,795,2.803,796,2.511,797,2.511,798,1.553,818,1.247,834,1.553,846,1.378,853,1.553,862,2.511,866,1.378,918,2.536,921,1.378,933,1.378,941,2.227,942,2.227,946,2.227,947,1.553,948,1.553,949,1.553,957,2.227,963,1.553,964,1.553,1047,2.803,1103,2.015,1107,2.227,1123,1.553,1134,1.553,1174,2.227,1175,2.227,1229,1.553,1232,1.553,1236,1.553,1237,1.553,1241,1.247,1242,2.511,1243,1.553,1244,2.511,1245,1.553,1246,1.553,1247,1.553,1250,1.553,1251,2.511,1252,1.553,1253,2.511,1256,1.553,1257,4.263,1258,1.553,1259,1.553,1260,1.553,1297,0.915,1299,1.378,1300,1.553,1305,3.63,1315,2.511,1316,2.511,1396,1.553,1397,1.82,1398,2.942,1399,6.451,1400,5.472,1401,1.82,1402,1.82,1403,2.942,1404,1.82,1405,1.82,1406,1.82,1407,4.669,1408,2.942,1409,2.942,1410,2.942,1411,2.942,1412,1.82,1413,1.82,1414,2.942,1415,2.942,1416,1.82,1417,1.82,1418,1.82,1419,1.82,1420,2.942,1421,1.82,1422,1.82,1423,1.82,1424,1.82,1425,1.82,1426,1.82,1427,1.82,1428,1.82,1429,1.82,1430,1.82,1431,1.82,1432,1.82,1433,1.82,1434,1.82,1435,2.942,1436,1.82,1437,1.82,1438,1.82,1439,1.82,1440,1.82,1441,1.82,1442,2.942,1443,1.82,1444,2.942,1445,2.942,1446,2.942,1447,2.942,1448,2.942,1449,2.942,1450,2.942,1451,2.942,1452,1.82,1453,1.82,1454,1.82,1455,1.82,1456,1.82,1457,2.942,1458,2.942,1459,1.82,1460,1.82,1461,1.82,1462,1.82,1463,1.82,1464,1.82,1465,1.82,1466,1.82,1467,1.82,1468,1.82,1469,1.82,1470,1.82,1471,1.82,1472,1.82]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"controllers/AgentController.html":{},"modules/AgentModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"modules/CallsModule.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"interfaces/IPolicyHandler.html":{},"modules/InitModule.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"classes/Record.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"modules/SRModule.html":{},"injectables/SRService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebRTCModule.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":846,"title":{},"body":{"injectables/RecordsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":1385,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1290,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":1287,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":1281,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1231,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1255,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1254,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":1239,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1234,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1238,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1233,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1235,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1261,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1240,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":818,"title":{"classes/User-1.html":{}},"body":{"injectables/RecordsService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.2.0",{"_index":1266,"title":{},"body":{"dependencies.html":{}}}],["1.2.8",{"_index":1275,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":1438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["11",{"_index":1381,"title":{},"body":{"overview.html":{}}}],["12h",{"_index":1461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1}_${buildappendersidename(side)}_tmp.mp3",{"_index":849,"title":{},"body":{"injectables/RecordsService.html":{}}}],["2",{"_index":890,"title":{},"body":{"injectables/RecordsService.html":{},"overview.html":{}}}],["2.1.2",{"_index":1277,"title":{},"body":{"dependencies.html":{}}}],["2.1.3",{"_index":1296,"title":{},"body":{"dependencies.html":{}}}],["2.1.35",{"_index":1279,"title":{},"body":{"dependencies.html":{}}}],["2.3.4",{"_index":1286,"title":{},"body":{"dependencies.html":{}}}],["2400000",{"_index":1464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":1292,"title":{},"body":{"dependencies.html":{}}}],["3.3.2",{"_index":1280,"title":{},"body":{"dependencies.html":{}}}],["30000",{"_index":1472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":1465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.0",{"_index":1282,"title":{},"body":{"dependencies.html":{}}}],["4.17.21",{"_index":1278,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1382,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":1276,"title":{},"body":{"dependencies.html":{}}}],["5.4.3",{"_index":1264,"title":{},"body":{"dependencies.html":{}}}],["6.17.0",{"_index":1295,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":1272,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1294,"title":{},"body":{"dependencies.html":{}}}],["7000",{"_index":1437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8",{"_index":1383,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":1267,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":1268,"title":{},"body":{"dependencies.html":{}}}],["8.4.0",{"_index":1265,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":1284,"title":{},"body":{"dependencies.html":{}}}],["900000",{"_index":1466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_",{"_index":709,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["ability",{"_index":389,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["abilitybuilder",{"_index":390,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abilityclass",{"_index":391,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["abortcontroller",{"_index":1161,"title":{},"body":{"classes/WorkersPool.html":{}}}],["access_token",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":396,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/IPolicyHandler.html":{},"miscellaneous/enumerations.html":{}}}],["active",{"_index":1314,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["active_finder",{"_index":347,"title":{},"body":{"injectables/CallsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["activecall",{"_index":371,"title":{},"body":{"injectables/CallsService.html":{}}}],["addrecord",{"_index":313,"title":{},"body":{"injectables/CallsService.html":{}}}],["addrecord(recordid",{"_index":322,"title":{},"body":{"injectables/CallsService.html":{}}}],["addstatus",{"_index":251,"title":{},"body":{"classes/Call.html":{}}}],["addstatus(instance",{"_index":273,"title":{},"body":{"classes/Call.html":{}}}],["admin",{"_index":989,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["agent",{"_index":1414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agent.controller",{"_index":68,"title":{},"body":{"modules/AgentModule.html":{}}}],["agent/agent.module",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["agentaway",{"_index":1311,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["agentcontroller",{"_index":1,"title":{"controllers/AgentController.html":{}},"body":{"controllers/AgentController.html":{},"modules/AgentModule.html":{},"coverage.html":{}}}],["agentmodule",{"_index":56,"title":{"modules/AgentModule.html":{}},"body":{"modules/AgentModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["agentoffline",{"_index":1309,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":1388,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alpha.10",{"_index":1273,"title":{},"body":{"dependencies.html":{}}}],["amazing",{"_index":1360,"title":{},"body":{"index.html":{}}}],["amix",{"_index":887,"title":{},"body":{"injectables/RecordsService.html":{}}}],["answer",{"_index":1134,"title":{},"body":{"injectables/WebRTCService.html":{},"miscellaneous/variables.html":{}}}],["answercall",{"_index":419,"title":{},"body":{"classes/EventsGateway.html":{}}}],["answercall(payload",{"_index":435,"title":{},"body":{"classes/EventsGateway.html":{}}}],["answerpayload",{"_index":476,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/WebRTCService.html":{},"miscellaneous/typealiases.html":{}}}],["answerwaiting",{"_index":1312,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["api",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":1340,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":77,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appability",{"_index":397,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["appcontroller",{"_index":71,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["append",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appenderside",{"_index":1300,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["appendrecord",{"_index":420,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/RecordsService.html":{}}}],["appendrecord(payload",{"_index":439,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/RecordsService.html":{}}}],["appendrecordpayload",{"_index":486,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/RecordsService.html":{},"miscellaneous/typealiases.html":{}}}],["applications",{"_index":1332,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":79,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":76,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":1442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arr.length",{"_index":923,"title":{},"body":{"injectables/RecordsService.html":{}}}],["async",{"_index":9,"title":{},"body":{"controllers/AgentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CallsService.html":{},"classes/EventsGateway.html":{},"injectables/InitService.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["auth(username",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.controller",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/EventsGateway.html":{}}}],["auth.guard.ts",{"_index":570,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth.guard.ts:14",{"_index":577,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:17",{"_index":1206,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["auth.guard.ts:23",{"_index":1207,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["auth.guard.ts:9",{"_index":574,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["auth/auth.module",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":1208,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["authcontroller",{"_index":131,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":579,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":584,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":83,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EventsModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1369,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authpayload",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["authpayload.email",{"_index":1066,"title":{},"body":{"injectables/UsersService.html":{}}}],["authpayload.password",{"_index":1068,"title":{},"body":{"injectables/UsersService.html":{}}}],["authpayload.secret",{"_index":1073,"title":{},"body":{"injectables/UsersService.html":{}}}],["authpayload.username",{"_index":1065,"title":{},"body":{"injectables/UsersService.html":{}}}],["authresponsepayload",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/typealiases.html":{}}}],["authservice",{"_index":147,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"overview.html":{}}}],["authtoken",{"_index":1212,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["autoincrement",{"_index":262,"title":{},"body":{"classes/Call.html":{},"classes/Record.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User-1.html":{}}}],["autoloadmodels",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["availabletask",{"_index":1193,"title":{},"body":{"classes/WorkersPool.html":{}}}],["availabletask.callback(result",{"_index":1199,"title":{},"body":{"classes/WorkersPool.html":{}}}],["await",{"_index":45,"title":{},"body":{"controllers/AgentController.html":{},"injectables/AuthService.html":{},"injectables/CallsService.html":{},"classes/EventsGateway.html":{},"injectables/InitService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/variables.html":{}}}],["away",{"_index":993,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["b",{"_index":1425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backers",{"_index":1361,"title":{},"body":{"index.html":{}}}],["base",{"_index":1305,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["base_api_route",{"_index":1257,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["bcrypt",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.comparesync(password",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hashsync",{"_index":1070,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt_sault",{"_index":1047,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["beforeapplicationshutdown",{"_index":314,"title":{},"body":{"injectables/CallsService.html":{},"injectables/UsersService.html":{}}}],["beforecreate",{"_index":279,"title":{},"body":{"classes/Call.html":{}}}],["beforeupdate",{"_index":280,"title":{},"body":{"classes/Call.html":{}}}],["beforeupdate()@beforecreate",{"_index":274,"title":{},"body":{"classes/Call.html":{}}}],["belongsto",{"_index":281,"title":{},"body":{"classes/Call.html":{},"classes/Record.html":{},"classes/Transcription.html":{},"classes/User-1.html":{}}}],["belongsto(undefined",{"_index":252,"title":{},"body":{"classes/Call.html":{},"classes/Record.html":{},"classes/Transcription.html":{},"classes/User-1.html":{}}}],["bin",{"_index":710,"title":{},"body":{"controllers/RecordsController.html":{}}}],["body",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RecordsController.html":{},"controllers/UsersController.html":{}}}],["body.id",{"_index":714,"title":{},"body":{"controllers/RecordsController.html":{}}}],["boolean",{"_index":536,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["boolean(user",{"_index":1220,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["bootstrap",{"_index":1249,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1379,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1377,"title":{},"body":{"modules.html":{}}}],["build",{"_index":399,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["buildappendersidename",{"_index":780,"title":{},"body":{"injectables/RecordsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["buildappendersidename(callside.callee)}.${target_ext",{"_index":871,"title":{},"body":{"injectables/RecordsService.html":{}}}],["buildappendersidename(callside.caller)}.${target_ext",{"_index":873,"title":{},"body":{"injectables/RecordsService.html":{}}}],["buildappendersidename(side",{"_index":878,"title":{},"body":{"injectables/RecordsService.html":{}}}],["buildappendersidename(side)}.${target_ext",{"_index":856,"title":{},"body":{"injectables/RecordsService.html":{}}}],["building",{"_index":1329,"title":{},"body":{"index.html":{}}}],["buildtranscriptionfiledname",{"_index":1253,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["buildtranscriptionfiledname(side",{"_index":1418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buildtranscriptionforeignid",{"_index":781,"title":{},"body":{"injectables/RecordsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["buildtranscriptionforeignid(side",{"_index":927,"title":{},"body":{"injectables/RecordsService.html":{}}}],["busy",{"_index":1310,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["call",{"_index":234,"title":{"classes/Call.html":{}},"body":{"classes/Call.html":{},"modules/CallsModule.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/Record.html":{},"injectables/RecordsService.html":{},"classes/User-1.html":{},"injectables/WebRTCService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["call.callee.username",{"_index":699,"title":{},"body":{"controllers/RecordsController.html":{}}}],["call.calleeid",{"_index":702,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/WebRTCService.html":{}}}],["call.calleewebrtcnumber",{"_index":697,"title":{},"body":{"controllers/RecordsController.html":{}}}],["call.caller.username",{"_index":700,"title":{},"body":{"controllers/RecordsController.html":{}}}],["call.callerid",{"_index":701,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/RecordsService.html":{}}}],["call.callerwebrtcnumber",{"_index":698,"title":{},"body":{"controllers/RecordsController.html":{}}}],["call.id",{"_index":693,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/WebRTCService.html":{}}}],["call.recordid",{"_index":821,"title":{},"body":{"injectables/RecordsService.html":{}}}],["call.status",{"_index":694,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/WebRTCService.html":{}}}],["call.statussequence",{"_index":695,"title":{},"body":{"controllers/RecordsController.html":{}}}],["call.statustimestampssequence",{"_index":696,"title":{},"body":{"controllers/RecordsController.html":{}}}],["call.tablename",{"_index":404,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["call_record_",{"_index":1439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback",{"_index":955,"title":{},"body":{"injectables/SRService.html":{}}}],["callconnection",{"_index":327,"title":{},"body":{"injectables/CallsService.html":{},"miscellaneous/typealiases.html":{}}}],["callee",{"_index":240,"title":{},"body":{"classes/Call.html":{},"injectables/CallsService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/WebRTCService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["callee.id",{"_index":378,"title":{},"body":{"injectables/CallsService.html":{}}}],["callee.status",{"_index":366,"title":{},"body":{"injectables/CallsService.html":{}}}],["calleeid",{"_index":241,"title":{},"body":{"classes/Call.html":{},"injectables/CallsService.html":{}}}],["calleepath",{"_index":872,"title":{},"body":{"injectables/RecordsService.html":{}}}],["calleewebrtcnumber",{"_index":242,"title":{},"body":{"classes/Call.html":{},"injectables/CallsService.html":{},"injectables/WebRTCService.html":{}}}],["caller",{"_index":243,"title":{},"body":{"classes/Call.html":{},"injectables/CallsService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/WebRTCService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["caller.id",{"_index":377,"title":{},"body":{"injectables/CallsService.html":{}}}],["callerid",{"_index":244,"title":{},"body":{"classes/Call.html":{},"injectables/CallsService.html":{}}}],["callerpath",{"_index":870,"title":{},"body":{"injectables/RecordsService.html":{}}}],["callerrors",{"_index":340,"title":{},"body":{"injectables/CallsService.html":{},"miscellaneous/enumerations.html":{}}}],["callerwebrtcnumber",{"_index":245,"title":{},"body":{"classes/Call.html":{},"injectables/CallsService.html":{},"injectables/WebRTCService.html":{}}}],["callid",{"_index":323,"title":{},"body":{"injectables/CallsService.html":{},"classes/Record.html":{},"injectables/RecordsService.html":{},"injectables/WebRTCService.html":{}}}],["callidpayload",{"_index":477,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/RecordsService.html":{},"injectables/WebRTCService.html":{},"miscellaneous/typealiases.html":{}}}],["callmodel",{"_index":309,"title":{},"body":{"modules/CallsModule.html":{},"injectables/CallsService.html":{},"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["callpayload",{"_index":329,"title":{},"body":{"injectables/CallsService.html":{}}}],["callpayload.calleewebrtcnumber",{"_index":363,"title":{},"body":{"injectables/CallsService.html":{}}}],["callpayload.callerwebrtcnumber",{"_index":362,"title":{},"body":{"injectables/CallsService.html":{}}}],["calls",{"_index":996,"title":{},"body":{"classes/User-1.html":{}}}],["calls.model",{"_index":310,"title":{},"body":{"modules/CallsModule.html":{},"injectables/CallsService.html":{}}}],["calls.service",{"_index":308,"title":{},"body":{"modules/CallsModule.html":{}}}],["callside",{"_index":760,"title":{},"body":{"injectables/RecordsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["callside.callee",{"_index":832,"title":{},"body":{"injectables/RecordsService.html":{}}}],["callside.caller",{"_index":831,"title":{},"body":{"injectables/RecordsService.html":{}}}],["callsmodule",{"_index":301,"title":{"modules/CallsModule.html":{}},"body":{"modules/CallsModule.html":{},"modules/RecordsModule.html":{},"modules/WebRTCModule.html":{},"modules.html":{},"overview.html":{}}}],["callsservice",{"_index":306,"title":{"injectables/CallsService.html":{}},"body":{"modules/CallsModule.html":{},"injectables/CallsService.html":{},"injectables/RecordsService.html":{},"injectables/WebRTCService.html":{},"coverage.html":{},"overview.html":{}}}],["callstatus",{"_index":267,"title":{},"body":{"classes/Call.html":{},"injectables/CallsService.html":{},"classes/EventsGateway.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/WebRTCService.html":{},"miscellaneous/enumerations.html":{}}}],["callstatus.active",{"_index":350,"title":{},"body":{"injectables/CallsService.html":{},"injectables/WebRTCService.html":{},"miscellaneous/variables.html":{}}}],["callstatus.answerwaiting",{"_index":349,"title":{},"body":{"injectables/CallsService.html":{},"injectables/WebRTCService.html":{},"miscellaneous/variables.html":{}}}],["callstatus.cancelled",{"_index":502,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/WebRTCService.html":{},"miscellaneous/variables.html":{}}}],["callstatus.ended",{"_index":500,"title":{},"body":{"classes/EventsGateway.html":{},"controllers/RecordsController.html":{},"injectables/WebRTCService.html":{},"miscellaneous/variables.html":{}}}],["callstatus.failed",{"_index":355,"title":{},"body":{"injectables/CallsService.html":{},"classes/EventsGateway.html":{},"injectables/WebRTCService.html":{},"miscellaneous/variables.html":{}}}],["callstatus.rejected",{"_index":504,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/WebRTCService.html":{},"miscellaneous/variables.html":{}}}],["callstatus.timeexceeded",{"_index":1110,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["calltype",{"_index":341,"title":{},"body":{"injectables/CallsService.html":{},"injectables/RecordsService.html":{},"miscellaneous/typealiases.html":{}}}],["can(action.create",{"_index":403,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.manage",{"_index":401,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["can(action.update",{"_index":405,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["canactivate",{"_index":571,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"guards/WsJwtGuard.html":{}}}],["canactivate(context",{"_index":575,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"guards/WsJwtGuard.html":{}}}],["cancel",{"_index":1457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cancelcall",{"_index":421,"title":{},"body":{"classes/EventsGateway.html":{}}}],["cancelcall(payload",{"_index":442,"title":{},"body":{"classes/EventsGateway.html":{}}}],["cancelled",{"_index":1317,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cancelledtimestamp",{"_index":1471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["casl.service",{"_index":415,"title":{},"body":{"modules/CaslModule.html":{},"guards/PoliciesGuard.html":{}}}],["casl/ability",{"_index":393,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/IPolicyHandler.html":{},"dependencies.html":{}}}],["caslabilityfactory",{"_index":384,"title":{"injectables/CaslAbilityFactory.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"guards/PoliciesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["caslmodule",{"_index":410,"title":{"modules/CaslModule.html":{}},"body":{"modules/CaslModule.html":{},"modules/EventsModule.html":{},"modules.html":{},"overview.html":{}}}],["catch",{"_index":1221,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["change",{"_index":1459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["change_call",{"_index":1460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["change_password",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["changecallstatuspayload",{"_index":337,"title":{},"body":{"injectables/CallsService.html":{},"miscellaneous/typealiases.html":{}}}],["changestatus",{"_index":10,"title":{},"body":{"controllers/AgentController.html":{}}}],["changestatus(request",{"_index":11,"title":{},"body":{"controllers/AgentController.html":{}}}],["changestatuspayload",{"_index":36,"title":{},"body":{"controllers/AgentController.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["changestatuspayload.status",{"_index":1075,"title":{},"body":{"injectables/UsersService.html":{}}}],["changestatuspayload.user.id",{"_index":1076,"title":{},"body":{"injectables/UsersService.html":{}}}],["check_policies_key",{"_index":619,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["check_policy",{"_index":1434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkpolicies",{"_index":1244,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["checktimeexceed",{"_index":1086,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["checktimeexceed(callid",{"_index":1093,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["child_process",{"_index":1172,"title":{},"body":{"classes/WorkersPool.html":{}}}],["chunk",{"_index":861,"title":{},"body":{"injectables/RecordsService.html":{}}}],["chunk_duration",{"_index":771,"title":{},"body":{"injectables/RecordsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["class",{"_index":40,"title":{"classes/Call.html":{},"classes/EventsGateway.html":{},"classes/Record.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/WorkersPool.html":{}},"body":{"controllers/AgentController.html":{},"modules/AgentModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"modules/CallsModule.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"modules/InitModule.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"classes/Record.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"modules/SRModule.html":{},"injectables/SRService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebRTCModule.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["classes",{"_index":235,"title":{},"body":{"classes/Call.html":{},"classes/EventsGateway.html":{},"classes/Record.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/WorkersPool.html":{},"overview.html":{}}}],["client",{"_index":1210,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["client.handshake?.query?.token",{"_index":1213,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["client.join(roomprefix(user.id",{"_index":1218,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["client.rooms.has(roomprefix(user.id",{"_index":1217,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["cluster_agentmodule",{"_index":59,"title":{},"body":{"modules/AgentModule.html":{},"overview.html":{}}}],["cluster_agentmodule_imports",{"_index":60,"title":{},"body":{"modules/AgentModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_callsmodule",{"_index":302,"title":{},"body":{"modules/CallsModule.html":{},"overview.html":{}}}],["cluster_callsmodule_exports",{"_index":304,"title":{},"body":{"modules/CallsModule.html":{},"overview.html":{}}}],["cluster_callsmodule_imports",{"_index":303,"title":{},"body":{"modules/CallsModule.html":{}}}],["cluster_callsmodule_providers",{"_index":305,"title":{},"body":{"modules/CallsModule.html":{},"overview.html":{}}}],["cluster_caslmodule",{"_index":411,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_exports",{"_index":413,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_caslmodule_imports",{"_index":412,"title":{},"body":{"modules/CaslModule.html":{},"overview.html":{}}}],["cluster_eventsmodule",{"_index":519,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_exports",{"_index":521,"title":{},"body":{"modules/EventsModule.html":{},"overview.html":{}}}],["cluster_eventsmodule_imports",{"_index":520,"title":{},"body":{"modules/EventsModule.html":{}}}],["cluster_initmodule",{"_index":545,"title":{},"body":{"modules/InitModule.html":{},"overview.html":{}}}],["cluster_initmodule_exports",{"_index":546,"title":{},"body":{"modules/InitModule.html":{},"overview.html":{}}}],["cluster_initmodule_providers",{"_index":547,"title":{},"body":{"modules/InitModule.html":{},"overview.html":{}}}],["cluster_recordsmodule",{"_index":720,"title":{},"body":{"modules/RecordsModule.html":{},"overview.html":{}}}],["cluster_recordsmodule_exports",{"_index":721,"title":{},"body":{"modules/RecordsModule.html":{},"overview.html":{}}}],["cluster_recordsmodule_imports",{"_index":723,"title":{},"body":{"modules/RecordsModule.html":{},"overview.html":{}}}],["cluster_recordsmodule_providers",{"_index":722,"title":{},"body":{"modules/RecordsModule.html":{},"overview.html":{}}}],["cluster_srmodule",{"_index":928,"title":{},"body":{"modules/SRModule.html":{},"overview.html":{}}}],["cluster_srmodule_exports",{"_index":930,"title":{},"body":{"modules/SRModule.html":{},"overview.html":{}}}],["cluster_srmodule_providers",{"_index":929,"title":{},"body":{"modules/SRModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1023,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1024,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1025,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_webrtcmodule",{"_index":1079,"title":{},"body":{"modules/WebRTCModule.html":{},"overview.html":{}}}],["cluster_webrtcmodule_exports",{"_index":1080,"title":{},"body":{"modules/WebRTCModule.html":{},"overview.html":{}}}],["cluster_webrtcmodule_providers",{"_index":1081,"title":{},"body":{"modules/WebRTCModule.html":{},"overview.html":{}}}],["column",{"_index":256,"title":{},"body":{"classes/Call.html":{},"classes/Record.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User-1.html":{}}}],["column({defaultvalue",{"_index":269,"title":{},"body":{"classes/Call.html":{},"classes/User-1.html":{}}}],["column({primarykey",{"_index":261,"title":{},"body":{"classes/Call.html":{},"classes/Record.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User-1.html":{}}}],["column({type",{"_index":640,"title":{},"body":{"classes/Record.html":{},"classes/Transcription.html":{}}}],["column({unique",{"_index":1009,"title":{},"body":{"classes/User-1.html":{}}}],["complexfilter",{"_index":885,"title":{},"body":{"injectables/RecordsService.html":{}}}],["conf",{"_index":963,"title":{},"body":{"classes/Transcription.html":{},"miscellaneous/variables.html":{}}}],["config",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["config.get(db_variables.database_dialect",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(db_variables.database_host",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(db_variables.database_name",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(db_variables.database_password",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(db_variables.database_port",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(db_variables.database_user",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get(jwt_secret_name",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configmodule",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["console.log('\\x1b[34m%s\\x1b[0m",{"_index":1443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('mergereject",{"_index":869,"title":{},"body":{"injectables/RecordsService.html":{}}}],["console.log('plantask",{"_index":1187,"title":{},"body":{"classes/WorkersPool.html":{}}}],["console.log('task",{"_index":1200,"title":{},"body":{"classes/WorkersPool.html":{}}}],["console.log('tryruntask",{"_index":1195,"title":{},"body":{"classes/WorkersPool.html":{}}}],["console.log(id",{"_index":801,"title":{},"body":{"injectables/RecordsService.html":{}}}],["consoleblue",{"_index":483,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/RecordsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["consoleblue(`user",{"_index":509,"title":{},"body":{"classes/EventsGateway.html":{}}}],["const",{"_index":43,"title":{},"body":{"controllers/AgentController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/variables.html":{}}}],["constants",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/EventsGateway.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{}}}],["constructor",{"_index":126,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CallsService.html":{},"classes/EventsGateway.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{}}}],["constructor(authservice",{"_index":593,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/WsJwtGuard.html":{}}}],["constructor(callmodel",{"_index":320,"title":{},"body":{"injectables/CallsService.html":{}}}],["constructor(eventsgateway",{"_index":1091,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["constructor(initservice",{"_index":127,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(pooloptions",{"_index":1158,"title":{},"body":{"classes/WorkersPool.html":{}}}],["constructor(private",{"_index":41,"title":{},"body":{"controllers/AgentController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/RecordsController.html":{},"controllers/UsersController.html":{}}}],["constructor(recordmodel",{"_index":740,"title":{},"body":{"injectables/RecordsService.html":{}}}],["constructor(reflector",{"_index":572,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["constructor(usermodel",{"_index":555,"title":{},"body":{"injectables/InitService.html":{},"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(webrtcservice",{"_index":430,"title":{},"body":{"classes/EventsGateway.html":{}}}],["context",{"_index":578,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"guards/WsJwtGuard.html":{}}}],["context.getclass",{"_index":589,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":588,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":622,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["context.switchtows().getclient",{"_index":1211,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["context.switchtows().getdata().user",{"_index":1219,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AgentController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RecordsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AgentController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/RecordsController.html":{},"controllers/UsersController.html":{},"classes/WorkersPool.html":{},"coverage.html":{}}}],["controller(routes.api.agent.base",{"_index":38,"title":{},"body":{"controllers/AgentController.html":{}}}],["controller(routes.api.auth.base",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller(routes.api.records.base",{"_index":685,"title":{},"body":{"controllers/RecordsController.html":{}}}],["controller(routes.api.users.base",{"_index":1020,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AgentController.html":{},"modules/AgentModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cors",{"_index":489,"title":{},"body":{"classes/EventsGateway.html":{}}}],["coverage",{"_index":1225,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":540,"title":{},"body":{"interfaces/IPolicyHandler.html":{},"miscellaneous/enumerations.html":{}}}],["createcall",{"_index":315,"title":{},"body":{"injectables/CallsService.html":{}}}],["createcall(callpayload",{"_index":326,"title":{},"body":{"injectables/CallsService.html":{}}}],["createforuser",{"_index":386,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createforuser(user",{"_index":387,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createone",{"_index":1029,"title":{},"body":{"injectables/UsersService.html":{}}}],["createone(authpayload",{"_index":1036,"title":{},"body":{"injectables/UsersService.html":{}}}],["createrecord",{"_index":735,"title":{},"body":{"injectables/RecordsService.html":{}}}],["createrecord(payload",{"_index":744,"title":{},"body":{"injectables/RecordsService.html":{}}}],["data",{"_index":1429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data.format.duration",{"_index":1431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["database_dialect",{"_index":1448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_host",{"_index":1447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_name",{"_index":1449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_password",{"_index":1445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_port",{"_index":1446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database_user",{"_index":1444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datatype",{"_index":282,"title":{},"body":{"classes/Call.html":{},"classes/Record.html":{},"classes/Transcription.html":{}}}],["datatype.array(datatype.string",{"_index":292,"title":{},"body":{"classes/Call.html":{}}}],["datatype.decimal",{"_index":658,"title":{},"body":{"classes/Record.html":{},"classes/Transcription.html":{}}}],["date.now",{"_index":300,"title":{},"body":{"classes/Call.html":{}}}],["db_variables",{"_index":94,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["decoded",{"_index":1214,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["decorators",{"_index":13,"title":{},"body":{"controllers/AgentController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Call.html":{},"classes/EventsGateway.html":{},"classes/Record.html":{},"controllers/RecordsController.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{}}}],["deep",{"_index":1306,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["default",{"_index":763,"title":{},"body":{"injectables/RecordsService.html":{},"classes/WorkersPool.html":{},"miscellaneous/variables.html":{}}}],["defaultvalue",{"_index":291,"title":{},"body":{"classes/Call.html":{},"classes/User-1.html":{}}}],["defined",{"_index":16,"title":{},"body":{"controllers/AgentController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/EventsGateway.html":{},"interfaces/IPolicyHandler.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"classes/Record.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{}}}],["delete",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IPolicyHandler.html":{},"injectables/RecordsService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["deletepassword",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["deletepassword(user",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":58,"title":{"dependencies.html":{}},"body":{"modules/AgentModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CallsModule.html":{},"modules/CaslModule.html":{},"modules/EventsModule.html":{},"modules/InitModule.html":{},"modules/RecordsModule.html":{},"modules/SRModule.html":{},"modules/UsersModule.html":{},"modules/WebRTCModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":1333,"title":{},"body":{"index.html":{},"properties.html":{}}}],["detectsubjecttype",{"_index":407,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["development",{"_index":1341,"title":{},"body":{"index.html":{}}}],["dialect",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":1226,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":1201,"title":{},"body":{"classes/WorkersPool.html":{}}}],["duration",{"_index":630,"title":{},"body":{"classes/Record.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{}}}],["durationfilter",{"_index":1389,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["e",{"_index":868,"title":{},"body":{"injectables/RecordsService.html":{}}}],["e2e",{"_index":1349,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1330,"title":{},"body":{"index.html":{}}}],["email",{"_index":977,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{}}}],["emit(event_types.call.change",{"_index":1115,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["emit(event_types.signaling.answer",{"_index":1133,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["emit(event_types.signaling.cancel",{"_index":1138,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["emit(event_types.signaling.ended",{"_index":1146,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["emit(event_types.signaling.failed",{"_index":1121,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["emit(event_types.signaling.new_ice",{"_index":1149,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["emit(event_types.signaling.offer",{"_index":1122,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["emit(event_types.signaling.reject",{"_index":1140,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["emit(event_types.signaling.time_exceed",{"_index":1114,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["emittedtoken",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/typealiases.html":{}}}],["emittoken",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["emittoken(user",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["end",{"_index":921,"title":{},"body":{"injectables/RecordsService.html":{},"classes/Transcription.html":{},"miscellaneous/variables.html":{}}}],["endcall",{"_index":422,"title":{},"body":{"classes/EventsGateway.html":{}}}],["endcall(payload",{"_index":445,"title":{},"body":{"classes/EventsGateway.html":{}}}],["ended",{"_index":1315,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["endtimestamp",{"_index":1468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum",{"_index":538,"title":{},"body":{"interfaces/IPolicyHandler.html":{},"classes/User.html":{}}}],["enumerations",{"_index":1298,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":1222,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["err.message",{"_index":1224,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["event_types",{"_index":481,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/WebRTCService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["events.gateway",{"_index":528,"title":{},"body":{"modules/EventsModule.html":{}}}],["eventsgateway",{"_index":416,"title":{"classes/EventsGateway.html":{}},"body":{"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"injectables/WebRTCService.html":{},"coverage.html":{},"overview.html":{}}}],["eventsmodule",{"_index":518,"title":{"modules/EventsModule.html":{}},"body":{"modules/EventsModule.html":{},"modules/WebRTCModule.html":{},"modules.html":{},"overview.html":{}}}],["execpolicyhandler",{"_index":612,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execpolicyhandler(handler",{"_index":615,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["executioncontext",{"_index":576,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"guards/WsJwtGuard.html":{}}}],["existingcall",{"_index":1128,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["existingcall.callee",{"_index":1142,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["existingcall.calleeid",{"_index":1147,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["existingcall.caller].find",{"_index":1143,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["existingcall.callerid",{"_index":1148,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["existingcall.id",{"_index":1131,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["existssync",{"_index":790,"title":{},"body":{"injectables/RecordsService.html":{}}}],["existssync(calleepath",{"_index":881,"title":{},"body":{"injectables/RecordsService.html":{}}}],["existssync(callerpath",{"_index":880,"title":{},"body":{"injectables/RecordsService.html":{}}}],["existssync(mergedpath",{"_index":882,"title":{},"body":{"injectables/RecordsService.html":{}}}],["expiresin",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":39,"title":{},"body":{"controllers/AgentController.html":{},"modules/AgentModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"modules/CallsModule.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"interfaces/IPolicyHandler.html":{},"modules/InitModule.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"classes/Record.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"modules/SRModule.html":{},"injectables/SRService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebRTCModule.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{}}}],["exports",{"_index":70,"title":{},"body":{"modules/AgentModule.html":{},"modules/AuthModule.html":{},"modules/CallsModule.html":{},"modules/CaslModule.html":{},"modules/EventsModule.html":{},"modules/InitModule.html":{},"modules/RecordsModule.html":{},"modules/SRModule.html":{},"modules/UsersModule.html":{},"modules/WebRTCModule.html":{}}}],["express",{"_index":1270,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":237,"title":{},"body":{"classes/Call.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/Record.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User-1.html":{}}}],["extension",{"_index":775,"title":{},"body":{"injectables/RecordsService.html":{}}}],["extension(payload.format",{"_index":840,"title":{},"body":{"injectables/RecordsService.html":{}}}],["extractjwt",{"_index":598,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":604,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractsubjecttype",{"_index":392,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["failed",{"_index":1316,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["failedcall",{"_index":423,"title":{},"body":{"classes/EventsGateway.html":{}}}],["failedcall(payload",{"_index":448,"title":{},"body":{"classes/EventsGateway.html":{}}}],["failedtimestamp",{"_index":1470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"classes/WorkersPool.html":{}}}],["favourite_teacher",{"_index":568,"title":{},"body":{"injectables/InitService.html":{}}}],["ffmpeg",{"_index":769,"title":{},"body":{"injectables/RecordsService.html":{},"dependencies.html":{}}}],["ffmpeg(readable.from(buffer.from(new",{"_index":850,"title":{},"body":{"injectables/RecordsService.html":{}}}],["ffmpeg.ffprobe(src",{"_index":1428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AgentController.html":{},"modules/AgentModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"modules/CallsModule.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"interfaces/IPolicyHandler.html":{},"modules/InitModule.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"classes/Record.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"modules/SRModule.html":{},"injectables/SRService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebRTCModule.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["files",{"_index":1420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filter",{"_index":886,"title":{},"body":{"injectables/RecordsService.html":{}}}],["filter((name",{"_index":1422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filteredrecords",{"_index":679,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"miscellaneous/typealiases.html":{}}}],["filterhobj",{"_index":1061,"title":{},"body":{"injectables/UsersService.html":{}}}],["findactivecallbycallee",{"_index":316,"title":{},"body":{"injectables/CallsService.html":{}}}],["findactivecallbycallee(calleewebrtcnumber",{"_index":330,"title":{},"body":{"injectables/CallsService.html":{}}}],["findactivecallbysides",{"_index":317,"title":{},"body":{"injectables/CallsService.html":{}}}],["findactivecallbysides(callerwebrtcnumber",{"_index":332,"title":{},"body":{"injectables/CallsService.html":{}}}],["findbyfilters",{"_index":736,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/UsersService.html":{}}}],["findbyfilters(payload",{"_index":746,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/UsersService.html":{}}}],["findbynameandemail",{"_index":1030,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbynameandemail(username",{"_index":1039,"title":{},"body":{"injectables/UsersService.html":{}}}],["findcallbyid",{"_index":318,"title":{},"body":{"injectables/CallsService.html":{}}}],["findcallbyid(id",{"_index":334,"title":{},"body":{"injectables/CallsService.html":{}}}],["findone",{"_index":1031,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(id",{"_index":1041,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebywebrtcnumber",{"_index":1032,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebywebrtcnumber(webrtcnumber",{"_index":1043,"title":{},"body":{"injectables/UsersService.html":{}}}],["findrecordbyid",{"_index":737,"title":{},"body":{"injectables/RecordsService.html":{}}}],["findrecordbyid(id",{"_index":750,"title":{},"body":{"injectables/RecordsService.html":{}}}],["finduserspayload",{"_index":994,"title":{},"body":{"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["first_pet",{"_index":567,"title":{},"body":{"injectables/InitService.html":{}}}],["fluent",{"_index":770,"title":{},"body":{"injectables/RecordsService.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["fn",{"_index":858,"title":{},"body":{"injectables/RecordsService.html":{}}}],["fn.format(target_ext",{"_index":863,"title":{},"body":{"injectables/RecordsService.html":{}}}],["fn.input(path.resolve(recordpath",{"_index":860,"title":{},"body":{"injectables/RecordsService.html":{}}}],["foreignkey",{"_index":283,"title":{},"body":{"classes/Call.html":{},"classes/Record.html":{},"classes/Transcription.html":{},"classes/User-1.html":{}}}],["foreignkey(undefined)@column",{"_index":254,"title":{},"body":{"classes/Call.html":{},"classes/Record.html":{},"classes/Transcription.html":{},"classes/User-1.html":{}}}],["fork",{"_index":1171,"title":{},"body":{"classes/WorkersPool.html":{}}}],["fork(pooloptions.processpath",{"_index":1181,"title":{},"body":{"classes/WorkersPool.html":{}}}],["format",{"_index":839,"title":{},"body":{"injectables/RecordsService.html":{}}}],["forwardref",{"_index":469,"title":{},"body":{"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"modules/WebRTCModule.html":{},"injectables/WebRTCService.html":{}}}],["framework",{"_index":1328,"title":{},"body":{"index.html":{}}}],["freeworker",{"_index":1190,"title":{},"body":{"classes/WorkersPool.html":{}}}],["freeworker.isfree",{"_index":1196,"title":{},"body":{"classes/WorkersPool.html":{}}}],["freeworker.worker.addlistener('message",{"_index":1204,"title":{},"body":{"classes/WorkersPool.html":{}}}],["freeworker.worker.pid",{"_index":1202,"title":{},"body":{"classes/WorkersPool.html":{}}}],["freeworker.worker.removelistener('message",{"_index":1203,"title":{},"body":{"classes/WorkersPool.html":{}}}],["freeworker.worker.send(availabletask",{"_index":1197,"title":{},"body":{"classes/WorkersPool.html":{}}}],["fs",{"_index":677,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/RecordsService.html":{}}}],["fs.readfile(record.srcmerged",{"_index":708,"title":{},"body":{"controllers/RecordsController.html":{}}}],["full",{"_index":1415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":626,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":1322,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(routes.api.auth.verify",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(undefined.verify",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["getcallsidechunknames",{"_index":782,"title":{},"body":{"injectables/RecordsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcallsidechunknames(recordpath",{"_index":842,"title":{},"body":{"injectables/RecordsService.html":{}}}],["getduration",{"_index":783,"title":{},"body":{"injectables/RecordsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getduration(mergedpath",{"_index":893,"title":{},"body":{"injectables/RecordsService.html":{}}}],["getexistingrecord",{"_index":738,"title":{},"body":{"injectables/RecordsService.html":{}}}],["getexistingrecord(callid",{"_index":754,"title":{},"body":{"injectables/RecordsService.html":{}}}],["gethello",{"_index":73,"title":{},"body":{"controllers/AppController.html":{}}}],["getrecords",{"_index":661,"title":{},"body":{"controllers/RecordsController.html":{}}}],["getrecords(body",{"_index":664,"title":{},"body":{"controllers/RecordsController.html":{}}}],["getrecordsrc",{"_index":662,"title":{},"body":{"controllers/RecordsController.html":{}}}],["getrecordsrc(@body",{"_index":704,"title":{},"body":{"controllers/RecordsController.html":{}}}],["getrecordsrc(body",{"_index":668,"title":{},"body":{"controllers/RecordsController.html":{}}}],["getting",{"_index":1324,"title":{"index.html":{}},"body":{}}],["gettranscriptionsrc",{"_index":663,"title":{},"body":{"controllers/RecordsController.html":{}}}],["gettranscriptionsrc(body",{"_index":672,"title":{},"body":{"controllers/RecordsController.html":{}}}],["getusers",{"_index":1016,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(@body",{"_index":1021,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(body",{"_index":1017,"title":{},"body":{"controllers/UsersController.html":{}}}],["grow",{"_index":1356,"title":{},"body":{"index.html":{}}}],["guard",{"_index":608,"title":{"guards/PoliciesGuard.html":{},"guards/WsJwtGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":610,"title":{},"body":{"guards/PoliciesGuard.html":{},"guards/WsJwtGuard.html":{},"overview.html":{}}}],["handle",{"_index":533,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["handle(ability",{"_index":534,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["handleanswer",{"_index":1087,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["handleanswer(payload",{"_index":1095,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["handleendcall",{"_index":1088,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["handleendcall(payload",{"_index":1097,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["handlenewice",{"_index":1089,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["handlenewice(payload",{"_index":1099,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["handleoffer",{"_index":1090,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["handleoffer(payload",{"_index":1101,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["handler",{"_index":617,"title":{},"body":{"guards/PoliciesGuard.html":{},"classes/WorkersPool.html":{}}}],["handler(ability",{"_index":627,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler.handle(ability",{"_index":628,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handlers",{"_index":1435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handlewebrtcnewice",{"_index":424,"title":{},"body":{"classes/EventsGateway.html":{}}}],["handlewebrtcnewice(payload",{"_index":451,"title":{},"body":{"classes/EventsGateway.html":{}}}],["hasmany",{"_index":656,"title":{},"body":{"classes/Record.html":{},"classes/Secret.html":{},"classes/User-1.html":{}}}],["hasmany(undefined",{"_index":647,"title":{},"body":{"classes/Record.html":{},"classes/Secret.html":{},"classes/User-1.html":{}}}],["hasone",{"_index":284,"title":{},"body":{"classes/Call.html":{}}}],["hasone(undefined",{"_index":264,"title":{},"body":{"classes/Call.html":{}}}],["helpers",{"_index":684,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"guards/WsJwtGuard.html":{}}}],["helpers/.../coloredconsole.ts",{"_index":1402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["helpers/coloredconsole",{"_index":484,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/RecordsService.html":{}}}],["helpers/coloredconsole.ts",{"_index":1229,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["here",{"_index":1366,"title":{},"body":{"index.html":{}}}],["host",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["hstore",{"_index":1285,"title":{},"body":{"dependencies.html":{}}}],["httpexception",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["https://nestjs.com",{"_index":1373,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{}}}],["httpstatus.unauthorized",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"guards/WsJwtGuard.html":{}}}],["httpstatus.unprocessable_entity",{"_index":1067,"title":{},"body":{"injectables/UsersService.html":{}}}],["icecandidate",{"_index":1150,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["id",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"classes/Call.html":{},"injectables/CallsService.html":{},"classes/Record.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":1227,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":605,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":351,"title":{},"body":{"injectables/CallsService.html":{},"guards/PoliciesGuard.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{}}}],["import",{"_index":25,"title":{},"body":{"controllers/AgentController.html":{},"modules/AgentModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"modules/CallsModule.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"interfaces/IPolicyHandler.html":{},"modules/InitModule.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"classes/Record.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"modules/SRModule.html":{},"injectables/SRService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebRTCModule.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{}}}],["imports",{"_index":66,"title":{},"body":{"modules/AgentModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CallsModule.html":{},"modules/CaslModule.html":{},"modules/EventsModule.html":{},"modules/InitModule.html":{},"modules/RecordsModule.html":{},"modules/SRModule.html":{},"modules/UsersModule.html":{},"modules/WebRTCModule.html":{}}}],["include",{"_index":358,"title":{},"body":{"injectables/CallsService.html":{},"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["includemode",{"_index":748,"title":{},"body":{"injectables/RecordsService.html":{}}}],["includers",{"_index":794,"title":{},"body":{"injectables/RecordsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["includers(includemode",{"_index":810,"title":{},"body":{"injectables/RecordsService.html":{}}}],["includers(mode",{"_index":803,"title":{},"body":{"injectables/RecordsService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AgentController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/EventsGateway.html":{},"interfaces/IPolicyHandler.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"classes/Record.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["individualhooks",{"_index":356,"title":{},"body":{"injectables/CallsService.html":{}}}],["infersubjects",{"_index":537,"title":{},"body":{"interfaces/IPolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AgentController.html":{},"modules/AgentModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"modules/CallsModule.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"interfaces/IPolicyHandler.html":{},"modules/InitModule.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"classes/Record.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"modules/SRModule.html":{},"injectables/SRService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebRTCModule.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{}}}],["inisocket",{"_index":425,"title":{},"body":{"classes/EventsGateway.html":{}}}],["inisocket(@messagebody",{"_index":508,"title":{},"body":{"classes/EventsGateway.html":{}}}],["inisocket(payload",{"_index":454,"title":{},"body":{"classes/EventsGateway.html":{}}}],["init",{"_index":554,"title":{},"body":{"injectables/InitService.html":{},"miscellaneous/variables.html":{}}}],["init.service",{"_index":551,"title":{},"body":{"modules/InitModule.html":{}}}],["init/init.module",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["init/init.service",{"_index":130,"title":{},"body":{"injectables/AppService.html":{}}}],["initcall",{"_index":426,"title":{},"body":{"classes/EventsGateway.html":{}}}],["initcall(payload",{"_index":457,"title":{},"body":{"classes/EventsGateway.html":{}}}],["initmodule",{"_index":84,"title":{"modules/InitModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InitModule.html":{},"modules.html":{},"overview.html":{}}}],["initservice",{"_index":128,"title":{"injectables/InitService.html":{}},"body":{"injectables/AppService.html":{},"modules/InitModule.html":{},"injectables/InitService.html":{},"coverage.html":{},"overview.html":{}}}],["inject",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/EventsGateway.html":{},"injectables/WebRTCService.html":{},"miscellaneous/variables.html":{}}}],["inject(forwardref",{"_index":493,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/WebRTCService.html":{}}}],["injectable",{"_index":123,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["injectables",{"_index":124,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"overview.html":{}}}],["injectmodel",{"_index":339,"title":{},"body":{"injectables/CallsService.html":{},"injectables/InitService.html":{},"injectables/RecordsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(callmodel",{"_index":352,"title":{},"body":{"injectables/CallsService.html":{}}}],["injectmodel(recordmodel",{"_index":799,"title":{},"body":{"injectables/RecordsService.html":{}}}],["injectmodel(secretmodel",{"_index":559,"title":{},"body":{"injectables/InitService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(transcriptionmodel",{"_index":800,"title":{},"body":{"injectables/RecordsService.html":{}}}],["injectmodel(usermodel",{"_index":558,"title":{},"body":{"injectables/InitService.html":{},"injectables/UsersService.html":{}}}],["input(calleepath",{"_index":884,"title":{},"body":{"injectables/RecordsService.html":{}}}],["input(callerpath",{"_index":883,"title":{},"body":{"injectables/RecordsService.html":{}}}],["inputs",{"_index":889,"title":{},"body":{"injectables/RecordsService.html":{}}}],["installation",{"_index":1337,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1339,"title":{},"body":{"index.html":{}}}],["instance",{"_index":276,"title":{},"body":{"classes/Call.html":{}}}],["instance._previousdatavalues.status",{"_index":294,"title":{},"body":{"classes/Call.html":{}}}],["instance._previousdatavalues.statussequence",{"_index":296,"title":{},"body":{"classes/Call.html":{}}}],["instance._previousdatavalues.statustimestampssequence",{"_index":299,"title":{},"body":{"classes/Call.html":{}}}],["instance.datavalues.status",{"_index":293,"title":{},"body":{"classes/Call.html":{}}}],["instance.datavalues.statussequence",{"_index":295,"title":{},"body":{"classes/Call.html":{}}}],["instance.datavalues.statustimestampssequence",{"_index":298,"title":{},"body":{"classes/Call.html":{}}}],["instance.status",{"_index":297,"title":{},"body":{"classes/Call.html":{}}}],["interface",{"_index":529,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"interfaces/IPolicyHandler.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":531,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["ipolicyhandler",{"_index":530,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"interfaces/IPolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["is_public_key",{"_index":581,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isemail",{"_index":1011,"title":{},"body":{"classes/User-1.html":{}}}],["isemail()@column",{"_index":999,"title":{},"body":{"classes/User-1.html":{}}}],["isequal",{"_index":277,"title":{},"body":{"classes/Call.html":{}}}],["isexist",{"_index":1063,"title":{},"body":{"injectables/UsersService.html":{}}}],["isfree",{"_index":1186,"title":{},"body":{"classes/WorkersPool.html":{}}}],["isglobal",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["ispublic",{"_index":586,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/variables.html":{}}}],["isvalidpassword",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["item",{"_index":408,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["item.constructor",{"_index":409,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["join",{"_index":1363,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_expires",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":1462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_secret_name",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":569,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":603,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["jwtmoduleregistered",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtservice",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"guards/WsJwtGuard.html":{}}}],["jwtstrategy",{"_index":165,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1370,"title":{},"body":{"index.html":{}}}],["key",{"_index":1053,"title":{},"body":{"injectables/UsersService.html":{}}}],["last",{"_index":784,"title":{},"body":{"injectables/RecordsService.html":{}}}],["last(transcripts).end",{"_index":915,"title":{},"body":{"injectables/RecordsService.html":{}}}],["lastchunknumber",{"_index":843,"title":{},"body":{"injectables/RecordsService.html":{}}}],["lasttimestamp",{"_index":913,"title":{},"body":{"injectables/RecordsService.html":{}}}],["license",{"_index":1376,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1353,"title":{},"body":{"index.html":{}}}],["limit",{"_index":812,"title":{},"body":{"injectables/RecordsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["literal",{"_index":1392,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lodash",{"_index":278,"title":{},"body":{"classes/Call.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"dependencies.html":{}}}],["logging",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["login(@body",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(body",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["longest",{"_index":891,"title":{},"body":{"injectables/RecordsService.html":{}}}],["manage",{"_index":539,"title":{},"body":{"interfaces/IPolicyHandler.html":{},"miscellaneous/enumerations.html":{}}}],["matching",{"_index":54,"title":{},"body":{"controllers/AgentController.html":{},"modules/AgentModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"modules/CallsModule.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"interfaces/IPolicyHandler.html":{},"modules/InitModule.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"classes/Record.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"modules/SRModule.html":{},"injectables/SRService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebRTCModule.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mergedpath",{"_index":874,"title":{},"body":{"injectables/RecordsService.html":{}}}],["mergetofile(targetpath",{"_index":864,"title":{},"body":{"injectables/RecordsService.html":{}}}],["message",{"_index":1223,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["messagebody",{"_index":471,"title":{},"body":{"classes/EventsGateway.html":{}}}],["metadata",{"_index":1289,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AgentController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/EventsGateway.html":{},"interfaces/IPolicyHandler.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{}}}],["mime",{"_index":776,"title":{},"body":{"injectables/RecordsService.html":{},"dependencies.html":{}}}],["miscellaneous",{"_index":1297,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1352,"title":{},"body":{"index.html":{}}}],["mode",{"_index":751,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/SRService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mode)}id",{"_index":1419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model",{"_index":238,"title":{},"body":{"classes/Call.html":{},"injectables/CallsService.html":{},"classes/Record.html":{},"injectables/RecordsService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User-1.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":55,"title":{"modules/AgentModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CallsModule.html":{},"modules/CaslModule.html":{},"modules/EventsModule.html":{},"modules/InitModule.html":{},"modules/RecordsModule.html":{},"modules/SRModule.html":{},"modules/UsersModule.html":{},"modules/WebRTCModule.html":{}},"body":{"modules/AgentModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CallsModule.html":{},"modules/CaslModule.html":{},"modules/EventsModule.html":{},"modules/InitModule.html":{},"modules/RecordsModule.html":{},"modules/SRModule.html":{},"modules/UsersModule.html":{},"modules/WebRTCModule.html":{}}}],["modules",{"_index":57,"title":{"modules.html":{}},"body":{"modules/AgentModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CallsModule.html":{},"modules/CaslModule.html":{},"modules/EventsModule.html":{},"modules/InitModule.html":{},"modules/RecordsModule.html":{},"modules/SRModule.html":{},"modules/UsersModule.html":{},"modules/WebRTCModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1365,"title":{},"body":{"index.html":{}}}],["mother",{"_index":566,"title":{},"body":{"injectables/InitService.html":{}}}],["mp3",{"_index":1441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["myśliwiec",{"_index":1371,"title":{},"body":{"index.html":{}}}],["name",{"_index":19,"title":{},"body":{"controllers/AgentController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/EventsGateway.html":{},"interfaces/IPolicyHandler.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"classes/Secret.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{}}}],["nanoid",{"_index":787,"title":{},"body":{"injectables/RecordsService.html":{},"dependencies.html":{}}}],["nest",{"_index":1334,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1375,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":28,"title":{},"body":{"controllers/AgentController.html":{},"modules/AgentModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CallsModule.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"modules/InitModule.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"modules/SRModule.html":{},"injectables/SRService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebRTCModule.html":{},"injectables/WebRTCService.html":{},"guards/WsJwtGuard.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":582,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/WsJwtGuard.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1269,"title":{},"body":{"dependencies.html":{}}}],["nestjs/sequelize",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/CallsModule.html":{},"injectables/CallsService.html":{},"modules/InitModule.html":{},"injectables/InitService.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":345,"title":{},"body":{"injectables/CallsService.html":{},"classes/EventsGateway.html":{},"injectables/RecordsService.html":{},"guards/WsJwtGuard.html":{},"dependencies.html":{}}}],["new",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"injectables/UsersService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["new_ice",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new_ice_candidate",{"_index":1456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["newicecandidate",{"_index":478,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/WebRTCService.html":{},"miscellaneous/typealiases.html":{}}}],["node",{"_index":779,"title":{},"body":{"injectables/RecordsService.html":{},"dependencies.html":{}}}],["node.js",{"_index":1327,"title":{},"body":{"index.html":{}}}],["npm",{"_index":1338,"title":{},"body":{"index.html":{}}}],["null",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CallsService.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{}}}],["number",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"classes/Call.html":{},"injectables/CallsService.html":{},"classes/Record.html":{},"injectables/RecordsService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"miscellaneous/variables.html":{}}}],["number(inx",{"_index":922,"title":{},"body":{"injectables/RecordsService.html":{}}}],["number(lasttimestamp",{"_index":919,"title":{},"body":{"injectables/RecordsService.html":{}}}],["number(payload.limit",{"_index":814,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/UsersService.html":{}}}],["number(payload.page",{"_index":817,"title":{},"body":{"injectables/RecordsService.html":{}}}],["number(unit.start",{"_index":920,"title":{},"body":{"injectables/RecordsService.html":{}}}],["object",{"_index":1407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["offer",{"_index":1123,"title":{},"body":{"injectables/WebRTCService.html":{},"miscellaneous/variables.html":{}}}],["offerpayload",{"_index":479,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/WebRTCService.html":{},"miscellaneous/typealiases.html":{}}}],["offline",{"_index":992,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["offset",{"_index":815,"title":{},"body":{"injectables/RecordsService.html":{}}}],["ok",{"_index":1320,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["omit",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/typealiases.html":{}}}],["on('end",{"_index":865,"title":{},"body":{"injectables/RecordsService.html":{}}}],["on('error",{"_index":867,"title":{},"body":{"injectables/RecordsService.html":{}}}],["online",{"_index":991,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["op",{"_index":343,"title":{},"body":{"injectables/CallsService.html":{},"injectables/RecordsService.html":{},"injectables/UsersService.html":{}}}],["op.and",{"_index":360,"title":{},"body":{"injectables/CallsService.html":{}}}],["op.between",{"_index":806,"title":{},"body":{"injectables/RecordsService.html":{}}}],["op.in",{"_index":348,"title":{},"body":{"injectables/CallsService.html":{},"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["op.not",{"_index":1050,"title":{},"body":{"injectables/UsersService.html":{}}}],["op.or",{"_index":1062,"title":{},"body":{"injectables/UsersService.html":{}}}],["open",{"_index":1354,"title":{},"body":{"index.html":{}}}],["optional",{"_index":21,"title":{},"body":{"controllers/AgentController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/EventsGateway.html":{},"interfaces/IPolicyHandler.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{}}}],["options",{"_index":888,"title":{},"body":{"injectables/RecordsService.html":{}}}],["origin",{"_index":490,"title":{},"body":{"classes/EventsGateway.html":{}}}],["otherside",{"_index":1141,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["out",{"_index":64,"title":{},"body":{"modules/AgentModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CallsModule.html":{},"modules/CaslModule.html":{},"modules/EventsModule.html":{},"modules/InitModule.html":{},"modules/RecordsModule.html":{},"modules/SRModule.html":{},"modules/UsersModule.html":{},"modules/WebRTCModule.html":{},"overview.html":{}}}],["overview",{"_index":1380,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1263,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":18,"title":{},"body":{"controllers/AgentController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/EventsGateway.html":{},"interfaces/IPolicyHandler.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{}}}],["parseint(a",{"_index":1426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(b",{"_index":1427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parseint(last(sidechunks",{"_index":845,"title":{},"body":{"injectables/RecordsService.html":{}}}],["passport",{"_index":600,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":601,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":602,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["passwordhash",{"_index":978,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{}}}],["path",{"_index":768,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/SRService.html":{}}}],["path.resolve",{"_index":848,"title":{},"body":{"injectables/RecordsService.html":{}}}],["path.resolve('recordsstorage",{"_index":1440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path.resolve(recordpath",{"_index":875,"title":{},"body":{"injectables/RecordsService.html":{}}}],["path.resolve(records_file_path",{"_index":826,"title":{},"body":{"injectables/RecordsService.html":{}}}],["payload",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CallsService.html":{},"classes/EventsGateway.html":{},"injectables/JwtStrategy.html":{},"injectables/RecordsService.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{}}}],["payload.answer",{"_index":1135,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["payload.calleeslist",{"_index":805,"title":{},"body":{"injectables/RecordsService.html":{}}}],["payload.callerslist",{"_index":804,"title":{},"body":{"injectables/RecordsService.html":{}}}],["payload.callid",{"_index":837,"title":{},"body":{"injectables/RecordsService.html":{}}}],["payload.callnumber",{"_index":1117,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["payload.duration.from",{"_index":807,"title":{},"body":{"injectables/RecordsService.html":{}}}],["payload.duration.to",{"_index":808,"title":{},"body":{"injectables/RecordsService.html":{}}}],["payload.icecandidate",{"_index":1151,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["payload.id",{"_index":382,"title":{},"body":{"injectables/CallsService.html":{}}}],["payload.limit",{"_index":813,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/UsersService.html":{}}}],["payload.offer",{"_index":1124,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["payload.page",{"_index":816,"title":{},"body":{"injectables/RecordsService.html":{}}}],["payload.status",{"_index":381,"title":{},"body":{"injectables/CallsService.html":{},"injectables/RecordsService.html":{}}}],["payload.user.id",{"_index":838,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/WebRTCService.html":{}}}],["payload.user.username",{"_index":510,"title":{},"body":{"classes/EventsGateway.html":{}}}],["payload.user.webrtcnumber",{"_index":1118,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["payload.username",{"_index":1054,"title":{},"body":{"injectables/UsersService.html":{}}}],["payload.username.tolowercase",{"_index":1059,"title":{},"body":{"injectables/UsersService.html":{}}}],["pg",{"_index":1283,"title":{},"body":{"dependencies.html":{}}}],["pick",{"_index":676,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/WebRTCService.html":{}}}],["pick(call",{"_index":1127,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["pick(call.callee",{"_index":1125,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["pick(call.caller",{"_index":1126,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["pick(record",{"_index":692,"title":{},"body":{"controllers/RecordsController.html":{}}}],["pick(val",{"_index":1433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["picktranscriptfields",{"_index":683,"title":{},"body":{"controllers/RecordsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["plantask",{"_index":1155,"title":{},"body":{"classes/WorkersPool.html":{}}}],["plantask(task",{"_index":1167,"title":{},"body":{"classes/WorkersPool.html":{}}}],["please",{"_index":1364,"title":{},"body":{"index.html":{}}}],["policiesguard",{"_index":609,"title":{"guards/PoliciesGuard.html":{}},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{}}}],["policyhandler",{"_index":544,"title":{},"body":{"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["policyhandlercallback",{"_index":543,"title":{},"body":{"interfaces/IPolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["policyhandlers",{"_index":621,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["policyhandlers.every((handler",{"_index":624,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["pool",{"_index":1153,"title":{},"body":{"classes/WorkersPool.html":{}}}],["poollifetime",{"_index":952,"title":{},"body":{"injectables/SRService.html":{}}}],["pooloptions",{"_index":1159,"title":{},"body":{"classes/WorkersPool.html":{},"miscellaneous/typealiases.html":{}}}],["pooloptions.poollifetime",{"_index":1183,"title":{},"body":{"classes/WorkersPool.html":{}}}],["poolsize",{"_index":951,"title":{},"body":{"injectables/SRService.html":{}}}],["port",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":26,"title":{},"body":{"controllers/AgentController.html":{},"controllers/AuthController.html":{},"controllers/RecordsController.html":{},"controllers/UsersController.html":{}}}],["post(routes.api.agent.status",{"_index":42,"title":{},"body":{"controllers/AgentController.html":{}}}],["post(routes.api.auth.login",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(routes.api.auth.register",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(routes.api.records.full",{"_index":686,"title":{},"body":{"controllers/RecordsController.html":{}}}],["post(routes.api.records.src",{"_index":703,"title":{},"body":{"controllers/RecordsController.html":{}}}],["post(routes.api.records.transcription",{"_index":712,"title":{},"body":{"controllers/RecordsController.html":{}}}],["post(undefined.full",{"_index":666,"title":{},"body":{"controllers/RecordsController.html":{}}}],["post(undefined.src",{"_index":670,"title":{},"body":{"controllers/RecordsController.html":{}}}],["post(undefined.status",{"_index":15,"title":{},"body":{"controllers/AgentController.html":{}}}],["post(undefined.transcription",{"_index":674,"title":{},"body":{"controllers/RecordsController.html":{}}}],["primarykey",{"_index":290,"title":{},"body":{"classes/Call.html":{},"classes/Record.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User-1.html":{}}}],["private",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CallsService.html":{},"classes/EventsGateway.html":{},"injectables/InitService.html":{},"guards/PoliciesGuard.html":{},"injectables/RecordsService.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{}}}],["process_total_offset",{"_index":772,"title":{},"body":{"injectables/RecordsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["processpath",{"_index":953,"title":{},"body":{"injectables/SRService.html":{}}}],["production",{"_index":1345,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1326,"title":{},"body":{"index.html":{}}}],["project",{"_index":1355,"title":{},"body":{"index.html":{}}}],["promise",{"_index":24,"title":{},"body":{"controllers/AgentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CallsService.html":{},"classes/EventsGateway.html":{},"guards/PoliciesGuard.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/variables.html":{}}}],["promise((resolve",{"_index":707,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"miscellaneous/variables.html":{}}}],["promisedfs",{"_index":792,"title":{},"body":{"injectables/RecordsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["promisedfs.mkdir(srcdirpath",{"_index":828,"title":{},"body":{"injectables/RecordsService.html":{}}}],["promisedfs.readdir(recordpath",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promisedfs.writefile(targetpath",{"_index":857,"title":{},"body":{"injectables/RecordsService.html":{}}}],["promisify",{"_index":777,"title":{},"body":{"injectables/RecordsService.html":{},"dependencies.html":{}}}],["promisify('fs",{"_index":793,"title":{},"body":{"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["properties",{"_index":239,"title":{"properties.html":{}},"body":{"classes/Call.html":{},"classes/EventsGateway.html":{},"classes/Record.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User.html":{},"classes/User-1.html":{},"classes/WorkersPool.html":{},"properties.html":{}}}],["providers",{"_index":69,"title":{},"body":{"modules/AgentModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CallsModule.html":{},"modules/CaslModule.html":{},"modules/EventsModule.html":{},"modules/InitModule.html":{},"modules/RecordsModule.html":{},"modules/SRModule.html":{},"modules/UsersModule.html":{},"modules/WebRTCModule.html":{}}}],["public",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public()@post(undefined.login",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post(undefined.register",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["range",{"_index":1173,"title":{},"body":{"classes/WorkersPool.html":{}}}],["range(pooloptions.poolsize",{"_index":1178,"title":{},"body":{"classes/WorkersPool.html":{}}}],["read",{"_index":541,"title":{},"body":{"interfaces/IPolicyHandler.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["readable",{"_index":788,"title":{},"body":{"injectables/RecordsService.html":{}}}],["readonly",{"_index":78,"title":{},"body":{"controllers/AppController.html":{}}}],["record",{"_index":246,"title":{"classes/Record.html":{}},"body":{"classes/Call.html":{},"classes/Record.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"classes/Transcription.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["record.id",{"_index":879,"title":{},"body":{"injectables/RecordsService.html":{}}}],["record.srcmerged",{"_index":706,"title":{},"body":{"controllers/RecordsController.html":{}}}],["record.transcriptioncallee",{"_index":716,"title":{},"body":{"controllers/RecordsController.html":{}}}],["record.transcriptioncallee.map(picktranscriptfields",{"_index":719,"title":{},"body":{"controllers/RecordsController.html":{}}}],["record.transcriptioncalleefluent",{"_index":911,"title":{},"body":{"injectables/RecordsService.html":{}}}],["record.transcriptioncaller",{"_index":717,"title":{},"body":{"controllers/RecordsController.html":{}}}],["record.transcriptioncaller.map(picktranscriptfields",{"_index":718,"title":{},"body":{"controllers/RecordsController.html":{}}}],["record.transcriptioncallerfluent",{"_index":912,"title":{},"body":{"injectables/RecordsService.html":{}}}],["record?.id",{"_index":835,"title":{},"body":{"injectables/RecordsService.html":{}}}],["record_file_prefix",{"_index":1251,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["recorderrors",{"_index":766,"title":{},"body":{"injectables/RecordsService.html":{},"miscellaneous/enumerations.html":{}}}],["recordexist",{"_index":1304,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["recordfilters",{"_index":747,"title":{},"body":{"injectables/RecordsService.html":{},"miscellaneous/typealiases.html":{}}}],["recordfilterspayload",{"_index":665,"title":{},"body":{"controllers/RecordsController.html":{},"miscellaneous/typealiases.html":{}}}],["recordfluenttrancriptionseq",{"_index":734,"title":{},"body":{"injectables/RecordsService.html":{},"miscellaneous/typealiases.html":{}}}],["recordid",{"_index":247,"title":{},"body":{"classes/Call.html":{},"injectables/CallsService.html":{},"injectables/RecordsService.html":{},"classes/Transcription.html":{}}}],["recordincluders",{"_index":680,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["recordincluders.all].includes(mode",{"_index":796,"title":{},"body":{"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["recordincluders.base",{"_index":690,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["recordincluders.deep",{"_index":715,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["recordincluders.fluent",{"_index":798,"title":{},"body":{"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["recordmodel",{"_index":729,"title":{},"body":{"modules/RecordsModule.html":{},"injectables/RecordsService.html":{}}}],["recordpath",{"_index":834,"title":{},"body":{"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["records",{"_index":687,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["records.controller",{"_index":728,"title":{},"body":{"modules/RecordsModule.html":{}}}],["records.map((record",{"_index":691,"title":{},"body":{"controllers/RecordsController.html":{}}}],["records.model",{"_index":730,"title":{},"body":{"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"classes/Transcription.html":{}}}],["records.service",{"_index":678,"title":{},"body":{"controllers/RecordsController.html":{},"modules/RecordsModule.html":{}}}],["records_file_path",{"_index":773,"title":{},"body":{"injectables/RecordsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["recordscontroller",{"_index":659,"title":{"controllers/RecordsController.html":{}},"body":{"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"coverage.html":{}}}],["recordsmodule",{"_index":525,"title":{"modules/RecordsModule.html":{}},"body":{"modules/EventsModule.html":{},"modules/RecordsModule.html":{},"modules.html":{},"overview.html":{}}}],["recordsservice",{"_index":432,"title":{"injectables/RecordsService.html":{}},"body":{"classes/EventsGateway.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"coverage.html":{},"overview.html":{}}}],["recordtype",{"_index":767,"title":{},"body":{"injectables/RecordsService.html":{},"miscellaneous/typealiases.html":{}}}],["recover_password",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":1288,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":573,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["regexp(`^\\\\d+_${buildappendersidename(side)}`).test(name",{"_index":1423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["register",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["register(@body",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(authpayload",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(body",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["registered",{"_index":511,"title":{},"body":{"classes/EventsGateway.html":{}}}],["reject",{"_index":862,"title":{},"body":{"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["rejectcall",{"_index":427,"title":{},"body":{"classes/EventsGateway.html":{}}}],["rejectcall(payload",{"_index":460,"title":{},"body":{"classes/EventsGateway.html":{}}}],["rejected",{"_index":1313,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["rejectedtimestamp",{"_index":1469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":1336,"title":{},"body":{"index.html":{}}}],["req",{"_index":27,"title":{},"body":{"controllers/AgentController.html":{}}}],["request",{"_index":22,"title":{},"body":{"controllers/AgentController.html":{}}}],["request.body",{"_index":47,"title":{},"body":{"controllers/AgentController.html":{}}}],["request.user",{"_index":49,"title":{},"body":{"controllers/AgentController.html":{}}}],["require('promisify",{"_index":778,"title":{},"body":{"injectables/RecordsService.html":{}}}],["reqwithuser",{"_index":12,"title":{},"body":{"controllers/AgentController.html":{},"miscellaneous/typealiases.html":{}}}],["res",{"_index":795,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/SRService.html":{},"miscellaneous/variables.html":{}}}],["res.push",{"_index":797,"title":{},"body":{"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["reset",{"_index":63,"title":{},"body":{"modules/AgentModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CallsModule.html":{},"modules/CaslModule.html":{},"modules/EventsModule.html":{},"modules/InitModule.html":{},"modules/RecordsModule.html":{},"modules/SRModule.html":{},"modules/UsersModule.html":{},"modules/WebRTCModule.html":{},"overview.html":{}}}],["resolve",{"_index":866,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/SRService.html":{},"miscellaneous/variables.html":{}}}],["resolve(bin",{"_index":711,"title":{},"body":{"controllers/RecordsController.html":{}}}],["resolve(isfinite(data.format.duration",{"_index":1430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["result",{"_index":900,"title":{},"body":{"injectables/RecordsService.html":{},"classes/WorkersPool.html":{}}}],["result.result",{"_index":907,"title":{},"body":{"injectables/RecordsService.html":{}}}],["results",{"_index":53,"title":{},"body":{"controllers/AgentController.html":{},"modules/AgentModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"modules/CallsModule.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"interfaces/IPolicyHandler.html":{},"modules/InitModule.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"classes/Record.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"modules/SRModule.html":{},"injectables/SRService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebRTCModule.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":50,"title":{},"body":{"controllers/AgentController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/variables.html":{}}}],["returning",{"_index":1077,"title":{},"body":{"injectables/UsersService.html":{}}}],["returns",{"_index":23,"title":{},"body":{"controllers/AgentController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/EventsGateway.html":{},"interfaces/IPolicyHandler.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{}}}],["rimraf",{"_index":1291,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{},"classes/User-1.html":{}}}],["roles",{"_index":395,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/User.html":{},"classes/User-1.html":{},"miscellaneous/enumerations.html":{}}}],["roles.admin",{"_index":400,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["roles.supervisor",{"_index":406,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["roles.user",{"_index":402,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/User-1.html":{}}}],["room_${userid",{"_index":1463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roomprefix",{"_index":1103,"title":{},"body":{"injectables/WebRTCService.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["routes",{"_index":30,"title":{},"body":{"controllers/AgentController.html":{},"controllers/AuthController.html":{},"controllers/RecordsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":1342,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1293,"title":{},"body":{"dependencies.html":{}}}],["savetofile(mergedpath",{"_index":892,"title":{},"body":{"injectables/RecordsService.html":{}}}],["scalable",{"_index":1331,"title":{},"body":{"index.html":{}}}],["scripts",{"_index":948,"title":{},"body":{"injectables/SRService.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":180,"title":{"classes/Secret.html":{}},"body":{"modules/AuthModule.html":{},"modules/InitModule.html":{},"injectables/InitService.html":{},"classes/Secret.html":{},"classes/User.html":{},"classes/User-1.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["secretanswer",{"_index":979,"title":{},"body":{"classes/User.html":{},"classes/User-1.html":{}}}],["secretid",{"_index":997,"title":{},"body":{"classes/User-1.html":{}}}],["secretmodel",{"_index":549,"title":{},"body":{"modules/InitModule.html":{},"injectables/InitService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["secretorkey",{"_index":606,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secrets.model",{"_index":1012,"title":{},"body":{"classes/User-1.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["secretscount",{"_index":563,"title":{},"body":{"injectables/InitService.html":{}}}],["sequelize",{"_index":286,"title":{},"body":{"classes/Call.html":{},"injectables/CallsService.html":{},"injectables/InitService.html":{},"classes/Record.html":{},"injectables/RecordsService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["sequelize/core",{"_index":1271,"title":{},"body":{"dependencies.html":{}}}],["sequelize/types",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["sequelize/types/utils",{"_index":791,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/UsersService.html":{}}}],["sequelizemodule",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/CallsModule.html":{},"modules/InitModule.html":{},"modules/RecordsModule.html":{},"modules/UsersModule.html":{}}}],["sequelizemodule.forfeature([callmodel",{"_index":311,"title":{},"body":{"modules/CallsModule.html":{}}}],["sequelizemodule.forfeature([recordmodel",{"_index":732,"title":{},"body":{"modules/RecordsModule.html":{}}}],["sequelizemodule.forfeature([usermodel",{"_index":552,"title":{},"body":{"modules/InitModule.html":{},"modules/UsersModule.html":{}}}],["sequelizemodule.forrootasync",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["server",{"_index":418,"title":{},"body":{"classes/EventsGateway.html":{},"index.html":{}}}],["setmetadata",{"_index":580,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["setmetadata(check_policies_key",{"_index":1436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":583,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["settimeout(async",{"_index":1108,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["settimeout(resolve",{"_index":854,"title":{},"body":{"injectables/RecordsService.html":{}}}],["shutdown",{"_index":1156,"title":{},"body":{"classes/WorkersPool.html":{}}}],["side",{"_index":759,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/WebRTCService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["side.id",{"_index":1144,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["sidechunks",{"_index":841,"title":{},"body":{"injectables/RecordsService.html":{}}}],["sidechunks.foreach((chunk",{"_index":859,"title":{},"body":{"injectables/RecordsService.html":{}}}],["sidechunks.length",{"_index":844,"title":{},"body":{"injectables/RecordsService.html":{}}}],["signal",{"_index":1184,"title":{},"body":{"classes/WorkersPool.html":{}}}],["signaling",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signaling_answer",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signaling_offer",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signalstatus",{"_index":1301,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["signalstatusresponse",{"_index":1390,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["signoptions",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["socket",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{},"classes/EventsGateway.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["socket.io",{"_index":474,"title":{},"body":{"classes/EventsGateway.html":{},"guards/WsJwtGuard.html":{},"dependencies.html":{}}}],["solyarisoftware/voskjs",{"_index":1274,"title":{},"body":{"dependencies.html":{}}}],["sort((a",{"_index":1424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AgentController.html":{},"modules/AgentModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"modules/CallsModule.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"modules/CaslModule.html":{},"classes/EventsGateway.html":{},"modules/EventsModule.html":{},"interfaces/IPolicyHandler.html":{},"modules/InitModule.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"classes/Record.html":{},"controllers/RecordsController.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"modules/SRModule.html":{},"injectables/SRService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WebRTCModule.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{},"index.html":{}}}],["speechrecognition",{"_index":947,"title":{},"body":{"injectables/SRService.html":{},"miscellaneous/variables.html":{}}}],["speechtotext",{"_index":935,"title":{},"body":{"injectables/SRService.html":{}}}],["speechtotext(src",{"_index":937,"title":{},"body":{"injectables/SRService.html":{}}}],["speechtotext.process.js",{"_index":949,"title":{},"body":{"injectables/SRService.html":{},"miscellaneous/variables.html":{}}}],["sponsors",{"_index":1358,"title":{},"body":{"index.html":{}}}],["sr.service",{"_index":932,"title":{},"body":{"modules/SRModule.html":{}}}],["sr_pool_lifetime",{"_index":941,"title":{},"body":{"injectables/SRService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sr_pool_number",{"_index":942,"title":{},"body":{"injectables/SRService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src",{"_index":761,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/SRService.html":{},"miscellaneous/variables.html":{}}}],["src${side",{"_index":1416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.module.ts",{"_index":1404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../calls.service.ts",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../casl.decorator.ts",{"_index":1401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../helpers.ts",{"_index":1400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../jwt",{"_index":1405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1323,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../records.service.ts",{"_index":1403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../routes.constants.ts",{"_index":1398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../sr.service.ts",{"_index":1406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":1299,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/agent/agent.controller.ts",{"_index":6,"title":{},"body":{"controllers/AgentController.html":{},"coverage.html":{}}}],["src/agent/agent.controller.ts:14",{"_index":17,"title":{},"body":{"controllers/AgentController.html":{}}}],["src/agent/agent.module.ts",{"_index":65,"title":{},"body":{"modules/AgentModule.html":{}}}],["src/agent/types",{"_index":1048,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/agent/types.ts",{"_index":1394,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.controller.ts",{"_index":72,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":74,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":125,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":129,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:13",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:26",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":523,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/auth/auth.module.ts",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.service.ts",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:37",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:43",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:48",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:9",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants",{"_index":618,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["src/auth/constants.ts",{"_index":1236,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/helpers",{"_index":1104,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["src/auth/helpers.ts",{"_index":1237,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt",{"_index":475,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/JwtAuthGuard.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":591,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:10",{"_index":594,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:19",{"_index":596,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/types",{"_index":29,"title":{},"body":{"controllers/AgentController.html":{},"classes/EventsGateway.html":{},"injectables/RecordsService.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{}}}],["src/auth/types.ts",{"_index":1393,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/calls/calls.model",{"_index":394,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"classes/Record.html":{},"injectables/RecordsService.html":{},"classes/User-1.html":{}}}],["src/calls/calls.model.ts",{"_index":236,"title":{},"body":{"classes/Call.html":{},"coverage.html":{}}}],["src/calls/calls.model.ts:20",{"_index":263,"title":{},"body":{"classes/Call.html":{}}}],["src/calls/calls.model.ts:23",{"_index":268,"title":{},"body":{"classes/Call.html":{}}}],["src/calls/calls.model.ts:26",{"_index":271,"title":{},"body":{"classes/Call.html":{}}}],["src/calls/calls.model.ts:29",{"_index":272,"title":{},"body":{"classes/Call.html":{}}}],["src/calls/calls.model.ts:32",{"_index":257,"title":{},"body":{"classes/Call.html":{}}}],["src/calls/calls.model.ts:35",{"_index":260,"title":{},"body":{"classes/Call.html":{}}}],["src/calls/calls.model.ts:39",{"_index":259,"title":{},"body":{"classes/Call.html":{}}}],["src/calls/calls.model.ts:42",{"_index":258,"title":{},"body":{"classes/Call.html":{}}}],["src/calls/calls.model.ts:46",{"_index":255,"title":{},"body":{"classes/Call.html":{}}}],["src/calls/calls.model.ts:49",{"_index":253,"title":{},"body":{"classes/Call.html":{}}}],["src/calls/calls.model.ts:53",{"_index":266,"title":{},"body":{"classes/Call.html":{}}}],["src/calls/calls.model.ts:56",{"_index":265,"title":{},"body":{"classes/Call.html":{}}}],["src/calls/calls.model.ts:60",{"_index":275,"title":{},"body":{"classes/Call.html":{}}}],["src/calls/calls.module",{"_index":726,"title":{},"body":{"modules/RecordsModule.html":{},"modules/WebRTCModule.html":{}}}],["src/calls/calls.module.ts",{"_index":307,"title":{},"body":{"modules/CallsModule.html":{}}}],["src/calls/calls.service",{"_index":765,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/WebRTCService.html":{}}}],["src/calls/calls.service.ts",{"_index":312,"title":{},"body":{"injectables/CallsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/calls/calls.service.ts:143",{"_index":338,"title":{},"body":{"injectables/CallsService.html":{}}}],["src/calls/calls.service.ts:164",{"_index":324,"title":{},"body":{"injectables/CallsService.html":{}}}],["src/calls/calls.service.ts:23",{"_index":321,"title":{},"body":{"injectables/CallsService.html":{}}}],["src/calls/calls.service.ts:31",{"_index":325,"title":{},"body":{"injectables/CallsService.html":{}}}],["src/calls/calls.service.ts:45",{"_index":335,"title":{},"body":{"injectables/CallsService.html":{}}}],["src/calls/calls.service.ts:60",{"_index":331,"title":{},"body":{"injectables/CallsService.html":{}}}],["src/calls/calls.service.ts:75",{"_index":333,"title":{},"body":{"injectables/CallsService.html":{}}}],["src/calls/calls.service.ts:92",{"_index":328,"title":{},"body":{"injectables/CallsService.html":{}}}],["src/calls/types",{"_index":482,"title":{},"body":{"classes/EventsGateway.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/WebRTCService.html":{}}}],["src/calls/types.ts",{"_index":1241,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/casl/casl.decorator.ts",{"_index":1243,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/casl/casl.guard.ts",{"_index":611,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{}}}],["src/casl/casl.guard.ts:15",{"_index":614,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["src/casl/casl.guard.ts:37",{"_index":616,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["src/casl/casl.guard.ts:9",{"_index":613,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["src/casl/casl.module",{"_index":524,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/casl/casl.module.ts",{"_index":414,"title":{},"body":{"modules/CaslModule.html":{}}}],["src/casl/casl.service.ts",{"_index":385,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"coverage.html":{}}}],["src/casl/casl.service.ts:14",{"_index":388,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["src/casl/constants.ts",{"_index":1245,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/casl/types.ts",{"_index":532,"title":{},"body":{"interfaces/IPolicyHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/casl/types.ts:17",{"_index":535,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["src/constants.ts",{"_index":1246,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/events/constants",{"_index":1105,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["src/events/constants.ts",{"_index":1247,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/events/events.gateway",{"_index":1106,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["src/events/events.gateway.ts",{"_index":417,"title":{},"body":{"classes/EventsGateway.html":{},"coverage.html":{}}}],["src/events/events.gateway.ts:103",{"_index":465,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:110",{"_index":441,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:117",{"_index":468,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:33",{"_index":433,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:43",{"_index":459,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:51",{"_index":438,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:59",{"_index":447,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:67",{"_index":444,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:75",{"_index":462,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:83",{"_index":450,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:91",{"_index":453,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.gateway.ts:98",{"_index":456,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/events/events.module",{"_index":1083,"title":{},"body":{"modules/WebRTCModule.html":{}}}],["src/events/events.module.ts",{"_index":522,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/events/types.ts",{"_index":1319,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/init/init.module.ts",{"_index":548,"title":{},"body":{"modules/InitModule.html":{}}}],["src/init/init.service.ts",{"_index":553,"title":{},"body":{"injectables/InitService.html":{},"coverage.html":{}}}],["src/init/init.service.ts:18",{"_index":557,"title":{},"body":{"injectables/InitService.html":{}}}],["src/init/init.service.ts:8",{"_index":556,"title":{},"body":{"injectables/InitService.html":{}}}],["src/main.ts",{"_index":1248,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/records/constants.ts",{"_index":1250,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/records/helpers.ts",{"_index":1252,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/records/records.controller.ts",{"_index":660,"title":{},"body":{"controllers/RecordsController.html":{},"coverage.html":{}}}],["src/records/records.controller.ts:22",{"_index":667,"title":{},"body":{"controllers/RecordsController.html":{}}}],["src/records/records.controller.ts:52",{"_index":671,"title":{},"body":{"controllers/RecordsController.html":{}}}],["src/records/records.controller.ts:63",{"_index":675,"title":{},"body":{"controllers/RecordsController.html":{}}}],["src/records/records.model",{"_index":288,"title":{},"body":{"classes/Call.html":{}}}],["src/records/records.model.ts",{"_index":629,"title":{},"body":{"classes/Record.html":{},"coverage.html":{}}}],["src/records/records.model.ts:16",{"_index":642,"title":{},"body":{"classes/Record.html":{}}}],["src/records/records.model.ts:19",{"_index":644,"title":{},"body":{"classes/Record.html":{}}}],["src/records/records.model.ts:22",{"_index":643,"title":{},"body":{"classes/Record.html":{}}}],["src/records/records.model.ts:25",{"_index":645,"title":{},"body":{"classes/Record.html":{}}}],["src/records/records.model.ts:28",{"_index":641,"title":{},"body":{"classes/Record.html":{}}}],["src/records/records.model.ts:31",{"_index":653,"title":{},"body":{"classes/Record.html":{}}}],["src/records/records.model.ts:34",{"_index":649,"title":{},"body":{"classes/Record.html":{}}}],["src/records/records.model.ts:37",{"_index":655,"title":{},"body":{"classes/Record.html":{}}}],["src/records/records.model.ts:40",{"_index":651,"title":{},"body":{"classes/Record.html":{}}}],["src/records/records.model.ts:44",{"_index":639,"title":{},"body":{"classes/Record.html":{}}}],["src/records/records.model.ts:47",{"_index":638,"title":{},"body":{"classes/Record.html":{}}}],["src/records/records.module",{"_index":526,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/records/records.module.ts",{"_index":725,"title":{},"body":{"modules/RecordsModule.html":{}}}],["src/records/records.service",{"_index":485,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/records/records.service.ts",{"_index":733,"title":{},"body":{"injectables/RecordsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/records/records.service.ts:101",{"_index":742,"title":{},"body":{"injectables/RecordsService.html":{}}}],["src/records/records.service.ts:112",{"_index":752,"title":{},"body":{"injectables/RecordsService.html":{}}}],["src/records/records.service.ts:122",{"_index":749,"title":{},"body":{"injectables/RecordsService.html":{}}}],["src/records/records.service.ts:156",{"_index":745,"title":{},"body":{"injectables/RecordsService.html":{}}}],["src/records/records.service.ts:190",{"_index":755,"title":{},"body":{"injectables/RecordsService.html":{}}}],["src/records/records.service.ts:221",{"_index":743,"title":{},"body":{"injectables/RecordsService.html":{}}}],["src/records/records.service.ts:249",{"_index":756,"title":{},"body":{"injectables/RecordsService.html":{}}}],["src/records/records.service.ts:347",{"_index":762,"title":{},"body":{"injectables/RecordsService.html":{}}}],["src/records/transcription.model.ts",{"_index":962,"title":{},"body":{"classes/Transcription.html":{},"coverage.html":{}}}],["src/records/transcription.model.ts:14",{"_index":967,"title":{},"body":{"classes/Transcription.html":{}}}],["src/records/transcription.model.ts:17",{"_index":965,"title":{},"body":{"classes/Transcription.html":{}}}],["src/records/transcription.model.ts:20",{"_index":969,"title":{},"body":{"classes/Transcription.html":{}}}],["src/records/transcription.model.ts:23",{"_index":966,"title":{},"body":{"classes/Transcription.html":{}}}],["src/records/transcription.model.ts:26",{"_index":975,"title":{},"body":{"classes/Transcription.html":{}}}],["src/records/transcription.model.ts:29",{"_index":974,"title":{},"body":{"classes/Transcription.html":{}}}],["src/records/transcription.model.ts:33",{"_index":973,"title":{},"body":{"classes/Transcription.html":{}}}],["src/records/transcription.model.ts:37",{"_index":971,"title":{},"body":{"classes/Transcription.html":{}}}],["src/records/transcription.model.ts:41",{"_index":972,"title":{},"body":{"classes/Transcription.html":{}}}],["src/records/transcription.model.ts:45",{"_index":970,"title":{},"body":{"classes/Transcription.html":{}}}],["src/records/transcription.model.ts:48",{"_index":968,"title":{},"body":{"classes/Transcription.html":{}}}],["src/records/types",{"_index":487,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/records/types.ts",{"_index":1302,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/routes.constants",{"_index":31,"title":{},"body":{"controllers/AgentController.html":{},"controllers/AuthController.html":{},"controllers/RecordsController.html":{},"controllers/UsersController.html":{}}}],["src/routes.constants.ts",{"_index":1256,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/speechrecognition/constants.ts",{"_index":1232,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/speechrecognition/sr.module",{"_index":727,"title":{},"body":{"modules/RecordsModule.html":{}}}],["src/speechrecognition/sr.module.ts",{"_index":931,"title":{},"body":{"modules/SRModule.html":{}}}],["src/speechrecognition/sr.service",{"_index":786,"title":{},"body":{"injectables/RecordsService.html":{}}}],["src/speechrecognition/sr.service.ts",{"_index":933,"title":{},"body":{"injectables/SRService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/speechrecognition/sr.service.ts:16",{"_index":936,"title":{},"body":{"injectables/SRService.html":{}}}],["src/speechrecognition/sr.service.ts:25",{"_index":938,"title":{},"body":{"injectables/SRService.html":{}}}],["src/speechrecognition/types",{"_index":682,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/RecordsService.html":{}}}],["src/speechrecognition/types.ts",{"_index":1321,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/users/constants.ts",{"_index":1258,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/secrets.model",{"_index":550,"title":{},"body":{"modules/InitModule.html":{},"injectables/InitService.html":{}}}],["src/users/secrets.model.ts",{"_index":956,"title":{},"body":{"classes/Secret.html":{},"coverage.html":{}}}],["src/users/secrets.model.ts:10",{"_index":959,"title":{},"body":{"classes/Secret.html":{}}}],["src/users/secrets.model.ts:13",{"_index":960,"title":{},"body":{"classes/Secret.html":{}}}],["src/users/secrets.model.ts:7",{"_index":958,"title":{},"body":{"classes/Secret.html":{}}}],["src/users/types",{"_index":33,"title":{},"body":{"controllers/AgentController.html":{},"injectables/AuthService.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/IPolicyHandler.html":{},"guards/WsJwtGuard.html":{}}}],["src/users/types.ts",{"_index":976,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/users/types.ts:10",{"_index":982,"title":{},"body":{"classes/User.html":{}}}],["src/users/types.ts:11",{"_index":983,"title":{},"body":{"classes/User.html":{}}}],["src/users/types.ts:12",{"_index":984,"title":{},"body":{"classes/User.html":{}}}],["src/users/types.ts:13",{"_index":985,"title":{},"body":{"classes/User.html":{}}}],["src/users/types.ts:14",{"_index":980,"title":{},"body":{"classes/User.html":{}}}],["src/users/types.ts:15",{"_index":988,"title":{},"body":{"classes/User.html":{}}}],["src/users/types.ts:16",{"_index":986,"title":{},"body":{"classes/User.html":{}}}],["src/users/types.ts:8",{"_index":981,"title":{},"body":{"classes/User.html":{}}}],["src/users/types.ts:9",{"_index":987,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":1015,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:11",{"_index":1018,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.model",{"_index":289,"title":{},"body":{"classes/Call.html":{},"injectables/CallsService.html":{},"modules/InitModule.html":{},"injectables/InitService.html":{},"injectables/RecordsService.html":{}}}],["src/users/users.model.ts",{"_index":995,"title":{},"body":{"classes/User-1.html":{},"coverage.html":{}}}],["src/users/users.model.ts:17",{"_index":1001,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/users.model.ts:20",{"_index":1008,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/users.model.ts:23",{"_index":1007,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/users.model.ts:26",{"_index":1002,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/users.model.ts:29",{"_index":1010,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/users.model.ts:32",{"_index":1003,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/users.model.ts:35",{"_index":1005,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/users.model.ts:39",{"_index":1000,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/users.model.ts:43",{"_index":1006,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/users.model.ts:46",{"_index":1004,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/users.model.ts:49",{"_index":998,"title":{},"body":{"classes/User-1.html":{}}}],["src/users/users.module",{"_index":67,"title":{},"body":{"modules/AgentModule.html":{},"modules/CallsModule.html":{}}}],["src/users/users.module.ts",{"_index":1026,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":35,"title":{},"body":{"controllers/AgentController.html":{},"injectables/CallsService.html":{}}}],["src/users/users.service.ts",{"_index":1028,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:121",{"_index":1046,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:21",{"_index":1034,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:31",{"_index":1035,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:44",{"_index":1042,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:48",{"_index":1044,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:52",{"_index":1038,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:69",{"_index":1040,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:80",{"_index":1037,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/webrtc/constants.ts",{"_index":1259,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/webrtc/types",{"_index":342,"title":{},"body":{"injectables/CallsService.html":{},"classes/EventsGateway.html":{},"injectables/RecordsService.html":{}}}],["src/webrtc/types.ts",{"_index":1391,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/webrtc/webrtc.module",{"_index":527,"title":{},"body":{"modules/EventsModule.html":{}}}],["src/webrtc/webrtc.module.ts",{"_index":1082,"title":{},"body":{"modules/WebRTCModule.html":{}}}],["src/webrtc/webrtc.service",{"_index":480,"title":{},"body":{"classes/EventsGateway.html":{}}}],["src/webrtc/webrtc.service.ts",{"_index":1085,"title":{},"body":{"injectables/WebRTCService.html":{},"coverage.html":{}}}],["src/webrtc/webrtc.service.ts:103",{"_index":1096,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["src/webrtc/webrtc.service.ts:127",{"_index":1098,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["src/webrtc/webrtc.service.ts:167",{"_index":1100,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["src/webrtc/webrtc.service.ts:18",{"_index":1092,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["src/webrtc/webrtc.service.ts:25",{"_index":1094,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["src/webrtc/webrtc.service.ts:50",{"_index":1102,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["src/workers/constants.ts",{"_index":1260,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/workers/pool",{"_index":940,"title":{},"body":{"injectables/SRService.html":{}}}],["src/workers/pool.ts",{"_index":1152,"title":{},"body":{"classes/WorkersPool.html":{},"coverage.html":{}}}],["src/workers/pool.ts:10",{"_index":1160,"title":{},"body":{"classes/WorkersPool.html":{}}}],["src/workers/pool.ts:26",{"_index":1168,"title":{},"body":{"classes/WorkersPool.html":{}}}],["src/workers/pool.ts:33",{"_index":1170,"title":{},"body":{"classes/WorkersPool.html":{}}}],["src/workers/pool.ts:57",{"_index":1169,"title":{},"body":{"classes/WorkersPool.html":{}}}],["src/workers/pool.ts:8",{"_index":1164,"title":{},"body":{"classes/WorkersPool.html":{}}}],["src/workers/pool.ts:9",{"_index":1162,"title":{},"body":{"classes/WorkersPool.html":{}}}],["src/workers/types.ts",{"_index":1395,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["srccallee",{"_index":631,"title":{},"body":{"classes/Record.html":{},"miscellaneous/enumerations.html":{}}}],["srccaller",{"_index":632,"title":{},"body":{"classes/Record.html":{},"miscellaneous/enumerations.html":{}}}],["srcdirpath",{"_index":825,"title":{},"body":{"injectables/RecordsService.html":{}}}],["srcmerged",{"_index":633,"title":{},"body":{"classes/Record.html":{},"injectables/RecordsService.html":{}}}],["srcmerged.${target_ext",{"_index":876,"title":{},"body":{"injectables/RecordsService.html":{}}}],["srcpayload",{"_index":669,"title":{},"body":{"controllers/RecordsController.html":{},"miscellaneous/typealiases.html":{}}}],["srmode",{"_index":758,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/SRService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["srmode.deep",{"_index":895,"title":{},"body":{"injectables/RecordsService.html":{}}}],["srmode.fluent",{"_index":853,"title":{},"body":{"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["srmodule",{"_index":724,"title":{"modules/SRModule.html":{}},"body":{"modules/RecordsModule.html":{},"modules/SRModule.html":{},"modules.html":{},"overview.html":{}}}],["sroutput",{"_index":943,"title":{},"body":{"injectables/SRService.html":{},"miscellaneous/typealiases.html":{}}}],["srpool",{"_index":934,"title":{},"body":{"injectables/SRService.html":{}}}],["srprocesspath",{"_index":946,"title":{},"body":{"injectables/SRService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["srresult",{"_index":944,"title":{},"body":{"injectables/SRService.html":{},"miscellaneous/typealiases.html":{}}}],["srservice",{"_index":741,"title":{"injectables/SRService.html":{}},"body":{"injectables/RecordsService.html":{},"modules/SRModule.html":{},"injectables/SRService.html":{},"coverage.html":{},"overview.html":{}}}],["srtask",{"_index":945,"title":{},"body":{"injectables/SRService.html":{},"miscellaneous/typealiases.html":{}}}],["standard_pool_lifetime",{"_index":1175,"title":{},"body":{"classes/WorkersPool.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["standard_pool_number",{"_index":1174,"title":{},"body":{"classes/WorkersPool.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["standard_pool_number).foreach",{"_index":1179,"title":{},"body":{"classes/WorkersPool.html":{}}}],["start",{"_index":918,"title":{},"body":{"injectables/RecordsService.html":{},"classes/Transcription.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":1344,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1346,"title":{},"body":{"index.html":{}}}],["started",{"_index":1325,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1335,"title":{},"body":{"index.html":{}}}],["startrecord",{"_index":428,"title":{},"body":{"classes/EventsGateway.html":{}}}],["startrecord(payload",{"_index":463,"title":{},"body":{"classes/EventsGateway.html":{}}}],["starttimestamp",{"_index":1467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":1228,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":250,"title":{},"body":{"classes/Call.html":{}}}],["status",{"_index":51,"title":{},"body":{"controllers/AgentController.html":{},"classes/Call.html":{},"injectables/CallsService.html":{},"controllers/RecordsController.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/variables.html":{}}}],["statussequence",{"_index":248,"title":{},"body":{"classes/Call.html":{},"injectables/WebRTCService.html":{}}}],["statustimestampssequence",{"_index":249,"title":{},"body":{"classes/Call.html":{},"injectables/WebRTCService.html":{}}}],["statustotimestampdict",{"_index":1242,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stay",{"_index":1367,"title":{},"body":{"index.html":{}}}],["stop",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stoprecord",{"_index":429,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/RecordsService.html":{}}}],["stoprecord(payload",{"_index":466,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/RecordsService.html":{}}}],["strategy",{"_index":599,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":789,"title":{},"body":{"injectables/RecordsService.html":{}}}],["string",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"injectables/CallsService.html":{},"classes/Record.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{},"miscellaneous/variables.html":{}}}],["string(record.id",{"_index":827,"title":{},"body":{"injectables/RecordsService.html":{}}}],["subjects",{"_index":398,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/IPolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["subscribemessage",{"_index":472,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(event_types.init",{"_index":455,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(event_types.record.append",{"_index":514,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(event_types.record.start",{"_index":512,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(event_types.record.stop",{"_index":516,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(event_types.signaling.answer",{"_index":496,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(event_types.signaling.cancel",{"_index":501,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(event_types.signaling.ended",{"_index":498,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(event_types.signaling.failed",{"_index":505,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(event_types.signaling.new_ice",{"_index":506,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(event_types.signaling.offer",{"_index":494,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(event_types.signaling.reject",{"_index":503,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(undefined.answer",{"_index":437,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(undefined.append",{"_index":440,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(undefined.cancel",{"_index":443,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(undefined.ended",{"_index":446,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(undefined.failed",{"_index":449,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(undefined.new_ice",{"_index":452,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(undefined.offer",{"_index":458,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(undefined.reject",{"_index":461,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(undefined.start",{"_index":464,"title":{},"body":{"classes/EventsGateway.html":{}}}],["subscribemessage(undefined.stop",{"_index":467,"title":{},"body":{"classes/EventsGateway.html":{}}}],["super",{"_index":585,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":590,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["supervisor",{"_index":990,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["support",{"_index":1359,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1378,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":375,"title":{},"body":{"injectables/CallsService.html":{},"injectables/RecordsService.html":{},"injectables/UsersService.html":{},"classes/WorkersPool.html":{}}}],["table",{"_index":285,"title":{},"body":{"classes/Call.html":{},"classes/Record.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User-1.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1262,"title":{},"body":{"coverage.html":{}}}],["takewhile",{"_index":785,"title":{},"body":{"injectables/RecordsService.html":{}}}],["target_ext",{"_index":774,"title":{},"body":{"injectables/RecordsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["targetpath",{"_index":855,"title":{},"body":{"injectables/RecordsService.html":{}}}],["task",{"_index":906,"title":{},"body":{"injectables/RecordsService.html":{},"classes/WorkersPool.html":{},"miscellaneous/typealiases.html":{}}}],["task.taskid",{"_index":905,"title":{},"body":{"injectables/RecordsService.html":{}}}],["taskid",{"_index":896,"title":{},"body":{"injectables/RecordsService.html":{}}}],["tasksequence",{"_index":1154,"title":{},"body":{"classes/WorkersPool.html":{}}}],["taskstowrite",{"_index":908,"title":{},"body":{"injectables/RecordsService.html":{}}}],["test",{"_index":1348,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1351,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1350,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1347,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1357,"title":{},"body":{"index.html":{}}}],["this.authservice.auth(username",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(body",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(decoded.userid",{"_index":1216,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["this.authservice.validateuser(payload.userid",{"_index":607,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.callmodel.create",{"_index":376,"title":{},"body":{"injectables/CallsService.html":{}}}],["this.callmodel.findbypk(id",{"_index":357,"title":{},"body":{"injectables/CallsService.html":{}}}],["this.callmodel.findone",{"_index":359,"title":{},"body":{"injectables/CallsService.html":{}}}],["this.callmodel.update",{"_index":354,"title":{},"body":{"injectables/CallsService.html":{}}}],["this.callsservice.addrecord(record.id",{"_index":824,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.callsservice.createcall",{"_index":1116,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["this.callsservice.findactivecallbycallee",{"_index":1129,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["this.callsservice.findcallbyid(callid",{"_index":830,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/WebRTCService.html":{}}}],["this.callsservice.findcallbyid(payload.callid",{"_index":819,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/WebRTCService.html":{}}}],["this.callsservice.updatecallstatus",{"_index":1109,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["this.caslabilityfactory.createforuser(user",{"_index":623,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.checktimeexceed(call.id",{"_index":1119,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["this.config.get(bcrypt_sault",{"_index":1071,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.controller",{"_index":1176,"title":{},"body":{"classes/WorkersPool.html":{}}}],["this.controller.abort",{"_index":1205,"title":{},"body":{"classes/WorkersPool.html":{}}}],["this.controller.signal",{"_index":1185,"title":{},"body":{"classes/WorkersPool.html":{}}}],["this.deletepassword(user",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.emittoken(user",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.eventsgateway.server",{"_index":1111,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["this.execpolicyhandler(handler",{"_index":625,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.findactivecallbysides",{"_index":372,"title":{},"body":{"injectables/CallsService.html":{}}}],["this.findbynameandemail",{"_index":1064,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.findcallbyid(call.id",{"_index":380,"title":{},"body":{"injectables/CallsService.html":{}}}],["this.findcallbyid(payload.id",{"_index":383,"title":{},"body":{"injectables/CallsService.html":{}}}],["this.findrecordbyid(call.recordid",{"_index":833,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.findrecordbyid(record.id",{"_index":829,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.findrecordbyid(recordid",{"_index":902,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.getexistingrecord",{"_index":836,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.init",{"_index":560,"title":{},"body":{"injectables/InitService.html":{}}}],["this.jwtservice.decode(authtoken",{"_index":1215,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["this.jwtservice.sign(payload",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.pool",{"_index":1177,"title":{},"body":{"classes/WorkersPool.html":{}}}],["this.pool.find((worker",{"_index":1191,"title":{},"body":{"classes/WorkersPool.html":{}}}],["this.pool.push",{"_index":1180,"title":{},"body":{"classes/WorkersPool.html":{}}}],["this.recordfluenttrancriptionseq[record.id",{"_index":894,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.recordfluenttrancriptionseq[recordid",{"_index":897,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.recordfluenttrancriptionseq[recordid][side",{"_index":898,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.recordfluenttrancriptionseq[recordid][side].map((task",{"_index":904,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.recordfluenttrancriptionseq[recordid][side].push",{"_index":899,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.recordmodel.count",{"_index":809,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.recordmodel.create",{"_index":823,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.recordmodel.findall",{"_index":811,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.recordmodel.findbypk(id",{"_index":802,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.recordmodel.update",{"_index":877,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.recordsservice.appendrecord(payload",{"_index":515,"title":{},"body":{"classes/EventsGateway.html":{}}}],["this.recordsservice.createrecord(payload",{"_index":513,"title":{},"body":{"classes/EventsGateway.html":{}}}],["this.recordsservice.findbyfilters",{"_index":689,"title":{},"body":{"controllers/RecordsController.html":{}}}],["this.recordsservice.findrecordbyid",{"_index":713,"title":{},"body":{"controllers/RecordsController.html":{}}}],["this.recordsservice.findrecordbyid(body.id",{"_index":705,"title":{},"body":{"controllers/RecordsController.html":{}}}],["this.recordsservice.stoprecord(payload",{"_index":517,"title":{},"body":{"classes/EventsGateway.html":{}}}],["this.reflector.get",{"_index":620,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":587,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.secretmodel.bulkcreate",{"_index":565,"title":{},"body":{"injectables/InitService.html":{}}}],["this.secretmodel.count",{"_index":564,"title":{},"body":{"injectables/InitService.html":{}}}],["this.secretmodel.findone",{"_index":1072,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.sequelize.col('username",{"_index":1058,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.sequelize.fn('lower",{"_index":1057,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.sequelize.transaction(async",{"_index":374,"title":{},"body":{"injectables/CallsService.html":{},"injectables/RecordsService.html":{},"injectables/UsersService.html":{}}}],["this.sequelize.where",{"_index":1056,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.srpool",{"_index":950,"title":{},"body":{"injectables/SRService.html":{}}}],["this.srpool.plantask",{"_index":954,"title":{},"body":{"injectables/SRService.html":{}}}],["this.srservice.speechtotext(src",{"_index":901,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.tasksequence.push(task",{"_index":1188,"title":{},"body":{"classes/WorkersPool.html":{}}}],["this.tasksequence.shift",{"_index":1194,"title":{},"body":{"classes/WorkersPool.html":{}}}],["this.transcriptionmodel.bulkcreate",{"_index":925,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.transcriptrecord(record.id",{"_index":852,"title":{},"body":{"injectables/RecordsService.html":{}}}],["this.tryruntask",{"_index":1189,"title":{},"body":{"classes/WorkersPool.html":{}}}],["this.usermodel.count",{"_index":562,"title":{},"body":{"injectables/InitService.html":{}}}],["this.usermodel.create",{"_index":1069,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findall",{"_index":1060,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbypk(id",{"_index":1051,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":1052,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.update",{"_index":1049,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createone(authpayload",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findbyfilters(body",{"_index":1022,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findbynameandemail(username",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone(id",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebywebrtcnumber",{"_index":361,"title":{},"body":{"injectables/CallsService.html":{}}}],["this.usersservice.updatestatus",{"_index":46,"title":{},"body":{"controllers/AgentController.html":{}}}],["this.webrtcservice.handleanswer(payload",{"_index":497,"title":{},"body":{"classes/EventsGateway.html":{}}}],["this.webrtcservice.handleendcall(payload",{"_index":499,"title":{},"body":{"classes/EventsGateway.html":{}}}],["this.webrtcservice.handlenewice(payload",{"_index":507,"title":{},"body":{"classes/EventsGateway.html":{}}}],["this.webrtcservice.handleoffer(payload",{"_index":495,"title":{},"body":{"classes/EventsGateway.html":{}}}],["throw",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CallsService.html":{},"injectables/RecordsService.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{}}}],["time_exceed",{"_index":1458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["time_exceed_limit",{"_index":1107,"title":{},"body":{"injectables/WebRTCService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["timeexceeded",{"_index":1318,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["timeout",{"_index":1182,"title":{},"body":{"classes/WorkersPool.html":{}}}],["tmppath",{"_index":847,"title":{},"body":{"injectables/RecordsService.html":{}}}],["to(roomprefix(call.calleeid",{"_index":1112,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["to(roomprefix(call.callerid",{"_index":1113,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["to(roomprefix(existingcall.calleeid",{"_index":1137,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["to(roomprefix(existingcall.callerid",{"_index":1139,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["to(roomprefix(otherside.id",{"_index":1145,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["to(roomprefix(payload.user.id",{"_index":1120,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["to(roomprefix(updatedcall.calleeid",{"_index":1136,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["to(roomprefix(updatedcall.callerid",{"_index":1132,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["total",{"_index":688,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/RecordsService.html":{}}}],["touch",{"_index":1368,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":379,"title":{},"body":{"injectables/CallsService.html":{},"injectables/RecordsService.html":{},"injectables/UsersService.html":{}}}],["transcription",{"_index":646,"title":{"classes/Transcription.html":{}},"body":{"classes/Record.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"classes/Transcription.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["transcription${side}${mode",{"_index":1417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transcription.model",{"_index":657,"title":{},"body":{"classes/Record.html":{},"modules/RecordsModule.html":{},"injectables/RecordsService.html":{}}}],["transcriptioncallee",{"_index":634,"title":{},"body":{"classes/Record.html":{},"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["transcriptioncalleefluent",{"_index":635,"title":{},"body":{"classes/Record.html":{},"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["transcriptioncalleefluentid",{"_index":650,"title":{},"body":{"classes/Record.html":{},"classes/Transcription.html":{}}}],["transcriptioncalleeid",{"_index":648,"title":{},"body":{"classes/Record.html":{},"classes/Transcription.html":{}}}],["transcriptioncaller",{"_index":636,"title":{},"body":{"classes/Record.html":{},"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["transcriptioncallerfluent",{"_index":637,"title":{},"body":{"classes/Record.html":{},"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["transcriptioncallerfluentid",{"_index":654,"title":{},"body":{"classes/Record.html":{},"classes/Transcription.html":{}}}],["transcriptioncallerid",{"_index":652,"title":{},"body":{"classes/Record.html":{},"classes/Transcription.html":{}}}],["transcriptionmodel",{"_index":731,"title":{},"body":{"modules/RecordsModule.html":{},"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["transcriptionpayload",{"_index":673,"title":{},"body":{"controllers/RecordsController.html":{},"miscellaneous/typealiases.html":{}}}],["transcriptionunit",{"_index":681,"title":{},"body":{"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["transcriptrecord",{"_index":739,"title":{},"body":{"injectables/RecordsService.html":{}}}],["transcriptrecord(recordid",{"_index":757,"title":{},"body":{"injectables/RecordsService.html":{}}}],["transcripts",{"_index":910,"title":{},"body":{"injectables/RecordsService.html":{}}}],["transcripts?.length",{"_index":914,"title":{},"body":{"injectables/RecordsService.html":{}}}],["transports",{"_index":491,"title":{},"body":{"classes/EventsGateway.html":{}}}],["true",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"classes/Call.html":{},"injectables/CallsService.html":{},"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"classes/Record.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"classes/WorkersPool.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":1209,"title":{},"body":{"guards/WsJwtGuard.html":{}}}],["tryruntask",{"_index":1157,"title":{},"body":{"classes/WorkersPool.html":{}}}],["twitter",{"_index":1374,"title":{},"body":{"index.html":{}}}],["type",{"_index":20,"title":{},"body":{"controllers/AgentController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/EventsGateway.html":{},"interfaces/IPolicyHandler.html":{},"injectables/InitService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"classes/Record.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1387,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":353,"title":{},"body":{"injectables/CallsService.html":{},"injectables/InitService.html":{},"guards/PoliciesGuard.html":{},"injectables/RecordsService.html":{},"injectables/UsersService.html":{}}}],["types",{"_index":37,"title":{},"body":{"controllers/AgentController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"controllers/RecordsController.html":{},"injectables/RecordsService.html":{},"injectables/SRService.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"classes/WorkersPool.html":{},"guards/WsJwtGuard.html":{},"dependencies.html":{}}}],["typescript",{"_index":287,"title":{},"body":{"classes/Call.html":{},"injectables/CallsService.html":{},"injectables/InitService.html":{},"classes/Record.html":{},"injectables/RecordsService.html":{},"classes/Secret.html":{},"classes/Transcription.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["u",{"_index":1198,"title":{},"body":{"classes/WorkersPool.html":{}}}],["uint8array(payload.recordblob)))).save",{"_index":851,"title":{},"body":{"injectables/RecordsService.html":{}}}],["undefined",{"_index":270,"title":{},"body":{"classes/Call.html":{},"classes/Record.html":{},"injectables/RecordsService.html":{},"classes/Transcription.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{}}}],["unique",{"_index":1013,"title":{},"body":{"classes/User-1.html":{}}}],["unit",{"_index":917,"title":{},"body":{"injectables/RecordsService.html":{},"index.html":{}}}],["unit.end",{"_index":924,"title":{},"body":{"injectables/RecordsService.html":{}}}],["unitstowrite",{"_index":903,"title":{},"body":{"injectables/RecordsService.html":{}}}],["unitstowrite.map((unit",{"_index":926,"title":{},"body":{"injectables/RecordsService.html":{}}}],["unitstowrite.push",{"_index":916,"title":{},"body":{"injectables/RecordsService.html":{}}}],["unknown",{"_index":597,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":1386,"title":{},"body":{"properties.html":{}}}],["update",{"_index":542,"title":{},"body":{"interfaces/IPolicyHandler.html":{},"miscellaneous/enumerations.html":{}}}],["updatecallstatus",{"_index":319,"title":{},"body":{"injectables/CallsService.html":{}}}],["updatecallstatus(payload",{"_index":336,"title":{},"body":{"injectables/CallsService.html":{}}}],["updatedcall",{"_index":1130,"title":{},"body":{"injectables/WebRTCService.html":{}}}],["updateduser",{"_index":44,"title":{},"body":{"controllers/AgentController.html":{},"injectables/UsersService.html":{}}}],["updateduser.status",{"_index":52,"title":{},"body":{"controllers/AgentController.html":{}}}],["updatestatus",{"_index":1033,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatestatus(changestatuspayload",{"_index":1045,"title":{},"body":{"injectables/UsersService.html":{}}}],["usefactory",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":470,"title":{},"body":{"classes/EventsGateway.html":{}}}],["useguards(wsjwtguard",{"_index":488,"title":{},"body":{"classes/EventsGateway.html":{}}}],["user",{"_index":48,"title":{"classes/User.html":{},"classes/User-1.html":{}},"body":{"controllers/AgentController.html":{},"injectables/AuthService.html":{},"classes/Call.html":{},"injectables/CallsService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/IPolicyHandler.html":{},"modules/InitModule.html":{},"injectables/InitService.html":{},"guards/PoliciesGuard.html":{},"injectables/RecordsService.html":{},"classes/Secret.html":{},"classes/User.html":{},"classes/User-1.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user.id",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.passwordhash",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{}}}],["user.setsecret(secret",{"_index":1074,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.username",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.webrtcnumber",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0",{"_index":1078,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RecordsService.html":{},"miscellaneous/variables.html":{}}}],["usermodel",{"_index":346,"title":{},"body":{"injectables/CallsService.html":{},"modules/InitModule.html":{},"injectables/InitService.html":{},"injectables/RecordsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["username",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{}}}],["users",{"_index":957,"title":{},"body":{"classes/Secret.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["users.controller",{"_index":1027,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.model",{"_index":961,"title":{},"body":{"classes/Secret.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":1019,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["users/users.service",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["userscontroller",{"_index":1014,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userscount",{"_index":561,"title":{},"body":{"injectables/InitService.html":{}}}],["usersmodule",{"_index":61,"title":{"modules/UsersModule.html":{}},"body":{"modules/AgentModule.html":{},"modules/AuthModule.html":{},"modules/CallsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":34,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AgentController.html":{},"injectables/AuthService.html":{},"injectables/CallsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userstatuses",{"_index":32,"title":{},"body":{"controllers/AgentController.html":{},"injectables/CallsService.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["userstatuses.away",{"_index":369,"title":{},"body":{"injectables/CallsService.html":{}}}],["userstatuses.offline",{"_index":367,"title":{},"body":{"injectables/CallsService.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{}}}],["val",{"_index":1432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":592,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":595,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(id",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":764,"title":{},"body":{"injectables/RecordsService.html":{},"classes/WorkersPool.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.result",{"_index":909,"title":{},"body":{"injectables/RecordsService.html":{}}}],["variable",{"_index":1230,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1396,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verify",{"_index":1412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verify_token",{"_index":1413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verifytoken",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["version",{"_index":1384,"title":{},"body":{"properties.html":{}}}],["void",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"classes/Call.html":{},"classes/EventsGateway.html":{},"classes/WorkersPool.html":{}}}],["watch",{"_index":1343,"title":{},"body":{"index.html":{}}}],["webrtc.service",{"_index":1084,"title":{},"body":{"modules/WebRTCModule.html":{}}}],["webrtc/webrtc.module",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["webrtcmodule",{"_index":85,"title":{"modules/WebRTCModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EventsModule.html":{},"modules/WebRTCModule.html":{},"modules.html":{},"overview.html":{}}}],["webrtcnumber",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{},"classes/User-1.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{}}}],["webrtcservice",{"_index":431,"title":{"injectables/WebRTCService.html":{}},"body":{"classes/EventsGateway.html":{},"modules/WebRTCModule.html":{},"injectables/WebRTCService.html":{},"coverage.html":{},"overview.html":{}}}],["website",{"_index":1372,"title":{},"body":{"index.html":{}}}],["websocket",{"_index":492,"title":{},"body":{"classes/EventsGateway.html":{}}}],["websocketgateway",{"_index":473,"title":{},"body":{"classes/EventsGateway.html":{}}}],["websocketserver",{"_index":434,"title":{},"body":{"classes/EventsGateway.html":{}}}],["where.username",{"_index":1055,"title":{},"body":{"injectables/UsersService.html":{}}}],["withuser",{"_index":436,"title":{},"body":{"classes/EventsGateway.html":{},"injectables/RecordsService.html":{},"injectables/UsersService.html":{},"injectables/WebRTCService.html":{},"miscellaneous/typealiases.html":{}}}],["word",{"_index":964,"title":{},"body":{"classes/Transcription.html":{},"miscellaneous/variables.html":{}}}],["worker",{"_index":1163,"title":{},"body":{"classes/WorkersPool.html":{},"miscellaneous/typealiases.html":{}}}],["worker.isfree",{"_index":1192,"title":{},"body":{"classes/WorkersPool.html":{}}}],["workerspool",{"_index":939,"title":{"classes/WorkersPool.html":{}},"body":{"injectables/SRService.html":{},"classes/WorkersPool.html":{},"coverage.html":{}}}],["wrongcalleewebrtcnumber",{"_index":1308,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["wrongcallerwebrtcnumber",{"_index":1307,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["wrongcalltoattach",{"_index":1303,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["wsexception",{"_index":344,"title":{},"body":{"injectables/CallsService.html":{},"injectables/RecordsService.html":{},"guards/WsJwtGuard.html":{}}}],["wsexception(callerrors.agentaway",{"_index":370,"title":{},"body":{"injectables/CallsService.html":{}}}],["wsexception(callerrors.agentoffline",{"_index":368,"title":{},"body":{"injectables/CallsService.html":{}}}],["wsexception(callerrors.busy",{"_index":373,"title":{},"body":{"injectables/CallsService.html":{}}}],["wsexception(callerrors.wrongcalleewebrtcnumber",{"_index":365,"title":{},"body":{"injectables/CallsService.html":{}}}],["wsexception(callerrors.wrongcallerwebrtcnumber",{"_index":364,"title":{},"body":{"injectables/CallsService.html":{}}}],["wsexception(recorderrors.recordexist",{"_index":822,"title":{},"body":{"injectables/RecordsService.html":{}}}],["wsexception(recorderrors.wrongcalltoattach",{"_index":820,"title":{},"body":{"injectables/RecordsService.html":{}}}],["wsjwtguard",{"_index":176,"title":{"guards/WsJwtGuard.html":{}},"body":{"modules/AuthModule.html":{},"classes/EventsGateway.html":{},"guards/WsJwtGuard.html":{},"coverage.html":{}}}],["yallist",{"_index":1165,"title":{},"body":{"classes/WorkersPool.html":{},"dependencies.html":{}}}],["yallist.create",{"_index":1166,"title":{},"body":{"classes/WorkersPool.html":{}}}],["yes",{"_index":753,"title":{},"body":{"injectables/RecordsService.html":{},"injectables/SRService.html":{},"injectables/UsersService.html":{}}}],["you'd",{"_index":1362,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":62,"title":{},"body":{"modules/AgentModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CallsModule.html":{},"modules/CaslModule.html":{},"modules/EventsModule.html":{},"modules/InitModule.html":{},"modules/RecordsModule.html":{},"modules/SRModule.html":{},"modules/UsersModule.html":{},"modules/WebRTCModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AgentController.html":{"url":"controllers/AgentController.html","title":"controller - AgentController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AgentController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/agent/agent.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changeStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        changeStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    changeStatus(request: ReqWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(undefined.STATUS)\n                \n            \n\n            \n                \n                    Defined in src/agent/agent.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            ReqWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Req } from '@nestjs/common';\nimport { ReqWithUser } from 'src/auth/types';\n\nimport { ROUTES } from 'src/routes.constants';\nimport { UserStatuses } from 'src/users/types';\nimport { UsersService } from 'src/users/users.service';\nimport { ChangeStatusPayload } from './types';\n\n@Controller(ROUTES.API.AGENT.BASE)\nexport class AgentController {\n  constructor(private usersService: UsersService) {}\n\n  @Post(ROUTES.API.AGENT.STATUS)\n  async changeStatus(\n    @Req() request: ReqWithUser,\n  ): Promise {\n    const updatedUser = await this.usersService.updateStatus({\n      ...request.body,\n      user: request.user,\n    });\n\n    return { status: updatedUser.status };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AgentModule.html":{"url":"modules/AgentModule.html","title":"module - AgentModule","body":"\n                   \n\n\n\n\n    Modules\n    AgentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AgentModule\n\n\n\ncluster_AgentModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAgentModule\n\nAgentModule\n\nAgentModule -->\n\nUsersModule->AgentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/agent/agent.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AgentController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from 'src/users/users.module';\nimport { AgentController } from './agent.controller';\n\n@Module({\n  imports: [UsersModule],\n  controllers: [AgentController],\n  providers: [],\n  exports: [],\n})\nexport class AgentModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return '';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAgentModule\n\nAgentModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAgentModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nInitModule\n\nInitModule\n\nAppModule -->\n\nInitModule->AppModule\n\n\n\n\n\nWebRTCModule\n\nWebRTCModule\n\nAppModule -->\n\nWebRTCModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AgentModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            InitModule\n                        \n                        \n                            WebRTCModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { DB_VARIABLES } from './constants';\nimport { Dialect } from 'sequelize/types';\nimport { InitModule } from './init/init.module';\nimport { WebRTCModule } from './webrtc/webrtc.module';\nimport { AgentModule } from './agent/agent.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true }),\n    SequelizeModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        dialect: config.get(DB_VARIABLES.DATABASE_DIALECT),\n        host: config.get(DB_VARIABLES.DATABASE_HOST),\n        port: config.get(DB_VARIABLES.DATABASE_PORT),\n        username: config.get(DB_VARIABLES.DATABASE_USER),\n        password: config.get(DB_VARIABLES.DATABASE_PASSWORD),\n        database: config.get(DB_VARIABLES.DATABASE_NAME),\n        autoLoadModels: true,\n        synchronize: true,\n        logging: false,\n      }),\n    }),\n    WebRTCModule,\n    AuthModule,\n    AgentModule,\n    InitModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(initService: InitService)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        initService\n                                                  \n                                                        \n                                                                        InitService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InitService } from './init/init.service';\n\n@Injectable()\nexport class AppService {\n  constructor(private initService: InitService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                register\n                            \n                            \n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(body: AuthPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post(undefined.LOGIN)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(body: AuthPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post(undefined.REGISTER)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                AuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifyToken\n                        \n                    \n                \n            \n            \n                \nverifyToken()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(undefined.VERIFY)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Body, Get } from '@nestjs/common';\nimport { ROUTES } from 'src/routes.constants';\nimport { AuthService } from './auth.service';\nimport { Public } from './jwt-auth.guard';\nimport { EmittedToken, AuthPayload } from './types';\n\n@Controller(ROUTES.API.AUTH.BASE)\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Public()\n  @Post(ROUTES.API.AUTH.LOGIN)\n  async login(@Body() body: AuthPayload): Promise {\n    const { username, password } = body;\n\n    return this.authService.auth(username, password);\n  }\n\n  @Public()\n  @Post(ROUTES.API.AUTH.REGISTER)\n  register(@Body() body: AuthPayload): Promise {\n    return this.authService.register(body);\n  }\n\n  @Get(ROUTES.API.AUTH.VERIFY)\n  verifyToken(): void {\n    return;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ConfigService } from '@nestjs/config';\nimport { JWT_EXPIRES, JWT_SECRET_NAME } from './constants';\nimport { AuthController } from './auth.controller';\nimport { WsJwtGuard } from './jwt-socket-auth.guard';\n\nconst JwtModuleRegistered = JwtModule.registerAsync({\n  inject: [ConfigService],\n  useFactory: (config: ConfigService) => ({\n    secret: config.get(JWT_SECRET_NAME),\n    signOptions: { expiresIn: JWT_EXPIRES },\n  }),\n});\n\n@Module({\n  imports: [UsersModule, PassportModule, JwtModuleRegistered],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy, WsJwtGuard],\n  exports: [AuthService, JwtModuleRegistered],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                auth\n                            \n                            \n                                deletePassword\n                            \n                            \n                                emitToken\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        auth\n                        \n                    \n                \n            \n            \n                \n                    \n                    auth(username: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletePassword\n                        \n                    \n                \n            \n            \n                \ndeletePassword(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Omit\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emitToken\n                        \n                    \n                \n            \n            \n                \nemitToken(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         EmittedToken\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(authPayload: AuthPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authPayload\n                                    \n                                                AuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { User } from 'src/users/types';\nimport { AuthPayload, AuthResponsePayload, EmittedToken } from './types';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n  ) {}\n\n  deletePassword(user: User): Omit {\n    if (user) {\n      delete user.passwordHash;\n\n      return user;\n    }\n\n    return null;\n  }\n\n  emitToken(user: User): EmittedToken {\n    const payload: AuthResponsePayload = {\n      userName: user.username,\n      userId: user.id,\n      webrtcNumber: user.webrtcNumber,\n      role: user.role,\n    };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n\n  async register(authPayload: AuthPayload): Promise {\n    const user = await this.usersService.createOne(authPayload);\n\n    return this.emitToken(user);\n  }\n\n  async validateUser(id: number): Promise> {\n    const user = await this.usersService.findOne(id);\n    return this.deletePassword(user);\n  }\n\n  async auth(username: string, password: string): Promise {\n    const user = await this.usersService.findByNameAndEmail(username);\n    const isValidPassword =\n      user && bcrypt.compareSync(password, user.passwordHash);\n\n    if (!user || !isValidPassword) {\n      throw new HttpException(\n        {\n          all: 'Неверное имя пользователя или пароль',\n        },\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n\n    return this.emitToken(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Call.html":{"url":"classes/Call.html","title":"class - Call","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Call\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calls/calls.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                callee\n                            \n                            \n                                calleeId\n                            \n                            \n                                calleeWebrtcNumber\n                            \n                            \n                                caller\n                            \n                            \n                                callerId\n                            \n                            \n                                callerWebrtcNumber\n                            \n                            \n                                id\n                            \n                            \n                                record\n                            \n                            \n                                recordId\n                            \n                            \n                                status\n                            \n                            \n                                statusSequence\n                            \n                            \n                                statusTimestampsSequence\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                addStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        callee\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @BelongsTo(undefined, 'calleeId')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calls/calls.model.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        calleeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calls/calls.model.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        calleeWebrtcNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calls/calls.model.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        caller\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @BelongsTo(undefined, 'callerId')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calls/calls.model.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        callerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calls/calls.model.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        callerWebrtcNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calls/calls.model.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({primaryKey: true, autoIncrement: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calls/calls.model.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        record\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HasOne(undefined, 'recordId')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calls/calls.model.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recordId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calls/calls.model.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CallStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calls/calls.model.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusSequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CallStatus[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({defaultValue: undefined, type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calls/calls.model.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        statusTimestampsSequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({defaultValue: undefined, type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/calls/calls.model.ts:29\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        addStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    addStatus(instance)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @BeforeUpdate()@BeforeCreate()\n                \n            \n\n            \n                \n                    Defined in src/calls/calls.model.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    instance\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { isEqual } from 'lodash';\nimport {\n  BeforeCreate,\n  BeforeUpdate,\n  BelongsTo,\n  Column,\n  DataType,\n  ForeignKey,\n  HasOne,\n  Model,\n  Table,\n} from 'sequelize-typescript';\nimport { Record } from 'src/records/records.model';\nimport { User } from 'src/users/users.model';\nimport { CallStatus } from './types';\n\n@Table\nexport class Call extends Model {\n  @Column({ primaryKey: true, autoIncrement: true })\n  id: number;\n\n  @Column\n  status: CallStatus;\n\n  @Column({ defaultValue: [], type: DataType.ARRAY(DataType.STRING) })\n  statusSequence: CallStatus[];\n\n  @Column({ defaultValue: [], type: DataType.ARRAY(DataType.STRING) })\n  statusTimestampsSequence: number[];\n\n  @Column\n  calleeWebrtcNumber: string;\n\n  @Column\n  callerWebrtcNumber: string;\n\n  @ForeignKey(() => User)\n  @Column\n  callerId: number;\n\n  @BelongsTo(() => User, 'callerId')\n  caller: User;\n\n  @ForeignKey(() => User)\n  @Column\n  calleeId: number;\n\n  @BelongsTo(() => User, 'calleeId')\n  callee: User;\n\n  @ForeignKey(() => Record)\n  @Column\n  recordId: number;\n\n  @HasOne(() => Record, 'recordId')\n  record: Record;\n\n  @BeforeUpdate\n  @BeforeCreate\n  static addStatus(instance) {\n    if (instance.dataValues.status !== instance._previousDataValues.status) {\n      instance.dataValues.statusSequence = [\n        ...(instance._previousDataValues.statusSequence || []),\n        instance.status,\n      ];\n      instance.dataValues.statusTimestampsSequence = [\n        ...(instance._previousDataValues.statusTimestampsSequence || []),\n        Date.now(),\n      ];\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CallsModule.html":{"url":"modules/CallsModule.html","title":"module - CallsModule","body":"\n                   \n\n\n\n\n    Modules\n    CallsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CallsModule\n\n\n\ncluster_CallsModule_imports\n\n\n\ncluster_CallsModule_exports\n\n\n\ncluster_CallsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nCallsModule\n\nCallsModule\n\nCallsModule -->\n\nUsersModule->CallsModule\n\n\n\n\n\nCallsService \n\nCallsService \n\nCallsService  -->\n\nCallsModule->CallsService \n\n\n\n\n\nCallsService\n\nCallsService\n\nCallsModule -->\n\nCallsService->CallsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/calls/calls.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CallsService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CallsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { CallsService } from './calls.service';\nimport { Call as CallModel } from './calls.model';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [SequelizeModule.forFeature([CallModel]), UsersModule],\n  providers: [CallsService],\n  exports: [CallsService],\n})\nexport class CallsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CallsService.html":{"url":"injectables/CallsService.html","title":"injectable - CallsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CallsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/calls/calls.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addRecord\n                            \n                            \n                                    Async\n                                beforeApplicationShutdown\n                            \n                            \n                                    Async\n                                createCall\n                            \n                            \n                                    Async\n                                findActiveCallByCallee\n                            \n                            \n                                    Async\n                                findActiveCallBySides\n                            \n                            \n                                    Async\n                                findCallById\n                            \n                            \n                                    Async\n                                updateCallStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(callModel, usersService: UsersService, sequelize: Sequelize)\n                    \n                \n                        \n                            \n                                Defined in src/calls/calls.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sequelize\n                                                  \n                                                        \n                                                                    Sequelize\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addRecord\n                        \n                    \n                \n            \n            \n                \n                    \n                    addRecord(recordId: number, callId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/calls/calls.service.ts:164\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    recordId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        beforeApplicationShutdown\n                        \n                    \n                \n            \n            \n                \n                    \n                    beforeApplicationShutdown()\n                \n            \n\n\n            \n                \n                    Defined in src/calls/calls.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCall\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCall(callPayload: CallConnection)\n                \n            \n\n\n            \n                \n                    Defined in src/calls/calls.service.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callPayload\n                                    \n                                                CallConnection\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findActiveCallByCallee\n                        \n                    \n                \n            \n            \n                \n                    \n                    findActiveCallByCallee(calleeWebrtcNumber: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calls/calls.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    calleeWebrtcNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findActiveCallBySides\n                        \n                    \n                \n            \n            \n                \n                    \n                    findActiveCallBySides(callerWebrtcNumber: string, calleeWebrtcNumber: string)\n                \n            \n\n\n            \n                \n                    Defined in src/calls/calls.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callerWebrtcNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    calleeWebrtcNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findCallById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findCallById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/calls/calls.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateCallStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCallStatus(payload: ChangeCallStatusPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/calls/calls.service.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                ChangeCallStatusPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BeforeApplicationShutdown, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { Sequelize } from 'sequelize-typescript';\nimport { Call as CallModel } from './calls.model';\nimport {\n  CallErrors,\n  CallType,\n  CallStatus,\n  ChangeCallStatusPayload,\n} from './types';\nimport { CallConnection } from 'src/webrtc/types';\nimport { UsersService } from 'src/users/users.service';\nimport { Op } from 'sequelize';\nimport { UserStatuses } from 'src/users/types';\nimport { WsException } from '@nestjs/websockets';\nimport { User as UserModel } from 'src/users/users.model';\n\nconst ACTIVE_FINDER = {\n  [Op.in]: [CallStatus.answerWaiting, CallStatus.active],\n};\n\n@Injectable()\nexport class CallsService implements BeforeApplicationShutdown {\n  constructor(\n    @InjectModel(CallModel)\n    private callModel: typeof CallModel,\n    private usersService: UsersService,\n    private sequelize: Sequelize,\n  ) {}\n\n  async beforeApplicationShutdown() {\n    await this.callModel.update(\n      {\n        status: CallStatus.failed,\n      },\n      {\n        where: {\n          status: ACTIVE_FINDER,\n        },\n        individualHooks: true,\n      },\n    );\n  }\n\n  async findCallById(id: number): Promise {\n    return await this.callModel.findByPk(id, {\n      include: [\n        {\n          model: UserModel,\n          as: 'callee',\n        },\n        {\n          model: UserModel,\n          as: 'caller',\n        },\n      ],\n    });\n  }\n\n  async findActiveCallByCallee(\n    calleeWebrtcNumber: string,\n  ): Promise {\n    return this.callModel.findOne({\n      where: {\n        [Op.and]: [\n          { calleeWebrtcNumber },\n          {\n            status: ACTIVE_FINDER,\n          },\n        ],\n      },\n    });\n  }\n\n  async findActiveCallBySides(\n    callerWebrtcNumber: string,\n    calleeWebrtcNumber: string,\n  ): Promise {\n    return this.callModel.findOne({\n      where: {\n        [Op.and]: [\n          { callerWebrtcNumber },\n          { calleeWebrtcNumber },\n          {\n            status: ACTIVE_FINDER,\n          },\n        ],\n      },\n    });\n  }\n\n  async createCall(callPayload: CallConnection): Promise {\n    let call = null;\n\n    const caller = await this.usersService.findOneByWebrtcNumber(\n      callPayload.callerWebrtcNumber,\n    );\n\n    const callee = await this.usersService.findOneByWebrtcNumber(\n      callPayload.calleeWebrtcNumber,\n    );\n\n    if (!caller) {\n      throw new WsException(CallErrors.WrongCallerWebrtcNumber);\n    }\n\n    if (!callee) {\n      throw new WsException(CallErrors.WrongCalleeWebrtcNumber);\n    }\n\n    if (callee.status === UserStatuses.offline) {\n      throw new WsException(CallErrors.AgentOffline);\n    }\n\n    if (callee.status === UserStatuses.away) {\n      throw new WsException(CallErrors.AgentAway);\n    }\n\n    const activeCall = await this.findActiveCallBySides(\n      callPayload.callerWebrtcNumber,\n      callPayload.calleeWebrtcNumber,\n    );\n\n    if (activeCall) {\n      throw new WsException(CallErrors.Busy);\n    }\n\n    await this.sequelize.transaction(async (t) => {\n      call = await this.callModel.create(\n        {\n          ...callPayload,\n          status: CallStatus.answerWaiting,\n          callerId: caller.id,\n          calleeId: callee.id,\n        },\n        { transaction: t, individualHooks: true },\n      );\n    });\n\n    return await this.findCallById(call.id);\n  }\n\n  async updateCallStatus(\n    payload: ChangeCallStatusPayload,\n  ): Promise {\n    await this.sequelize.transaction(async (t) => {\n      await this.callModel.update(\n        {\n          status: payload.status,\n        },\n        {\n          where: {\n            id: payload.id,\n          },\n          transaction: t,\n          individualHooks: true,\n        },\n      );\n    });\n\n    return await this.findCallById(payload.id);\n  }\n\n  async addRecord(recordId: number, callId: number): Promise {\n    await this.sequelize.transaction(async (t) => {\n      await this.callModel.update(\n        {\n          recordId,\n        },\n        {\n          where: {\n            id: callId,\n          },\n          transaction: t,\n        },\n      );\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslAbilityFactory.html":{"url":"injectables/CaslAbilityFactory.html","title":"injectable - CaslAbilityFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaslAbilityFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/casl/casl.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createForUser\n                        \n                    \n                \n            \n            \n                \ncreateForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/casl/casl.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Ability,\n  AbilityBuilder,\n  AbilityClass,\n  ExtractSubjectType,\n} from '@casl/ability';\nimport { Injectable } from '@nestjs/common';\nimport { Call } from 'src/calls/calls.model';\nimport { Roles, User } from 'src/users/types';\nimport { Action, AppAbility, Subjects } from './types';\n\n@Injectable()\nexport class CaslAbilityFactory {\n  createForUser(user: User) {\n    const { can, cannot, build } = new AbilityBuilder\n    >(Ability as AbilityClass);\n\n    if (user.role === Roles.admin) {\n      can(Action.Manage, 'all');\n    }\n\n    if (Roles.user === user.role) {\n      can(Action.Create, Call.tableName);\n      can(Action.Update, Call.tableName);\n    }\n\n    if (Roles.supervisor === user.role) {\n      can(Action.Manage, Call.tableName);\n    }\n\n    return build({\n      detectSubjectType: (item) =>\n        item.constructor as ExtractSubjectType,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CaslModule.html":{"url":"modules/CaslModule.html","title":"module - CaslModule","body":"\n                   \n\n\n\n\n    Modules\n    CaslModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_imports\n\n\n\ncluster_CaslModule_exports\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\n\n\nCaslModule\n\nCaslModule\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/casl/casl.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CaslAbilityFactory\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CaslAbilityFactory } from './casl.service';\n\n@Module({\n  imports: [CaslAbilityFactory],\n  providers: [CaslAbilityFactory],\n  exports: [CaslAbilityFactory],\n})\nexport class CaslModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EventsGateway.html":{"url":"classes/EventsGateway.html","title":"class - EventsGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EventsGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/events/events.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                answerCall\n                            \n                            \n                                    Async\n                                appendRecord\n                            \n                            \n                                    Async\n                                cancelCall\n                            \n                            \n                                    Async\n                                endCall\n                            \n                            \n                                    Async\n                                failedCall\n                            \n                            \n                                    Async\n                                handleWebrtcNewIce\n                            \n                            \n                                iniSocket\n                            \n                            \n                                    Async\n                                initCall\n                            \n                            \n                                    Async\n                                RejectCall\n                            \n                            \n                                    Async\n                                startRecord\n                            \n                            \n                                    Async\n                                stopRecord\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(webrtcService: WebRTCService, recordsService: RecordsService)\n                    \n                \n                        \n                            \n                                Defined in src/events/events.gateway.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        webrtcService\n                                                  \n                                                        \n                                                                        WebRTCService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        recordsService\n                                                  \n                                                        \n                                                                        RecordsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/events/events.gateway.ts:33\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        answerCall\n                        \n                    \n                \n            \n            \n                \n                    \n                    answerCall(payload: WithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(undefined.ANSWER)\n                \n            \n\n            \n                \n                    Defined in src/events/events.gateway.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        appendRecord\n                        \n                    \n                \n            \n            \n                \n                    \n                    appendRecord(payload: WithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(undefined.APPEND)\n                \n            \n\n            \n                \n                    Defined in src/events/events.gateway.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        cancelCall\n                        \n                    \n                \n            \n            \n                \n                    \n                    cancelCall(payload: WithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(undefined.CANCEL)\n                \n            \n\n            \n                \n                    Defined in src/events/events.gateway.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        endCall\n                        \n                    \n                \n            \n            \n                \n                    \n                    endCall(payload: WithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(undefined.ENDED)\n                \n            \n\n            \n                \n                    Defined in src/events/events.gateway.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        failedCall\n                        \n                    \n                \n            \n            \n                \n                    \n                    failedCall(payload: WithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(undefined.FAILED)\n                \n            \n\n            \n                \n                    Defined in src/events/events.gateway.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleWebrtcNewIce\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleWebrtcNewIce(payload: WithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(undefined.NEW_ICE)\n                \n            \n\n            \n                \n                    Defined in src/events/events.gateway.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        iniSocket\n                        \n                    \n                \n            \n            \n                \niniSocket(payload: WithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(EVENT_TYPES.INIT)\n                \n            \n\n            \n                \n                    Defined in src/events/events.gateway.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        initCall\n                        \n                    \n                \n            \n            \n                \n                    \n                    initCall(payload: WithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(undefined.OFFER)\n                \n            \n\n            \n                \n                    Defined in src/events/events.gateway.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        RejectCall\n                        \n                    \n                \n            \n            \n                \n                    \n                    RejectCall(payload: WithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(undefined.REJECT)\n                \n            \n\n            \n                \n                    Defined in src/events/events.gateway.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        startRecord\n                        \n                    \n                \n            \n            \n                \n                    \n                    startRecord(payload: WithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(undefined.START)\n                \n            \n\n            \n                \n                    Defined in src/events/events.gateway.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stopRecord\n                        \n                    \n                \n            \n            \n                \n                    \n                    stopRecord(payload: WithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage(undefined.STOP)\n                \n            \n\n            \n                \n                    Defined in src/events/events.gateway.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { forwardRef, Inject, UseGuards } from '@nestjs/common';\nimport {\n  MessageBody,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets';\nimport { Server } from 'socket.io';\nimport { WsJwtGuard } from 'src/auth/jwt-socket-auth.guard';\nimport { WithUser } from 'src/auth/types';\nimport {\n  AnswerPayload,\n  CallIDPayload,\n  NewIceCandidate,\n  OfferPayload,\n} from 'src/webrtc/types';\nimport { WebRTCService } from 'src/webrtc/webrtc.service';\nimport { EVENT_TYPES } from './constants';\nimport { CallStatus } from 'src/calls/types';\nimport { consoleBlue } from 'helpers/coloredConsole';\nimport { RecordsService } from 'src/records/records.service';\nimport { AppendRecordPayload } from 'src/records/types';\n\n@UseGuards(WsJwtGuard)\n@WebSocketGateway({\n  cors: {\n    origin: '*',\n  },\n  transports: ['websocket'],\n})\nexport class EventsGateway {\n  @WebSocketServer()\n  server: Server;\n\n  constructor(\n    @Inject(forwardRef(() => WebRTCService))\n    private webrtcService: WebRTCService,\n    @Inject(forwardRef(() => RecordsService))\n    private recordsService: RecordsService,\n  ) {}\n\n  @SubscribeMessage(EVENT_TYPES.SIGNALING.OFFER)\n  async initCall(\n    @MessageBody()\n    payload: WithUser,\n  ): Promise {\n    await this.webrtcService.handleOffer(payload);\n  }\n\n  @SubscribeMessage(EVENT_TYPES.SIGNALING.ANSWER)\n  async answerCall(\n    @MessageBody()\n    payload: WithUser,\n  ): Promise {\n    await this.webrtcService.handleAnswer(payload);\n  }\n\n  @SubscribeMessage(EVENT_TYPES.SIGNALING.ENDED)\n  async endCall(\n    @MessageBody()\n    payload: WithUser,\n  ): Promise {\n    await this.webrtcService.handleEndCall(payload, CallStatus.ended);\n  }\n\n  @SubscribeMessage(EVENT_TYPES.SIGNALING.CANCEL)\n  async cancelCall(\n    @MessageBody()\n    payload: WithUser,\n  ): Promise {\n    await this.webrtcService.handleEndCall(payload, CallStatus.cancelled);\n  }\n\n  @SubscribeMessage(EVENT_TYPES.SIGNALING.REJECT)\n  async RejectCall(\n    @MessageBody()\n    payload: WithUser,\n  ): Promise {\n    await this.webrtcService.handleEndCall(payload, CallStatus.rejected);\n  }\n\n  @SubscribeMessage(EVENT_TYPES.SIGNALING.FAILED)\n  async failedCall(\n    @MessageBody()\n    payload: WithUser,\n  ): Promise {\n    await this.webrtcService.handleEndCall(payload, CallStatus.failed);\n  }\n\n  @SubscribeMessage(EVENT_TYPES.SIGNALING.NEW_ICE)\n  async handleWebrtcNewIce(\n    @MessageBody() payload: WithUser,\n  ): Promise {\n    await this.webrtcService.handleNewIce(payload);\n  }\n\n  @SubscribeMessage(EVENT_TYPES.INIT)\n  iniSocket(@MessageBody() payload: WithUser): void {\n    consoleBlue(`User ${payload.user.username} registered in socket`);\n  }\n\n  @SubscribeMessage(EVENT_TYPES.RECORD.START)\n  async startRecord(\n    @MessageBody() payload: WithUser,\n  ): Promise {\n    await this.recordsService.createRecord(payload);\n  }\n\n  @SubscribeMessage(EVENT_TYPES.RECORD.APPEND)\n  async appendRecord(\n    @MessageBody() payload: WithUser,\n  ): Promise {\n    await this.recordsService.appendRecord(payload);\n  }\n\n  @SubscribeMessage(EVENT_TYPES.RECORD.STOP)\n  async stopRecord(\n    @MessageBody() payload: WithUser,\n  ): Promise {\n    await this.recordsService.stopRecord(payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EventsModule.html":{"url":"modules/EventsModule.html","title":"module - EventsModule","body":"\n                   \n\n\n\n\n    Modules\n    EventsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_imports\n\n\n\ncluster_EventsModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nEventsModule\n\nEventsModule\n\nEventsModule -->\n\nAuthModule->EventsModule\n\n\n\n\n\nCaslModule\n\nCaslModule\n\nEventsModule -->\n\nCaslModule->EventsModule\n\n\n\n\n\nEventsGateway \n\nEventsGateway \n\nEventsGateway  -->\n\nEventsModule->EventsGateway \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/events/events.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CaslModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EventsGateway\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { CaslModule } from 'src/casl/casl.module';\nimport { RecordsModule } from 'src/records/records.module';\nimport { WebRTCModule } from 'src/webrtc/webrtc.module';\nimport { EventsGateway } from './events.gateway';\n\n@Module({\n  imports: [\n    forwardRef(() => WebRTCModule),\n    forwardRef(() => RecordsModule),\n    AuthModule,\n    CaslModule,\n  ],\n  providers: [EventsGateway],\n  exports: [EventsGateway],\n})\nexport class EventsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPolicyHandler.html":{"url":"interfaces/IPolicyHandler.html","title":"interface - IPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/casl/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in src/casl/types.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Ability, InferSubjects } from '@casl/ability';\nimport { User } from 'src/users/types';\n\nexport type Subjects = InferSubjects | 'all';\n\nexport enum Action {\n  Manage = 'manage',\n  Create = 'create',\n  Read = 'read',\n  Update = 'update',\n  Delete = 'delete',\n}\n\nexport type AppAbility = Ability;\n\nexport interface IPolicyHandler {\n  handle(ability: AppAbility): boolean;\n}\n\nexport type PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InitModule.html":{"url":"modules/InitModule.html","title":"module - InitModule","body":"\n                   \n\n\n\n\n    Modules\n    InitModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_InitModule\n\n\n\ncluster_InitModule_exports\n\n\n\ncluster_InitModule_providers\n\n\n\n\nInitService \n\nInitService \n\n\n\nInitModule\n\nInitModule\n\nInitService  -->\n\nInitModule->InitService \n\n\n\n\n\nInitService\n\nInitService\n\nInitModule -->\n\nInitService->InitModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/init/init.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            InitService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            InitService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { User as UserModel } from 'src/users/users.model';\nimport { Secret as SecretModel } from 'src/users/secrets.model';\nimport { InitService } from './init.service';\n\n@Module({\n  imports: [SequelizeModule.forFeature([UserModel, SecretModel])],\n  providers: [InitService],\n  exports: [InitService],\n})\nexport class InitModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InitService.html":{"url":"injectables/InitService.html","title":"injectable - InitService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InitService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/init/init.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                init\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel, secretModel, sequelize: Sequelize)\n                    \n                \n                        \n                            \n                                Defined in src/init/init.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        secretModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sequelize\n                                                  \n                                                        \n                                                                    Sequelize\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        init\n                        \n                    \n                \n            \n            \n                \n                    \n                    init()\n                \n            \n\n\n            \n                \n                    Defined in src/init/init.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { Sequelize } from 'sequelize-typescript';\nimport { User as UserModel } from 'src/users/users.model';\nimport { Secret as SecretModel } from 'src/users/secrets.model';\n\n@Injectable()\nexport class InitService {\n  constructor(\n    @InjectModel(UserModel)\n    private userModel: typeof UserModel,\n    @InjectModel(SecretModel)\n    private secretModel: typeof SecretModel,\n    private sequelize: Sequelize,\n  ) {\n    this.init();\n  }\n  async init() {\n    //const usersCount = await this.userModel.count();\n    const secretsCount = await this.secretModel.count();\n\n    if (!secretsCount) {\n      await this.secretModel.bulkCreate([\n        { name: 'MOTHER' },\n        { name: 'FIRST_PET' },\n        { name: 'FAVOURITE_TEACHER' },\n      ]);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-auth.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { SetMetadata } from '@nestjs/common';\nimport { IS_PUBLIC_KEY } from './constants';\nimport { Reflector } from '@nestjs/core';\n\nexport const Public = () => SetMetadata(IS_PUBLIC_KEY, true);\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    if (isPublic) {\n      return true;\n    }\n\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: AuthResponsePayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                AuthResponsePayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { ConfigService } from '@nestjs/config';\nimport { JWT_SECRET_NAME } from './constants';\nimport { AuthResponsePayload } from './types';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService, config: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: config.get(JWT_SECRET_NAME),\n    });\n  }\n\n  async validate(payload: AuthResponsePayload) {\n    return this.authService.validateUser(payload.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PoliciesGuard.html":{"url":"guards/PoliciesGuard.html","title":"guard - PoliciesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PoliciesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/casl/casl.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                execPolicyHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, caslAbilityFactory: CaslAbilityFactory)\n                    \n                \n                        \n                            \n                                Defined in src/casl/casl.guard.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        caslAbilityFactory\n                                                  \n                                                        \n                                                                        CaslAbilityFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/casl/casl.guard.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        execPolicyHandler\n                        \n                    \n                \n            \n            \n                \n                    \n                    execPolicyHandler(handler: PolicyHandler, ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in src/casl/casl.guard.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    handler\n                                    \n                                                PolicyHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { IS_PUBLIC_KEY } from 'src/auth/constants';\nimport { AppAbility, PolicyHandler } from './types';\nimport { CaslAbilityFactory } from './casl.service';\nimport { CHECK_POLICIES_KEY } from './constants';\n\n@Injectable()\nexport class PoliciesGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private caslAbilityFactory: CaslAbilityFactory,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const isPublic = this.reflector.get(\n      IS_PUBLIC_KEY,\n      context.getHandler(),\n    );\n\n    if (isPublic) return true;\n\n    const policyHandlers =\n      this.reflector.get(\n        CHECK_POLICIES_KEY,\n        context.getHandler(),\n      ) || [];\n\n    const { user } = context.switchToHttp().getRequest();\n    const ability = this.caslAbilityFactory.createForUser(user);\n\n    return policyHandlers.every((handler) =>\n      this.execPolicyHandler(handler, ability),\n    );\n  }\n\n  private execPolicyHandler(handler: PolicyHandler, ability: AppAbility) {\n    if (typeof handler === 'function') {\n      return handler(ability);\n    }\n    return handler.handle(ability);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Record.html":{"url":"classes/Record.html","title":"class - Record","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Record\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/records/records.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                call\n                            \n                            \n                                callId\n                            \n                            \n                                duration\n                            \n                            \n                                id\n                            \n                            \n                                srcCallee\n                            \n                            \n                                srcCaller\n                            \n                            \n                                srcMerged\n                            \n                            \n                                transcriptionCallee\n                            \n                            \n                                transcriptionCalleeFluent\n                            \n                            \n                                transcriptionCaller\n                            \n                            \n                                transcriptionCallerFluent\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        call\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Call\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @BelongsTo(undefined, 'callId')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/records.model.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        callId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/records.model.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        duration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/records.model.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({primaryKey: true, autoIncrement: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/records.model.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        srcCallee\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/records.model.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        srcCaller\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/records.model.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        srcMerged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/records.model.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transcriptionCallee\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Transcription[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HasMany(undefined, 'transcriptionCalleeId')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/records.model.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transcriptionCalleeFluent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Transcription[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HasMany(undefined, 'transcriptionCalleeFluentId')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/records.model.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transcriptionCaller\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Transcription[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HasMany(undefined, 'transcriptionCallerId')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/records.model.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transcriptionCallerFluent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Transcription[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HasMany(undefined, 'transcriptionCallerFluentId')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/records.model.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BelongsTo,\n  Column,\n  DataType,\n  ForeignKey,\n  HasMany,\n  Model,\n  Table,\n} from 'sequelize-typescript';\nimport { Call } from 'src/calls/calls.model';\nimport { Transcription } from './transcription.model';\n\n@Table\nexport class Record extends Model {\n  @Column({ primaryKey: true, autoIncrement: true })\n  id: number;\n\n  @Column\n  srcCaller: string;\n\n  @Column\n  srcCallee: string;\n\n  @Column\n  srcMerged: string;\n\n  @Column({ type: DataType.DECIMAL })\n  duration: number;\n\n  @HasMany(() => Transcription, 'transcriptionCallerId')\n  transcriptionCaller: Transcription[];\n\n  @HasMany(() => Transcription, 'transcriptionCalleeId')\n  transcriptionCallee: Transcription[];\n\n  @HasMany(() => Transcription, 'transcriptionCallerFluentId')\n  transcriptionCallerFluent: Transcription[];\n\n  @HasMany(() => Transcription, 'transcriptionCalleeFluentId')\n  transcriptionCalleeFluent: Transcription[];\n\n  @ForeignKey(() => Call)\n  @Column\n  callId: number;\n\n  @BelongsTo(() => Call, 'callId')\n  call: Call;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RecordsController.html":{"url":"controllers/RecordsController.html","title":"controller - RecordsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RecordsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/records/records.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getRecords\n                            \n                            \n                                    Async\n                                getRecordSrc\n                            \n                            \n                                    Async\n                                getTranscriptionSrc\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getRecords\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRecords(body: RecordFiltersPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(undefined.FULL)\n                \n            \n\n            \n                \n                    Defined in src/records/records.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                RecordFiltersPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getRecordSrc\n                        \n                    \n                \n            \n            \n                \n                    \n                    getRecordSrc(body: SrcPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(undefined.SRC)\n                \n            \n\n            \n                \n                    Defined in src/records/records.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SrcPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTranscriptionSrc\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTranscriptionSrc(body: TranscriptionPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(undefined.TRANSCRIPTION)\n                \n            \n\n            \n                \n                    Defined in src/records/records.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                TranscriptionPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { pick } from 'lodash';\nimport { CallStatus } from 'src/calls/types';\nimport { ROUTES } from 'src/routes.constants';\nimport * as fs from 'fs';\nimport { RecordsService } from './records.service';\nimport {\n  FilteredRecords,\n  RecordFiltersPayload,\n  RecordIncluders,\n  SrcPayload,\n  TranscriptionPayload,\n} from './types';\nimport { TranscriptionUnit } from 'src/SpeechRecognition/types';\nimport { pickTranscriptFields } from './helpers';\n\n@Controller(ROUTES.API.RECORDS.BASE)\nexport class RecordsController {\n  constructor(private recordsService: RecordsService) {}\n\n  @Post(ROUTES.API.RECORDS.FULL)\n  async getRecords(\n    @Body() body: RecordFiltersPayload,\n  ): Promise {\n    const { records, total } = await this.recordsService.findByFilters(\n      { ...body, status: [CallStatus.ended] },\n      RecordIncluders.base,\n    );\n\n    return {\n      total,\n      records: records.map((record) =>\n        pick(record, [\n          'id',\n          'duration',\n          'call.id',\n          'call.status',\n          'call.statusSequence',\n          'call.statusTimestampsSequence',\n          'call.calleeWebrtcNumber',\n          'call.callerWebrtcNumber',\n          'call.callee.username',\n          'call.caller.username',\n          'call.callerId',\n          'call.calleeId',\n        ]),\n      ),\n    };\n  }\n\n  @Post(ROUTES.API.RECORDS.SRC)\n  async getRecordSrc(@Body() body: SrcPayload): Promise {\n    const record = await this.recordsService.findRecordById(body.id);\n\n    if (!record.srcMerged) return null;\n\n    return await new Promise((resolve) =>\n      fs.readFile(record.srcMerged, (_, bin) => resolve(bin)),\n    );\n  }\n\n  @Post(ROUTES.API.RECORDS.TRANSCRIPTION)\n  async getTranscriptionSrc(\n    @Body() body: TranscriptionPayload,\n  ): Promise {\n    const record = await this.recordsService.findRecordById(\n      body.id,\n      RecordIncluders.deep,\n    );\n\n    if (!record.transcriptionCallee || !record.transcriptionCaller)\n      return { caller: null, callee: null };\n\n    return {\n      caller: record.transcriptionCaller.map(pickTranscriptFields),\n      callee: record.transcriptionCallee.map(pickTranscriptFields),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RecordsModule.html":{"url":"modules/RecordsModule.html","title":"module - RecordsModule","body":"\n                   \n\n\n\n\n    Modules\n    RecordsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RecordsModule\n\n\n\ncluster_RecordsModule_exports\n\n\n\ncluster_RecordsModule_providers\n\n\n\ncluster_RecordsModule_imports\n\n\n\n\nCallsModule\n\nCallsModule\n\n\n\nRecordsModule\n\nRecordsModule\n\nRecordsModule -->\n\nCallsModule->RecordsModule\n\n\n\n\n\nSRModule\n\nSRModule\n\nRecordsModule -->\n\nSRModule->RecordsModule\n\n\n\n\n\nRecordsService \n\nRecordsService \n\nRecordsService  -->\n\nRecordsModule->RecordsService \n\n\n\n\n\nRecordsService\n\nRecordsService\n\nRecordsModule -->\n\nRecordsService->RecordsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/records/records.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RecordsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RecordsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CallsModule\n                        \n                        \n                            SRModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RecordsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { CallsModule } from 'src/calls/calls.module';\nimport { SRModule } from 'src/SpeechRecognition/sr.module';\nimport { RecordsController } from './records.controller';\nimport { Record as RecordModel } from './records.model';\nimport { RecordsService } from './records.service';\nimport { Transcription as TranscriptionModel } from './transcription.model';\n\n@Module({\n  imports: [\n    SequelizeModule.forFeature([RecordModel, TranscriptionModel]),\n    CallsModule,\n    SRModule,\n  ],\n  providers: [RecordsService],\n  exports: [RecordsService],\n  controllers: [RecordsController],\n})\nexport class RecordsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RecordsService.html":{"url":"injectables/RecordsService.html","title":"injectable - RecordsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RecordsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/records/records.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                recordFluentTrancriptionSeq\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                appendRecord\n                            \n                            \n                                    Async\n                                createRecord\n                            \n                            \n                                    Async\n                                findByFilters\n                            \n                            \n                                    Async\n                                findRecordById\n                            \n                            \n                                    Async\n                                getExistingRecord\n                            \n                            \n                                    Async\n                                stopRecord\n                            \n                            \n                                    Async\n                                transcriptRecord\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(recordModel, transcriptionModel, callsService: CallsService, srService: SRService, sequelize: Sequelize)\n                    \n                \n                        \n                            \n                                Defined in src/records/records.service.ts:101\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        recordModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        transcriptionModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        callsService\n                                                  \n                                                        \n                                                                        CallsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        srService\n                                                  \n                                                        \n                                                                        SRService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sequelize\n                                                  \n                                                        \n                                                                    Sequelize\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        appendRecord\n                        \n                    \n                \n            \n            \n                \n                    \n                    appendRecord(payload: WithUser)\n                \n            \n\n\n            \n                \n                    Defined in src/records/records.service.ts:221\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createRecord\n                        \n                    \n                \n            \n            \n                \n                    \n                    createRecord(payload: WithUser)\n                \n            \n\n\n            \n                \n                    Defined in src/records/records.service.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByFilters(payload: RecordFilters, includeMode: RecordIncluders)\n                \n            \n\n\n            \n                \n                    Defined in src/records/records.service.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                RecordFilters\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    includeMode\n                                    \n                                                RecordIncluders\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findRecordById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findRecordById(id: number, mode?: RecordIncluders)\n                \n            \n\n\n            \n                \n                    Defined in src/records/records.service.ts:112\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mode\n                                    \n                                                RecordIncluders\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getExistingRecord\n                        \n                    \n                \n            \n            \n                \n                    \n                    getExistingRecord(callId: number, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/records/records.service.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        stopRecord\n                        \n                    \n                \n            \n            \n                \n                    \n                    stopRecord(payload: WithUser)\n                \n            \n\n\n            \n                \n                    Defined in src/records/records.service.ts:249\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transcriptRecord\n                        \n                    \n                \n            \n            \n                \n                    \n                    transcriptRecord(recordId: number, mode: SRMode, side: CallSide, src: string)\n                \n            \n\n\n            \n                \n                    Defined in src/records/records.service.ts:347\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    recordId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mode\n                                    \n                                                SRMode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    side\n                                    \n                                                CallSide\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    src\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        recordFluentTrancriptionSeq\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RecordFluentTrancriptionSeq\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/records/records.service.ts:101\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { Sequelize } from 'sequelize-typescript';\nimport { CallIDPayload } from 'src/webrtc/types';\nimport { WsException } from '@nestjs/websockets';\nimport { WithUser } from 'src/auth/types';\nimport { CallsService } from 'src/calls/calls.service';\nimport {\n  AppendRecordPayload,\n  FilteredRecords,\n  RecordErrors,\n  RecordFilters,\n  RecordFluentTrancriptionSeq,\n  RecordIncluders,\n  RecordType,\n} from './types';\nimport { Record as RecordModel } from './records.model';\nimport { Call as CallModel } from 'src/calls/calls.model';\nimport * as path from 'path';\nimport * as ffmpeg from 'fluent-ffmpeg';\nimport {\n  CHUNK_DURATION,\n  PROCESS_TOTAL_OFFSET,\n  RECORDS_FILE_PATH,\n  TARGET_EXT,\n} from './constants';\nimport { extension } from 'mime-types';\nimport promisify = require('promisify-node');\nimport {\n  buildAppenderSideName,\n  buildTranscriptionForeignId,\n  getCallSideChunkNames,\n  getDuration,\n} from './helpers';\nimport { last, takeWhile } from 'lodash';\nimport { CallSide, CallStatus, CallType } from 'src/calls/types';\nimport { SRService } from 'src/SpeechRecognition/sr.service';\nimport { nanoid } from 'nanoid';\nimport { SRMode, TranscriptionUnit } from 'src/SpeechRecognition/types';\nimport { Transcription as TranscriptionModel } from './transcription.model';\nimport { consoleBlue } from 'helpers/coloredConsole';\nimport { Readable } from 'stream';\nimport { existsSync } from 'fs';\nimport { Where } from 'sequelize/types/utils';\nimport { Op } from 'sequelize';\nimport { User as UserModel } from 'src/users/users.model';\n\nconst promisedFs = promisify('fs');\n\nconst includers = (mode: RecordIncluders) => {\n  const res = [\n    {\n      model: CallModel,\n      as: 'call',\n      include: [\n        {\n          model: UserModel,\n          as: 'caller',\n        },\n        {\n          model: UserModel,\n          as: 'callee',\n        },\n      ],\n    },\n  ] as any;\n\n  if (mode === RecordIncluders.base) return res;\n\n  if ([RecordIncluders.deep, RecordIncluders.all].includes(mode)) {\n    res.push(\n      {\n        model: TranscriptionModel,\n        as: 'transcriptionCaller',\n      },\n      {\n        model: TranscriptionModel,\n        as: 'transcriptionCallee',\n      },\n    );\n  }\n\n  if ([RecordIncluders.fluent, RecordIncluders.all].includes(mode)) {\n    res.push(\n      {\n        model: TranscriptionModel,\n        as: 'transcriptionCallerFluent',\n      },\n      {\n        model: TranscriptionModel,\n        as: 'transcriptionCalleeFluent',\n      },\n    );\n  }\n\n  return res;\n};\n\n@Injectable()\nexport class RecordsService {\n  recordFluentTrancriptionSeq: RecordFluentTrancriptionSeq = {};\n  constructor(\n    @InjectModel(RecordModel)\n    private recordModel: typeof RecordModel,\n    @InjectModel(TranscriptionModel)\n    private transcriptionModel: typeof TranscriptionModel,\n    private callsService: CallsService,\n    private srService: SRService,\n    private sequelize: Sequelize,\n  ) {}\n\n  async findRecordById(\n    id: number,\n    mode?: RecordIncluders,\n  ): Promise {\n    console.log(id);\n    return await this.recordModel.findByPk(id, {\n      include: includers(mode || RecordIncluders.base),\n    });\n  }\n\n  async findByFilters(\n    payload: RecordFilters,\n    includeMode: RecordIncluders,\n  ): Promise {\n    const where = {\n      '$call.callerId$': payload.callersList\n        ? { [Op.in]: payload.callersList }\n        : undefined,\n      '$call.calleeId$': payload.calleesList\n        ? { [Op.in]: payload.calleesList }\n        : undefined,\n      '$call.status$': { [Op.in]: payload.status },\n      duration: {\n        [Op.between]: [payload.duration.from, payload.duration.to],\n      },\n    };\n\n    const total = await this.recordModel.count({\n      where,\n      include: includers(includeMode),\n    });\n\n    const records = await this.recordModel.findAll({\n      where,\n      limit: payload.limit ? Number(payload.limit) : undefined,\n      offset: payload.page\n        ? (Number(payload.page) - 1) * Number(payload.limit)\n        : undefined,\n      include: includers(includeMode),\n    });\n\n    return { total, records };\n  }\n\n  async createRecord(\n    payload: WithUser,\n  ): Promise {\n    const call = await this.callsService.findCallById(payload.callId);\n\n    if (!call) {\n      throw new WsException(RecordErrors.WrongCallToAttach);\n    }\n\n    if (call.recordId) {\n      throw new WsException(RecordErrors.RecordExist);\n    }\n\n    let record = null;\n    await this.sequelize.transaction(async (t) => {\n      record = await this.recordModel.create(\n        {\n          callId: call.id,\n        },\n        { transaction: t },\n      );\n\n      if (record) {\n        await this.callsService.addRecord(record.id, call.id);\n\n        const srcDirPath = path.resolve(RECORDS_FILE_PATH, String(record.id));\n\n        await promisedFs.mkdir(srcDirPath);\n      }\n    });\n\n    return await this.findRecordById(record.id);\n  }\n\n  async getExistingRecord(\n    callId: number,\n    userId: number,\n  ): Promise {\n    const call = await this.callsService.findCallById(callId);\n\n    if (!call) {\n      throw new WsException(RecordErrors.WrongCallToAttach);\n    }\n\n    const side = userId === call.callerId ? CallSide.Caller : CallSide.Callee;\n\n    const record = await this.findRecordById(call.recordId);\n\n    const recordPath = record?.id\n      ? path.resolve(RECORDS_FILE_PATH, String(record.id))\n      : '';\n\n    return {\n      recordPath,\n      call,\n      record,\n      side,\n    };\n  }\n\n  async appendRecord(payload: WithUser): Promise {\n    const { recordPath, record, side } = await this.getExistingRecord(\n      payload.callId,\n      payload.user.id,\n    );\n\n    const format = extension(payload.format);\n\n    if (!format || !recordPath) return;\n\n    const sideChunks = await getCallSideChunkNames(recordPath, side);\n\n    const lastChunkNumber: number = sideChunks.length\n      ? parseInt(last(sideChunks))\n      : 0;\n\n    const tmpPath = path.resolve(\n      recordPath,\n      `${lastChunkNumber + 1}_${buildAppenderSideName(side)}_tmp.mp3`,\n    );\n\n    ffmpeg(Readable.from(Buffer.from(new Uint8Array(payload.recordBlob)))).save(\n      tmpPath,\n    );\n\n    this.transcriptRecord(record.id, SRMode.fluent, side, tmpPath);\n  }\n\n  async stopRecord(payload: WithUser): Promise {\n    await new Promise((resolve) =>\n      setTimeout(resolve, CHUNK_DURATION + PROCESS_TOTAL_OFFSET),\n    );\n\n    const { side, record, recordPath } = await this.getExistingRecord(\n      payload.callId,\n      payload.user.id,\n    );\n\n    const targetPath = path.resolve(\n      recordPath,\n      `${buildAppenderSideName(side)}.${TARGET_EXT}`,\n    );\n\n    const sideChunks = await getCallSideChunkNames(recordPath, side);\n\n    if (!sideChunks.length) {\n      return;\n    }\n\n    await promisedFs.writeFile(targetPath, '');\n\n    let fn = ffmpeg();\n\n    sideChunks.forEach((chunk) => {\n      fn = fn.input(path.resolve(recordPath, chunk));\n    });\n\n    await new Promise((resolve, reject) => {\n      fn.format(TARGET_EXT)\n        .mergeToFile(targetPath)\n        .on('end', () => {\n          resolve();\n        })\n        .on('error', (e) => {\n          console.log('mergeReject', e);\n          reject();\n        });\n    });\n\n    const callerPath = path.resolve(\n      recordPath,\n      `${buildAppenderSideName(CallSide.Callee)}.${TARGET_EXT}`,\n    );\n\n    const calleePath = path.resolve(\n      recordPath,\n      `${buildAppenderSideName(CallSide.Caller)}.${TARGET_EXT}`,\n    );\n\n    const mergedPath = path.resolve(recordPath, `srcMerged.${TARGET_EXT}`);\n    await this.sequelize.transaction(async (t) => {\n      await this.recordModel.update(\n        {\n          [buildAppenderSideName(side)]: targetPath,\n        },\n        { transaction: t, where: { id: record.id } },\n      );\n\n      if (\n        existsSync(callerPath) &&\n        existsSync(calleePath) &&\n        !existsSync(mergedPath)\n      ) {\n        await new Promise((resolve) =>\n          ffmpeg()\n            .input(callerPath)\n            .input(calleePath)\n            .complexFilter([\n              {\n                filter: 'amix',\n                options: { inputs: 2, duration: 'longest' },\n              },\n            ])\n            .on('end', resolve)\n            .saveToFile(mergedPath),\n        );\n\n        const duration = await getDuration(mergedPath);\n\n        await this.recordModel.update(\n          {\n            srcMerged: mergedPath,\n            duration,\n          },\n          { transaction: t, where: { id: record.id } },\n        );\n      }\n    });\n\n    if (this.recordFluentTrancriptionSeq[record.id]) {\n      delete this.recordFluentTrancriptionSeq[record.id];\n    }\n\n    this.transcriptRecord(record.id, SRMode.deep, side, targetPath);\n  }\n\n  async transcriptRecord(\n    recordId: number,\n    mode: SRMode,\n    side: CallSide,\n    src: string,\n  ) {\n    const taskId = nanoid();\n\n    if (mode === SRMode.fluent) {\n      if (!this.recordFluentTrancriptionSeq[recordId]) {\n        this.recordFluentTrancriptionSeq[recordId] = {};\n      }\n\n      if (!this.recordFluentTrancriptionSeq[recordId][side]) {\n        this.recordFluentTrancriptionSeq[recordId][side] = [];\n      }\n\n      this.recordFluentTrancriptionSeq[recordId][side].push({ taskId, src });\n    }\n\n    const result = await this.srService.speechToText(src, mode, taskId);\n    const record = await this.findRecordById(recordId);\n\n    let unitsToWrite: TranscriptionUnit[] = [];\n\n    if (mode === SRMode.fluent) {\n      this.recordFluentTrancriptionSeq[recordId][side] =\n        this.recordFluentTrancriptionSeq[recordId][side].map((task) =>\n          task.taskId === taskId ? { ...task, result: result.result } : task,\n        );\n\n      const tasksToWrite = takeWhile(\n        this.recordFluentTrancriptionSeq[recordId][side],\n        (value) => !!value.result,\n      );\n\n      const transcripts =\n        side === CallSide.Callee\n          ? record.transcriptionCalleeFluent\n          : record.transcriptionCallerFluent;\n      const lastTimestamp = transcripts?.length ? last(transcripts).end : 0;\n\n      for (let i = 0; i  {\n          unitsToWrite.push({\n            ...unit,\n            start: Number(lastTimestamp) + Number(unit.start),\n            end:\n              Number(lastTimestamp) +\n              Number(inx === arr.length - 1 ? duration : unit.end),\n          });\n        });\n      }\n    } else {\n      unitsToWrite = result.result;\n    }\n\n    await this.sequelize.transaction(async (t) => {\n      await this.transcriptionModel.bulkCreate(\n        unitsToWrite.map((unit) => ({\n          ...unit,\n          [buildTranscriptionForeignId(side, mode)]: record.id,\n        })),\n        { transaction: t },\n      );\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SRModule.html":{"url":"modules/SRModule.html","title":"module - SRModule","body":"\n                   \n\n\n\n\n    Modules\n    SRModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SRModule\n\n\n\ncluster_SRModule_providers\n\n\n\ncluster_SRModule_exports\n\n\n\n\nSRService \n\nSRService \n\n\n\nSRModule\n\nSRModule\n\nSRService  -->\n\nSRModule->SRService \n\n\n\n\n\nSRService\n\nSRService\n\nSRModule -->\n\nSRService->SRModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/SpeechRecognition/sr.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SRService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SRService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SRService } from './sr.service';\n\n@Module({\n  imports: [],\n  providers: [SRService],\n  exports: [SRService],\n})\nexport class SRModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SRService.html":{"url":"injectables/SRService.html","title":"injectable - SRService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SRService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/SpeechRecognition/sr.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                srPool\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                speechToText\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/SpeechRecognition/sr.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        speechToText\n                        \n                    \n                \n            \n            \n                \n                    \n                    speechToText(src: string, mode: SRMode, id?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/SpeechRecognition/sr.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    src\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    mode\n                                    \n                                                SRMode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        srPool\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WorkersPool\n\n                    \n                \n                    \n                        \n                                Defined in src/SpeechRecognition/sr.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { resolve } from 'path';\nimport { WorkersPool } from 'src/workers/pool';\nimport { SR_POOL_LIFETIME, SR_POOL_NUMBER } from './constants';\nimport { SRMode, SROutput, SRResult, SRTask } from './types';\n\nconst SRProcessPath = resolve(\n  'src',\n  'SpeechRecognition',\n  'scripts',\n  'speechToText.process.js',\n);\n\n@Injectable()\nexport class SRService {\n  srPool: WorkersPool;\n  constructor() {\n    this.srPool = new WorkersPool({\n      poolSize: SR_POOL_NUMBER,\n      poolLifetime: SR_POOL_LIFETIME,\n      processPath: SRProcessPath,\n    });\n  }\n\n  async speechToText(\n    src: string,\n    mode: SRMode,\n    id?: string,\n  ): Promise {\n    return await new Promise((resolve) => {\n      this.srPool.planTask({\n        src,\n        mode,\n        callback: (res) => resolve({ ...res, id }),\n      });\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Secret.html":{"url":"classes/Secret.html","title":"class - Secret","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Secret\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/secrets.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({primaryKey: true, autoIncrement: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/secrets.model.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({primaryKey: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/secrets.model.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HasMany(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/secrets.model.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, HasMany, Model, Table } from 'sequelize-typescript';\nimport { User } from './users.model';\n\n@Table\nexport class Secret extends Model {\n  @Column({ primaryKey: true, autoIncrement: true })\n  id: number;\n\n  @Column({ primaryKey: true })\n  name: string;\n\n  @HasMany(() => User)\n  users: User[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Transcription.html":{"url":"classes/Transcription.html","title":"class - Transcription","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Transcription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/records/transcription.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conf\n                            \n                            \n                                end\n                            \n                            \n                                id\n                            \n                            \n                                record\n                            \n                            \n                                start\n                            \n                            \n                                transcriptionCalleeFluentId\n                            \n                            \n                                transcriptionCalleeId\n                            \n                            \n                                transcriptionCallerFluentId\n                            \n                            \n                                transcriptionCallerId\n                            \n                            \n                                type\n                            \n                            \n                                word\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conf\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/transcription.model.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        end\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/transcription.model.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({primaryKey: true, autoIncrement: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/transcription.model.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        record\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @BelongsTo(undefined, 'recordId')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/transcription.model.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        start\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/transcription.model.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transcriptionCalleeFluentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/transcription.model.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transcriptionCalleeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/transcription.model.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transcriptionCallerFluentId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/transcription.model.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        transcriptionCallerId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/transcription.model.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/transcription.model.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        word\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/records/transcription.model.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BelongsTo,\n  Column,\n  DataType,\n  ForeignKey,\n  Model,\n  Table,\n} from 'sequelize-typescript';\nimport { Record } from './records.model';\n\n@Table\nexport class Transcription extends Model {\n  @Column({ primaryKey: true, autoIncrement: true })\n  id: number;\n\n  @Column({ type: DataType.DECIMAL })\n  conf: number;\n\n  @Column({ type: DataType.DECIMAL })\n  start: number;\n\n  @Column({ type: DataType.DECIMAL })\n  end: number;\n\n  @Column\n  word: string;\n\n  @Column\n  type: string;\n\n  @ForeignKey(() => Record)\n  @Column\n  transcriptionCallerId: number;\n\n  @ForeignKey(() => Record)\n  @Column\n  transcriptionCalleeId: number;\n\n  @ForeignKey(() => Record)\n  @Column\n  transcriptionCallerFluentId: number;\n\n  @ForeignKey(() => Record)\n  @Column\n  transcriptionCalleeFluentId: number;\n\n  @BelongsTo(() => Record, 'recordId')\n  record: Record;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/types.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                passwordHash\n                            \n                            \n                                role\n                            \n                            \n                                secret\n                            \n                            \n                                secretAnswer\n                            \n                            \n                                status\n                            \n                            \n                                username\n                            \n                            \n                                webrtcNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordHash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Secret\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        secretAnswer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatuses\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        webrtcNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/types.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export const enum Roles {\n  admin = 'admin',\n  user = 'user',\n  supervisor = 'supervisor',\n}\n\nexport class User {\n  id: number;\n  username: string;\n  passwordHash: string;\n  role: Roles;\n  secret: Secret;\n  secretAnswer: string;\n  email: string;\n  webrtcNumber: string;\n  status: UserStatuses;\n}\n\nexport type Secret = {\n  name: string;\n  users?: User[];\n};\n\nexport enum UserStatuses {\n  online = 'online',\n  offline = 'offline',\n  away = 'away',\n}\n\nexport type FindUsersPayload = {\n  username: string;\n  limit?: string;\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User-1.html":{"url":"classes/User-1.html","title":"class - User-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                calls\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                passwordHash\n                            \n                            \n                                role\n                            \n                            \n                                secret\n                            \n                            \n                                secretAnswer\n                            \n                            \n                                secretId\n                            \n                            \n                                status\n                            \n                            \n                                username\n                            \n                            \n                                webrtcNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        calls\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Call[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HasMany(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({primaryKey: true, autoIncrement: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordHash\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Roles\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({defaultValue: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Secret\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @BelongsTo(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        secretAnswer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        secretId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)@Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatuses\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({defaultValue: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        webrtcNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BelongsTo,\n  Column,\n  ForeignKey,\n  HasMany,\n  IsEmail,\n  Model,\n  Table,\n} from 'sequelize-typescript';\nimport { Roles, UserStatuses } from './types';\nimport { Secret } from './secrets.model';\nimport { Call } from 'src/calls/calls.model';\n\n@Table\nexport class User extends Model {\n  @Column({ primaryKey: true, autoIncrement: true })\n  id: number;\n\n  @Column\n  username: string;\n\n  @Column({ defaultValue: UserStatuses.offline })\n  status: UserStatuses;\n\n  @Column\n  passwordHash: string;\n\n  @Column({ unique: true })\n  webrtcNumber: string;\n\n  @Column({ defaultValue: Roles.user })\n  role: Roles;\n\n  @Column\n  secretAnswer: string;\n\n  @IsEmail\n  @Column\n  email: string;\n\n  @ForeignKey(() => Secret)\n  @Column\n  secretId: number;\n\n  @BelongsTo(() => Secret)\n  secret: Secret;\n\n  @HasMany(() => Call)\n  calls: Call[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers(body: FindUsersPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                FindUsersPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ROUTES } from 'src/routes.constants';\nimport { FindUsersPayload, User } from './types';\nimport { UsersService } from './users.service';\n\n@Controller(ROUTES.API.USERS.BASE)\nexport class UsersController {\n  constructor(private usersService: UsersService) {}\n\n  @Post()\n  async getUsers(@Body() body: FindUsersPayload): Promise {\n    return await this.usersService.findByFilters(body);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { UsersService } from './users.service';\nimport { User as UserModel } from './users.model';\nimport { Secret as SecretModel } from './secrets.model';\nimport { UsersController } from './users.controller';\n\n@Module({\n  imports: [SequelizeModule.forFeature([UserModel, SecretModel])],\n  providers: [UsersService],\n  exports: [UsersService],\n  controllers: [UsersController],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                beforeApplicationShutdown\n                            \n                            \n                                    Async\n                                createOne\n                            \n                            \n                                    Async\n                                findByFilters\n                            \n                            \n                                    Async\n                                findByNameAndEmail\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByWebrtcNumber\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel, secretModel, sequelize: Sequelize, config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        secretModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sequelize\n                                                  \n                                                        \n                                                                    Sequelize\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        beforeApplicationShutdown\n                        \n                    \n                \n            \n            \n                \n                    \n                    beforeApplicationShutdown()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    createOne(authPayload: AuthPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authPayload\n                                    \n                                                AuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByFilters\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByFilters(payload: FindUsersPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                FindUsersPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByNameAndEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByNameAndEmail(username: string, email?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByWebrtcNumber\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByWebrtcNumber(webrtcNumber: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    webrtcNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateStatus(changeStatusPayload: WithUser)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changeStatusPayload\n                                    \n                                            WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BeforeApplicationShutdown,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport * as bcrypt from 'bcrypt';\nimport { FindUsersPayload, User, UserStatuses } from './types';\nimport { User as UserModel } from './users.model';\nimport { Sequelize } from 'sequelize-typescript';\nimport { ConfigService } from '@nestjs/config';\nimport { BCRYPT_SAULT } from './constants';\nimport { AuthPayload, WithUser } from 'src/auth/types';\nimport { Op } from 'sequelize';\nimport { Secret as SecretModel } from './secrets.model';\nimport { ChangeStatusPayload } from 'src/agent/types';\nimport { Where } from 'sequelize/types/utils';\n\n@Injectable()\nexport class UsersService implements BeforeApplicationShutdown {\n  constructor(\n    @InjectModel(UserModel)\n    private userModel: typeof UserModel,\n    @InjectModel(SecretModel)\n    private secretModel: typeof SecretModel,\n    private sequelize: Sequelize,\n    private config: ConfigService,\n  ) {}\n\n  async beforeApplicationShutdown() {\n    await this.userModel.update(\n      {\n        status: UserStatuses.offline,\n      },\n      {\n        where: {\n          status: { [Op.not]: UserStatuses.offline },\n        },\n      },\n    );\n  }\n\n  async findOne(id: number): Promise {\n    return this.userModel.findByPk(id);\n  }\n\n  async findOneByWebrtcNumber(webrtcNumber: string): Promise {\n    return this.userModel.findOne({ where: { webrtcNumber: webrtcNumber } });\n  }\n\n  async findByFilters(payload: FindUsersPayload): Promise {\n    const where: { [key: string]: Where } = {};\n\n    if (payload.username) {\n      where.username = this.sequelize.where(\n        this.sequelize.fn('LOWER', this.sequelize.col('username')),\n        'LIKE',\n        '%' + payload.username.toLowerCase() + '%',\n      );\n    }\n\n    return this.userModel.findAll({\n      where,\n      limit: payload.limit ? Number(payload.limit) : undefined,\n    });\n  }\n\n  async findByNameAndEmail(\n    username: string,\n    email?: string,\n  ): Promise {\n    const filterhObj = email\n      ? { [Op.or]: [{ username }, { email }] }\n      : { username };\n\n    return this.userModel.findOne({ where: filterhObj });\n  }\n\n  async createOne(authPayload: AuthPayload): Promise {\n    const isExist = await this.findByNameAndEmail(\n      authPayload.username,\n      authPayload.email,\n    );\n\n    if (isExist) {\n      throw new HttpException(\n        {\n          all: 'Такой пользователь уже существует',\n        },\n        HttpStatus.UNPROCESSABLE_ENTITY,\n      );\n    }\n\n    let user = null;\n    const password = authPayload.password;\n\n    delete authPayload.password;\n    await this.sequelize.transaction(async (t) => {\n      user = await this.userModel.create(\n        {\n          ...authPayload,\n          passwordHash: bcrypt.hashSync(\n            password,\n            this.config.get(BCRYPT_SAULT),\n          ),\n        },\n        { transaction: t },\n      );\n\n      const secret = await this.secretModel.findOne({\n        where: { name: authPayload.secret },\n      });\n\n      user.setSecret(secret);\n    });\n\n    return user;\n  }\n\n  async updateStatus(\n    changeStatusPayload: WithUser,\n  ): Promise {\n    let updatedUser: User | null = null;\n\n    await this.sequelize.transaction(async (t) => {\n      const [_, user] = await this.userModel.update(\n        {\n          status: changeStatusPayload.status,\n        },\n        {\n          where: {\n            id: changeStatusPayload.user.id,\n          },\n          returning: true,\n          transaction: t,\n        },\n      );\n\n      if (user) updatedUser = user[0];\n    });\n\n    return updatedUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WebRTCModule.html":{"url":"modules/WebRTCModule.html","title":"module - WebRTCModule","body":"\n                   \n\n\n\n\n    Modules\n    WebRTCModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WebRTCModule\n\n\n\ncluster_WebRTCModule_exports\n\n\n\ncluster_WebRTCModule_providers\n\n\n\n\nWebRTCService \n\nWebRTCService \n\n\n\nWebRTCModule\n\nWebRTCModule\n\nWebRTCService  -->\n\nWebRTCModule->WebRTCService \n\n\n\n\n\nWebRTCService\n\nWebRTCService\n\nWebRTCModule -->\n\nWebRTCService->WebRTCModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/webrtc/webrtc.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WebRTCService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            WebRTCService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { CallsModule } from 'src/calls/calls.module';\nimport { EventsModule } from 'src/events/events.module';\nimport { WebRTCService } from './webrtc.service';\n\n@Module({\n  imports: [forwardRef(() => EventsModule), forwardRef(() => CallsModule)],\n  providers: [WebRTCService],\n  exports: [WebRTCService],\n})\nexport class WebRTCModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebRTCService.html":{"url":"injectables/WebRTCService.html","title":"injectable - WebRTCService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WebRTCService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/webrtc/webrtc.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkTimeExceed\n                            \n                            \n                                    Async\n                                handleAnswer\n                            \n                            \n                                    Async\n                                handleEndCall\n                            \n                            \n                                    Async\n                                handleNewIce\n                            \n                            \n                                    Async\n                                handleOffer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eventsGateway: EventsGateway, callsService: CallsService)\n                    \n                \n                        \n                            \n                                Defined in src/webrtc/webrtc.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eventsGateway\n                                                  \n                                                        \n                                                                        EventsGateway\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        callsService\n                                                  \n                                                        \n                                                                        CallsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkTimeExceed\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkTimeExceed(callId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/webrtc/webrtc.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    callId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleAnswer\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleAnswer(payload: WithUser)\n                \n            \n\n\n            \n                \n                    Defined in src/webrtc/webrtc.service.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleEndCall\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleEndCall(payload: WithUser, status: CallStatus)\n                \n            \n\n\n            \n                \n                    Defined in src/webrtc/webrtc.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                CallStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleNewIce\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleNewIce(payload: WithUser)\n                \n            \n\n\n            \n                \n                    Defined in src/webrtc/webrtc.service.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleOffer\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleOffer(payload: WithUser)\n                \n            \n\n\n            \n                \n                    Defined in src/webrtc/webrtc.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            WithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { pick } from 'lodash';\nimport { roomPrefix } from 'src/auth/helpers';\nimport { WithUser } from 'src/auth/types';\nimport { CallsService } from 'src/calls/calls.service';\nimport { CallStatus } from 'src/calls/types';\nimport { EVENT_TYPES } from 'src/events/constants';\nimport { EventsGateway } from 'src/events/events.gateway';\nimport { TIME_EXCEED_LIMIT } from './constants';\nimport {\n  AnswerPayload,\n  CallIDPayload,\n  NewIceCandidate,\n  OfferPayload,\n} from './types';\n\n@Injectable()\nexport class WebRTCService {\n  constructor(\n    @Inject(forwardRef(() => EventsGateway))\n    private eventsGateway: EventsGateway,\n    private callsService: CallsService,\n  ) {}\n\n  async checkTimeExceed(callId: number) {\n    setTimeout(async () => {\n      const call = await this.callsService.findCallById(callId);\n\n      if (call && call.status === CallStatus.answerWaiting) {\n        this.callsService.updateCallStatus({\n          status: CallStatus.timeExceeded,\n          id: callId,\n        });\n\n        this.eventsGateway.server\n          .to(roomPrefix(call.calleeId))\n          .to(roomPrefix(call.callerId))\n          .emit(EVENT_TYPES.SIGNALING.TIME_EXCEED);\n\n        this.eventsGateway.server\n          .to(roomPrefix(call.calleeId))\n          .to(roomPrefix(call.calleeId))\n          .emit(EVENT_TYPES.CALL.CHANGE, {\n            call: null,\n          });\n      }\n    }, TIME_EXCEED_LIMIT);\n  }\n\n  async handleOffer(payload: WithUser) {\n    const call = await this.callsService.createCall({\n      calleeWebrtcNumber: payload.callNumber,\n      callerWebrtcNumber: payload.user.webrtcNumber,\n    });\n\n    this.checkTimeExceed(call.id);\n\n    if (!call.calleeId || !call.calleeId) {\n      this.callsService.updateCallStatus({\n        id: call.id,\n        status: CallStatus.failed,\n      });\n\n      this.eventsGateway.server\n        .to(roomPrefix(payload.user.id))\n        .emit(EVENT_TYPES.SIGNALING.FAILED, {\n          callId: call.id,\n        });\n\n      this.eventsGateway.server\n        .to(roomPrefix(call.calleeId))\n        .to(roomPrefix(call.calleeId))\n        .emit(EVENT_TYPES.CALL.CHANGE, {\n          call: null,\n        });\n\n      return;\n    }\n\n    this.eventsGateway.server\n      .to(roomPrefix(call.calleeId))\n      .emit(EVENT_TYPES.SIGNALING.OFFER, {\n        offer: payload.offer,\n      });\n\n    this.eventsGateway.server\n      .to(roomPrefix(call.calleeId))\n      .to(roomPrefix(call.callerId))\n      .emit(EVENT_TYPES.CALL.CHANGE, {\n        call: {\n          callee: pick(call.callee, ['username', 'webrtcNumber', 'id']),\n          caller: pick(call.caller, ['username', 'webrtcNumber', 'id']),\n          ...pick(call, [\n            'status',\n            'statusSequence',\n            'statusTimestampsSequence',\n            'id',\n          ]),\n        },\n      });\n  }\n\n  async handleAnswer(payload: WithUser) {\n    const existingCall = await this.callsService.findActiveCallByCallee(\n      payload.user.webrtcNumber,\n    );\n\n    const updatedCall = await this.callsService.updateCallStatus({\n      id: existingCall.id,\n      status: CallStatus.active,\n    });\n\n    this.eventsGateway.server\n      .to(roomPrefix(updatedCall.callerId))\n      .emit(EVENT_TYPES.SIGNALING.ANSWER, {\n        answer: payload.answer,\n      });\n\n    this.eventsGateway.server\n      .to(roomPrefix(updatedCall.callerId))\n      .to(roomPrefix(updatedCall.calleeId))\n      .emit(EVENT_TYPES.CALL.CHANGE, {\n        call: updatedCall,\n      });\n  }\n\n  async handleEndCall(payload: WithUser, status: CallStatus) {\n    const existingCall = await this.callsService.findCallById(payload.callId);\n\n    if (!existingCall) {\n      return;\n    }\n\n    this.callsService.updateCallStatus({\n      status,\n      id: existingCall.id,\n    });\n\n    if (status === CallStatus.cancelled) {\n      this.eventsGateway.server\n        .to(roomPrefix(existingCall.calleeId))\n        .emit(EVENT_TYPES.SIGNALING.CANCEL);\n    }\n\n    if (status === CallStatus.rejected) {\n      this.eventsGateway.server\n        .to(roomPrefix(existingCall.callerId))\n        .emit(EVENT_TYPES.SIGNALING.REJECT);\n    }\n\n    if (status === CallStatus.ended) {\n      const otherSide = [existingCall.callee, existingCall.caller].find(\n        (side) => side.id !== payload.user.id,\n      );\n\n      this.eventsGateway.server\n        .to(roomPrefix(otherSide.id))\n        .emit(EVENT_TYPES.SIGNALING.ENDED);\n    }\n\n    this.eventsGateway.server\n      .to(roomPrefix(existingCall.calleeId))\n      .to(roomPrefix(existingCall.callerId))\n      .emit(EVENT_TYPES.CALL.CHANGE, { call: null });\n  }\n\n  async handleNewIce(payload: WithUser) {\n    const existingCall = await this.callsService.findCallById(payload.callId);\n\n    if (!existingCall) {\n      return;\n    }\n\n    this.eventsGateway.server\n      .to(\n        roomPrefix(\n          existingCall.calleeId === payload.user.id\n            ? existingCall.callerId\n            : existingCall.calleeId,\n        ),\n      )\n      .emit(EVENT_TYPES.SIGNALING.NEW_ICE, {\n        iceCandidate: payload.iceCandidate,\n      });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WorkersPool.html":{"url":"classes/WorkersPool.html","title":"class - WorkersPool","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WorkersPool\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/workers/pool.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                controller\n                            \n                            \n                                    Private\n                                pool\n                            \n                            \n                                    Private\n                                taskSequence\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                planTask\n                            \n                            \n                                shutdown\n                            \n                            \n                                tryRunTask\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(poolOptions: PoolOptions)\n                    \n                \n                        \n                            \n                                Defined in src/workers/pool.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        poolOptions\n                                                  \n                                                        \n                                                                        PoolOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        controller\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AbortController\n\n                    \n                \n                    \n                        \n                                Defined in src/workers/pool.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        pool\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Worker[]\n\n                    \n                \n                    \n                        \n                                Defined in src/workers/pool.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        taskSequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :     yallist\n\n                    \n                \n                \n                    \n                        Default value : yallist.create()\n                    \n                \n                    \n                        \n                                Defined in src/workers/pool.ts:10\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        planTask\n                        \n                    \n                \n            \n            \n                \nplanTask(task: T)\n                \n            \n\n\n            \n                \n                    Defined in src/workers/pool.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    task\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shutdown\n                        \n                    \n                \n            \n            \n                \nshutdown()\n                \n            \n\n\n            \n                \n                    Defined in src/workers/pool.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tryRunTask\n                        \n                    \n                \n            \n            \n                \ntryRunTask()\n                \n            \n\n\n            \n                \n                    Defined in src/workers/pool.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { fork } from 'child_process';\nimport { range } from 'lodash';\nimport * as yallist from 'yallist';\nimport { STANDARD_POOL_NUMBER, STANDARD_POOL_LIFETIME } from './constants';\nimport { PoolOptions, Task, Worker } from './types';\n\nexport class WorkersPool {\n  private pool: Worker[];\n  private controller: AbortController;\n  private taskSequence: yallist = yallist.create();\n  constructor(poolOptions: PoolOptions) {\n    this.controller = new AbortController();\n    this.pool = [];\n\n    range(poolOptions.poolSize || STANDARD_POOL_NUMBER).forEach(() => {\n      this.pool.push({\n        worker: fork(poolOptions.processPath, [], {\n          timeout: poolOptions.poolLifetime || STANDARD_POOL_LIFETIME,\n          signal: this.controller.signal,\n        }),\n        isFree: true,\n      });\n    });\n  }\n\n  planTask(task: T) {\n    console.log('planTask', task);\n    this.taskSequence.push(task);\n\n    this.tryRunTask();\n  }\n\n  tryRunTask() {\n    const freeWorker = this.pool.find((worker) => worker.isFree);\n    const availableTask = this.taskSequence.shift();\n\n    console.log('tryRunTask', availableTask);\n\n    if (!(freeWorker && availableTask)) return;\n\n    freeWorker.isFree = false;\n    freeWorker.worker.send(availableTask);\n\n    const handler = (result: U) => {\n      freeWorker.isFree = true;\n      availableTask.callback(result);\n      this.tryRunTask();\n\n      console.log('task done', freeWorker.worker.pid, availableTask);\n\n      freeWorker.worker.removeListener('message', handler);\n    };\n\n    freeWorker.worker.addListener('message', handler);\n  }\n\n  shutdown() {\n    this.controller.abort();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/WsJwtGuard.html":{"url":"guards/WsJwtGuard.html","title":"guard - WsJwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    WsJwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/jwt-socket-auth.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-socket-auth.guard.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-socket-auth.guard.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { WsException } from '@nestjs/websockets';\nimport { Socket } from 'socket.io';\nimport { AuthService } from '../auth/auth.service';\n\nimport { AuthResponsePayload } from './types';\nimport { User } from 'src/users/types';\nimport { roomPrefix } from './helpers';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class WsJwtGuard implements CanActivate {\n  constructor(\n    private authService: AuthService,\n    private jwtService: JwtService,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    try {\n      const client: Socket = context.switchToWs().getClient();\n      const authToken: string = client.handshake?.query?.token as string;\n\n      const decoded = this.jwtService.decode(authToken) as AuthResponsePayload;\n\n      const user: Omit =\n        await this.authService.validateUser(decoded.userId);\n\n      if (!client.rooms.has(roomPrefix(user.id)))\n        await client.join(roomPrefix(user.id));\n\n      context.switchToWs().getData().user = user;\n\n      return Boolean(user);\n    } catch (err) {\n      throw new WsException({\n        status: HttpStatus.UNAUTHORIZED,\n        message: err.message,\n      });\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                helpers/coloredConsole.ts\n            \n            variable\n            consoleBlue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/SpeechRecognition/constants.ts\n            \n            variable\n            SR_POOL_LIFETIME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/SpeechRecognition/constants.ts\n            \n            variable\n            SR_POOL_NUMBER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/SpeechRecognition/sr.service.ts\n            \n            injectable\n            SRService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/SpeechRecognition/sr.service.ts\n            \n            variable\n            SRProcessPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/agent/agent.controller.ts\n            \n            controller\n            AgentController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.module.ts\n            \n            variable\n            JwtModuleRegistered\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            JWT_EXPIRES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            JWT_SECRET_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/helpers.ts\n            \n            variable\n            roomPrefix\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-socket-auth.guard.ts\n            \n            guard\n            WsJwtGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/calls/calls.model.ts\n            \n            class\n            Call\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/calls/calls.service.ts\n            \n            injectable\n            CallsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/calls/calls.service.ts\n            \n            variable\n            ACTIVE_FINDER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/calls/types.ts\n            \n            variable\n            StatusToTimestampDict\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/casl/casl.decorator.ts\n            \n            variable\n            CheckPolicies\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/casl/casl.guard.ts\n            \n            guard\n            PoliciesGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/casl/casl.service.ts\n            \n            injectable\n            CaslAbilityFactory\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/casl/constants.ts\n            \n            variable\n            CHECK_POLICIES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/casl/types.ts\n            \n            interface\n            IPolicyHandler\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            DB_VARIABLES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/events/constants.ts\n            \n            variable\n            EVENT_TYPES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/events/events.gateway.ts\n            \n            class\n            EventsGateway\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/init/init.service.ts\n            \n            injectable\n            InitService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/records/constants.ts\n            \n            variable\n            CHUNK_DURATION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/records/constants.ts\n            \n            variable\n            PROCESS_TOTAL_OFFSET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/records/constants.ts\n            \n            variable\n            RECORD_FILE_PREFIX\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/records/constants.ts\n            \n            variable\n            RECORDS_FILE_PATH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/records/constants.ts\n            \n            variable\n            TARGET_EXT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/records/helpers.ts\n            \n            variable\n            buildAppenderSideName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/records/helpers.ts\n            \n            variable\n            buildTranscriptionFiledName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/records/helpers.ts\n            \n            variable\n            buildTranscriptionForeignId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/records/helpers.ts\n            \n            variable\n            getCallSideChunkNames\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/records/helpers.ts\n            \n            variable\n            getDuration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/records/helpers.ts\n            \n            variable\n            pickTranscriptFields\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/records/helpers.ts\n            \n            variable\n            promisedFs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/records/records.controller.ts\n            \n            controller\n            RecordsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/records/records.model.ts\n            \n            class\n            Record\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/records/records.service.ts\n            \n            injectable\n            RecordsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/records/records.service.ts\n            \n            variable\n            includers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/records/records.service.ts\n            \n            variable\n            promisedFs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/records/transcription.model.ts\n            \n            class\n            Transcription\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/routes.constants.ts\n            \n            variable\n            BASE_API_ROUTE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/routes.constants.ts\n            \n            variable\n            ROUTES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/constants.ts\n            \n            variable\n            BCRYPT_SAULT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/secrets.model.ts\n            \n            class\n            Secret\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/types.ts\n            \n            class\n            User\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.model.ts\n            \n            class\n            User\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/webrtc/constants.ts\n            \n            variable\n            TIME_EXCEED_LIMIT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/webrtc/webrtc.service.ts\n            \n            injectable\n            WebRTCService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/workers/constants.ts\n            \n            variable\n            STANDARD_POOL_LIFETIME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/workers/constants.ts\n            \n            variable\n            STANDARD_POOL_NUMBER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/workers/pool.ts\n            \n            class\n            WorkersPool\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @casl/ability : ^5.4.3\n        \n            @nestjs/common : ^8.4.0\n        \n            @nestjs/config : ^1.2.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/platform-socket.io : ^8.4.0\n        \n            @nestjs/sequelize : ^8.0.0\n        \n            @nestjs/websockets : ^8.4.0\n        \n            @sequelize/core : ^7.0.0-alpha.10\n        \n            @solyarisoftware/voskjs : ^1.2.8\n        \n            bcrypt : ^5.0.1\n        \n            fluent-ffmpeg : ^2.1.2\n        \n            lodash : ^4.17.21\n        \n            mime-types : ^2.1.35\n        \n            nanoid : ^3.3.2\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.7.3\n        \n            pg-hstore : ^2.3.4\n        \n            promisify-node : ^0.5.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            sequelize : ^6.17.0\n        \n            sequelize-typescript : ^2.1.3\n        \n            yallist : ^4.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (src/.../types.ts)\n                        \n                        \n                            AppenderSide   (src/.../types.ts)\n                        \n                        \n                            CallErrors   (src/.../types.ts)\n                        \n                        \n                            CallSide   (src/.../types.ts)\n                        \n                        \n                            CallStatus   (src/.../types.ts)\n                        \n                        \n                            RecordErrors   (src/.../types.ts)\n                        \n                        \n                            RecordIncluders   (src/.../types.ts)\n                        \n                        \n                            Roles   (src/.../types.ts)\n                        \n                        \n                            SignalStatus   (src/.../types.ts)\n                        \n                        \n                            SRMode   (src/.../types.ts)\n                        \n                        \n                            UserStatuses   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/casl/types.ts\n    \n        \n            \n                \n                    \n                        \n                        Action\n                    \n                \n                        \n                            \n                                 Manage\n                            \n                        \n                        \n                            \n                                Value : manage\n                            \n                        \n                        \n                            \n                                 Create\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 Read\n                            \n                        \n                        \n                            \n                                Value : read\n                            \n                        \n                        \n                            \n                                 Update\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 Delete\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n            \n        \n\n    src/records/types.ts\n    \n        \n            \n                \n                    \n                        \n                        AppenderSide\n                    \n                \n                        \n                            \n                                 srcCaller\n                            \n                        \n                        \n                            \n                                Value : srcCaller\n                            \n                        \n                        \n                            \n                                 srcCallee\n                            \n                        \n                        \n                            \n                                Value : srcCallee\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RecordErrors\n                    \n                \n                        \n                            \n                                 WrongCallToAttach\n                            \n                        \n                        \n                            \n                                Value : WrongCallToAttach\n                            \n                        \n                        \n                            \n                                 RecordExist\n                            \n                        \n                        \n                            \n                                Value : RecordExist\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        RecordIncluders\n                    \n                \n                        \n                            \n                                 all\n                            \n                        \n                        \n                            \n                                Value : all\n                            \n                        \n                        \n                            \n                                 base\n                            \n                        \n                        \n                            \n                                Value : base\n                            \n                        \n                        \n                            \n                                 fluent\n                            \n                        \n                        \n                            \n                                Value : fluent\n                            \n                        \n                        \n                            \n                                 deep\n                            \n                        \n                        \n                            \n                                Value : deep\n                            \n                        \n            \n        \n\n    src/calls/types.ts\n    \n        \n            \n                \n                    \n                        \n                        CallErrors\n                    \n                \n                        \n                            \n                                 WrongCallerWebrtcNumber\n                            \n                        \n                        \n                            \n                                Value : WrongCallerWebrtcNumber\n                            \n                        \n                        \n                            \n                                 WrongCalleeWebrtcNumber\n                            \n                        \n                        \n                            \n                                Value : WrongCalleeWebrtcNumber\n                            \n                        \n                        \n                            \n                                 AgentOffline\n                            \n                        \n                        \n                            \n                                Value : AgentOffline\n                            \n                        \n                        \n                            \n                                 Busy\n                            \n                        \n                        \n                            \n                                Value : Busy\n                            \n                        \n                        \n                            \n                                 AgentAway\n                            \n                        \n                        \n                            \n                                Value : AgentAway\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        CallSide\n                    \n                \n                        \n                            \n                                 Caller\n                            \n                        \n                        \n                            \n                                Value : Caller\n                            \n                        \n                        \n                            \n                                 Callee\n                            \n                        \n                        \n                            \n                                Value : Callee\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        CallStatus\n                    \n                \n                        \n                            \n                                 answerWaiting\n                            \n                        \n                        \n                            \n                                Value : answerWaiting\n                            \n                        \n                        \n                            \n                                 rejected\n                            \n                        \n                        \n                            \n                                Value : rejected\n                            \n                        \n                        \n                            \n                                 active\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 ended\n                            \n                        \n                        \n                            \n                                Value : ended\n                            \n                        \n                        \n                            \n                                 failed\n                            \n                        \n                        \n                            \n                                Value : failed\n                            \n                        \n                        \n                            \n                                 cancelled\n                            \n                        \n                        \n                            \n                                Value : cancelled\n                            \n                        \n                        \n                            \n                                 timeExceeded\n                            \n                        \n                        \n                            \n                                Value : timeExceeded\n                            \n                        \n            \n        \n\n    src/users/types.ts\n    \n        \n            \n                \n                    \n                        \n                        Roles\n                    \n                \n                        \n                            \n                                 admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 user\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 supervisor\n                            \n                        \n                        \n                            \n                                Value : supervisor\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UserStatuses\n                    \n                \n                        \n                            \n                                 online\n                            \n                        \n                        \n                            \n                                Value : online\n                            \n                        \n                        \n                            \n                                 offline\n                            \n                        \n                        \n                            \n                                Value : offline\n                            \n                        \n                        \n                            \n                                 away\n                            \n                        \n                        \n                            \n                                Value : away\n                            \n                        \n            \n        \n\n    src/events/types.ts\n    \n        \n            \n                \n                    \n                        \n                        SignalStatus\n                    \n                \n                        \n                            \n                                 ok\n                            \n                        \n                        \n                            \n                                Value : ok\n                            \n                        \n            \n        \n\n    src/SpeechRecognition/types.ts\n    \n        \n            \n                \n                    \n                        \n                        SRMode\n                    \n                \n                        \n                            \n                                 fluent\n                            \n                        \n                        \n                            \n                                Value : fluent\n                            \n                        \n                        \n                            \n                                 deep\n                            \n                        \n                        \n                            \n                                Value : deep\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AgentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CallsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CaslModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EventsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InitModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RecordsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SRModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WebRTCModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AgentModule\n\n\n\ncluster_AgentModule_imports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CallsModule\n\n\n\ncluster_CallsModule_exports\n\n\n\ncluster_CallsModule_providers\n\n\n\ncluster_CaslModule\n\n\n\ncluster_CaslModule_imports\n\n\n\ncluster_CaslModule_exports\n\n\n\ncluster_EventsModule\n\n\n\ncluster_EventsModule_exports\n\n\n\ncluster_InitModule\n\n\n\ncluster_InitModule_exports\n\n\n\ncluster_InitModule_providers\n\n\n\ncluster_RecordsModule\n\n\n\ncluster_RecordsModule_imports\n\n\n\ncluster_RecordsModule_exports\n\n\n\ncluster_RecordsModule_providers\n\n\n\ncluster_SRModule\n\n\n\ncluster_SRModule_exports\n\n\n\ncluster_SRModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_WebRTCModule\n\n\n\ncluster_WebRTCModule_exports\n\n\n\ncluster_WebRTCModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAgentModule\n\nAgentModule\n\nAgentModule -->\n\nUsersModule->AgentModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nCallsModule\n\nCallsModule\n\nCallsModule -->\n\nUsersModule->CallsModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAgentModule->AppModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nEventsModule\n\nEventsModule\n\nEventsModule -->\n\nAuthModule->EventsModule\n\n\n\n\n\nInitModule\n\nInitModule\n\nAppModule -->\n\nInitModule->AppModule\n\n\n\n\n\nInitService \n\nInitService \n\nInitService  -->\n\nInitModule->InitService \n\n\n\n\n\nWebRTCModule\n\nWebRTCModule\n\nAppModule -->\n\nWebRTCModule->AppModule\n\n\n\n\n\nWebRTCService \n\nWebRTCService \n\nWebRTCService  -->\n\nWebRTCModule->WebRTCService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCallsService \n\nCallsService \n\nCallsService  -->\n\nCallsModule->CallsService \n\n\n\n\n\nRecordsModule\n\nRecordsModule\n\nRecordsModule -->\n\nCallsModule->RecordsModule\n\n\n\n\n\nCallsService\n\nCallsService\n\nCallsModule -->\n\nCallsService->CallsModule\n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\n\n\nCaslModule\n\nCaslModule\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\nCaslModule -->\n\nCaslAbilityFactory->CaslModule\n\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\nCaslAbilityFactory  -->\n\nCaslModule->CaslAbilityFactory \n\n\n\nEventsModule -->\n\nCaslModule->EventsModule\n\n\n\n\n\nEventsGateway \n\nEventsGateway \n\nEventsGateway  -->\n\nEventsModule->EventsGateway \n\n\n\n\n\nInitService\n\nInitService\n\nInitModule -->\n\nInitService->InitModule\n\n\n\n\n\nSRModule\n\nSRModule\n\nRecordsModule -->\n\nSRModule->RecordsModule\n\n\n\n\n\nSRService \n\nSRService \n\nSRService  -->\n\nSRModule->SRService \n\n\n\n\n\nRecordsService \n\nRecordsService \n\nRecordsService  -->\n\nRecordsModule->RecordsService \n\n\n\n\n\nRecordsService\n\nRecordsService\n\nRecordsModule -->\n\nRecordsService->RecordsModule\n\n\n\n\n\nSRService\n\nSRService\n\nSRModule -->\n\nSRService->SRModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nWebRTCService\n\nWebRTCService\n\nWebRTCModule -->\n\nWebRTCService->WebRTCModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AnswerPayload   (src/.../types.ts)\n                        \n                        \n                            AppAbility   (src/.../types.ts)\n                        \n                        \n                            AppendRecordPayload   (src/.../types.ts)\n                        \n                        \n                            AuthPayload   (src/.../types.ts)\n                        \n                        \n                            AuthResponsePayload   (src/.../types.ts)\n                        \n                        \n                            CallConnection   (src/.../types.ts)\n                        \n                        \n                            CallIDPayload   (src/.../types.ts)\n                        \n                        \n                            CallType   (src/.../types.ts)\n                        \n                        \n                            ChangeCallStatusPayload   (src/.../types.ts)\n                        \n                        \n                            ChangeStatusPayload   (src/.../types.ts)\n                        \n                        \n                            DurationFilter   (src/.../types.ts)\n                        \n                        \n                            EmittedToken   (src/.../types.ts)\n                        \n                        \n                            FilteredRecords   (src/.../types.ts)\n                        \n                        \n                            FindUsersPayload   (src/.../types.ts)\n                        \n                        \n                            NewIceCandidate   (src/.../types.ts)\n                        \n                        \n                            OfferPayload   (src/.../types.ts)\n                        \n                        \n                            PolicyHandler   (src/.../types.ts)\n                        \n                        \n                            PolicyHandlerCallback   (src/.../types.ts)\n                        \n                        \n                            PoolOptions   (src/.../types.ts)\n                        \n                        \n                            RecordFilters   (src/.../types.ts)\n                        \n                        \n                            RecordFiltersPayload   (src/.../types.ts)\n                        \n                        \n                            RecordFluentTrancriptionSeq   (src/.../types.ts)\n                        \n                        \n                            RecordType   (src/.../types.ts)\n                        \n                        \n                            ReqWithUser   (src/.../types.ts)\n                        \n                        \n                            Secret   (src/.../types.ts)\n                        \n                        \n                            SignalStatusResponse   (src/.../types.ts)\n                        \n                        \n                            SrcPayload   (src/.../types.ts)\n                        \n                        \n                            SROutput   (src/.../types.ts)\n                        \n                        \n                            SRResult   (src/.../types.ts)\n                        \n                        \n                            SRTask   (src/.../types.ts)\n                        \n                        \n                            Subjects   (src/.../types.ts)\n                        \n                        \n                            Task   (src/.../types.ts)\n                        \n                        \n                            TranscriptionPayload   (src/.../types.ts)\n                        \n                        \n                            TranscriptionUnit   (src/.../types.ts)\n                        \n                        \n                            WithUser   (src/.../types.ts)\n                        \n                        \n                            Worker   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/webrtc/types.ts\n    \n    \n        \n            \n                \n                    \n                    AnswerPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CallConnection\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CallIDPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NewIceCandidate\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    OfferPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/casl/types.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PolicyHandler\n                \n            \n            \n                \n                            IPolicyHandler | PolicyHandlerCallback\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PolicyHandlerCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Subjects\n                \n            \n            \n                \n                            InferSubjects | \"all\"\n\n                \n            \n        \n    \n    src/records/types.ts\n    \n    \n        \n            \n                \n                    \n                    AppendRecordPayload\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DurationFilter\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FilteredRecords\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RecordFilters\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RecordFiltersPayload\n                \n            \n            \n                \n                            Omit\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RecordFluentTrancriptionSeq\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RecordType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SrcPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TranscriptionPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/auth/types.ts\n    \n    \n        \n            \n                \n                    \n                    AuthPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AuthResponsePayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EmittedToken\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ReqWithUser\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    WithUser\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/calls/types.ts\n    \n    \n        \n            \n                \n                    \n                    CallType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ChangeCallStatusPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/agent/types.ts\n    \n    \n        \n            \n                \n                    \n                    ChangeStatusPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/users/types.ts\n    \n    \n        \n            \n                \n                    \n                    FindUsersPayload\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Secret\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/workers/types.ts\n    \n    \n        \n            \n                \n                    \n                    PoolOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Task\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Worker\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/events/types.ts\n    \n    \n        \n            \n                \n                    \n                    SignalStatusResponse\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/SpeechRecognition/types.ts\n    \n    \n        \n            \n                \n                    \n                    SROutput\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SRResult\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SRTask\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TranscriptionUnit\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ACTIVE_FINDER   (src/.../calls.service.ts)\n                        \n                        \n                            BASE_API_ROUTE   (src/.../routes.constants.ts)\n                        \n                        \n                            BCRYPT_SAULT   (src/.../constants.ts)\n                        \n                        \n                            buildAppenderSideName   (src/.../helpers.ts)\n                        \n                        \n                            buildTranscriptionFiledName   (src/.../helpers.ts)\n                        \n                        \n                            buildTranscriptionForeignId   (src/.../helpers.ts)\n                        \n                        \n                            CHECK_POLICIES_KEY   (src/.../constants.ts)\n                        \n                        \n                            CheckPolicies   (src/.../casl.decorator.ts)\n                        \n                        \n                            CHUNK_DURATION   (src/.../constants.ts)\n                        \n                        \n                            consoleBlue   (helpers/.../coloredConsole.ts)\n                        \n                        \n                            DB_VARIABLES   (src/.../constants.ts)\n                        \n                        \n                            EVENT_TYPES   (src/.../constants.ts)\n                        \n                        \n                            getCallSideChunkNames   (src/.../helpers.ts)\n                        \n                        \n                            getDuration   (src/.../helpers.ts)\n                        \n                        \n                            includers   (src/.../records.service.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../constants.ts)\n                        \n                        \n                            JWT_EXPIRES   (src/.../constants.ts)\n                        \n                        \n                            JWT_SECRET_NAME   (src/.../constants.ts)\n                        \n                        \n                            JwtModuleRegistered   (src/.../auth.module.ts)\n                        \n                        \n                            pickTranscriptFields   (src/.../helpers.ts)\n                        \n                        \n                            PROCESS_TOTAL_OFFSET   (src/.../constants.ts)\n                        \n                        \n                            promisedFs   (src/.../helpers.ts)\n                        \n                        \n                            promisedFs   (src/.../records.service.ts)\n                        \n                        \n                            Public   (src/.../jwt-auth.guard.ts)\n                        \n                        \n                            RECORD_FILE_PREFIX   (src/.../constants.ts)\n                        \n                        \n                            RECORDS_FILE_PATH   (src/.../constants.ts)\n                        \n                        \n                            roomPrefix   (src/.../helpers.ts)\n                        \n                        \n                            ROUTES   (src/.../routes.constants.ts)\n                        \n                        \n                            SR_POOL_LIFETIME   (src/.../constants.ts)\n                        \n                        \n                            SR_POOL_NUMBER   (src/.../constants.ts)\n                        \n                        \n                            SRProcessPath   (src/.../sr.service.ts)\n                        \n                        \n                            STANDARD_POOL_LIFETIME   (src/.../constants.ts)\n                        \n                        \n                            STANDARD_POOL_NUMBER   (src/.../constants.ts)\n                        \n                        \n                            StatusToTimestampDict   (src/.../types.ts)\n                        \n                        \n                            TARGET_EXT   (src/.../constants.ts)\n                        \n                        \n                            TIME_EXCEED_LIMIT   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/calls/calls.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ACTIVE_FINDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  [Op.in]: [CallStatus.answerWaiting, CallStatus.active],\n}\n                    \n                \n\n\n        \n    \n\n    src/routes.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BASE_API_ROUTE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'api'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ROUTES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  API: {\n    AUTH: {\n      BASE: BASE_API_ROUTE + '/auth',\n      LOGIN: 'login',\n      REGISTER: 'register',\n      LOGOUT: '/logout',\n      RECOVER_PASSWORD: '/recover_password',\n      CHANGE_PASSWORD: '/change_password',\n      VERIFY: '/verify_token',\n    },\n    AGENT: {\n      BASE: BASE_API_ROUTE + '/agent',\n      STATUS: '/status',\n    },\n    USERS: {\n      BASE: BASE_API_ROUTE + '/users',\n    },\n    RECORDS: {\n      BASE: BASE_API_ROUTE + '/records',\n      FULL: '/full',\n      SRC: '/src',\n      TRANSCRIPTION: '/transcription',\n    },\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/users/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BCRYPT_SAULT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'BCRYPT_SAULT'\n                    \n                \n\n\n        \n    \n\n    src/records/helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        buildAppenderSideName\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (side: CallSide) =>\n  `src${side}` as AppenderSide\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildTranscriptionFiledName\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (side: CallSide, mode: SRMode) =>\n  `transcription${side}${mode === SRMode.fluent ? 'Fluent' : ''}`\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildTranscriptionForeignId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (side: CallSide, mode: SRMode) =>\n  `${buildTranscriptionFiledName(side, mode)}Id`\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCallSideChunkNames\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (\n  recordPath: string,\n  side: CallSide,\n) => {\n  const files: string[] = await promisedFs.readdir(recordPath);\n\n  return files\n    .filter((name) =>\n      new RegExp(`^\\\\d+_${buildAppenderSideName(side)}`).test(name),\n    )\n    .sort((a, b) => parseInt(a) - parseInt(b));\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : async (src: string): Promise =>\n  new Promise((resolve) => {\n    ffmpeg.ffprobe(src, (_, data) =>\n      resolve(isFinite(data.format.duration) ? data.format.duration : 0),\n    );\n  })\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pickTranscriptFields\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (val: TranscriptionUnit) =>\n  pick(val, ['conf', 'end', 'id', 'start', 'word'])\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        promisedFs\n                        \n                    \n                \n            \n                \n                    \n                        Default value : promisify('fs')\n                    \n                \n\n\n        \n    \n\n    src/casl/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CHECK_POLICIES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'check_policy'\n                    \n                \n\n\n        \n    \n\n    src/casl/casl.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CheckPolicies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...handlers: PolicyHandler[]) =>\n  SetMetadata(CHECK_POLICIES_KEY, handlers)\n                    \n                \n\n\n        \n    \n\n    src/records/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CHUNK_DURATION\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 7000\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PROCESS_TOTAL_OFFSET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1000\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RECORD_FILE_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'call_record_'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RECORDS_FILE_PATH\n                        \n                    \n                \n            \n                \n                    \n                        Default value : path.resolve('recordsStorage')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TARGET_EXT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'mp3'\n                    \n                \n\n\n        \n    \n\n    helpers/coloredConsole.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        consoleBlue\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...args) => {\n  console.log('\\x1b[34m%s\\x1b[0m', ...args);\n}\n                    \n                \n\n\n        \n    \n\n    src/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DB_VARIABLES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  DATABASE_USER: 'DATABASE_USER',\n  DATABASE_PASSWORD: 'DATABASE_PASSWORD',\n  DATABASE_PORT: 'DATABASE_PORT',\n  DATABASE_HOST: 'DATABASE_HOST',\n  DATABASE_DIALECT: 'DATABASE_DIALECT',\n  DATABASE_NAME: 'DATABASE_NAME',\n}\n                    \n                \n\n\n        \n    \n\n    src/events/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EVENT_TYPES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  INIT: 'INIT',\n  RECORD: {\n    START: 'START',\n    APPEND: 'APPEND',\n    STOP: 'STOP',\n  },\n  SIGNALING: {\n    ANSWER: 'SIGNALING_ANSWER',\n    OFFER: 'SIGNALING_OFFER',\n    NEW_ICE: 'NEW_ICE_CANDIDATE',\n    ENDED: 'ENDED',\n    FAILED: 'FAILED',\n    CANCEL: 'CANCEL',\n    REJECT: 'REJECT',\n    TIME_EXCEED: 'TIME_EXCEED',\n  },\n  CALL: {\n    CHANGE: 'CHANGE_CALL',\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/records/records.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        includers\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (mode: RecordIncluders) => {\n  const res = [\n    {\n      model: CallModel,\n      as: 'call',\n      include: [\n        {\n          model: UserModel,\n          as: 'caller',\n        },\n        {\n          model: UserModel,\n          as: 'callee',\n        },\n      ],\n    },\n  ] as any;\n\n  if (mode === RecordIncluders.base) return res;\n\n  if ([RecordIncluders.deep, RecordIncluders.all].includes(mode)) {\n    res.push(\n      {\n        model: TranscriptionModel,\n        as: 'transcriptionCaller',\n      },\n      {\n        model: TranscriptionModel,\n        as: 'transcriptionCallee',\n      },\n    );\n  }\n\n  if ([RecordIncluders.fluent, RecordIncluders.all].includes(mode)) {\n    res.push(\n      {\n        model: TranscriptionModel,\n        as: 'transcriptionCallerFluent',\n      },\n      {\n        model: TranscriptionModel,\n        as: 'transcriptionCalleeFluent',\n      },\n    );\n  }\n\n  return res;\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        promisedFs\n                        \n                    \n                \n            \n                \n                    \n                        Default value : promisify('fs')\n                    \n                \n\n\n        \n    \n\n    src/auth/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_EXPIRES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '12h'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        JWT_SECRET_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'JWT_SECRET'\n                    \n                \n\n\n        \n    \n\n    src/auth/auth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        JwtModuleRegistered\n                        \n                    \n                \n            \n                \n                    \n                        Default value : JwtModule.registerAsync({\n  inject: [ConfigService],\n  useFactory: (config: ConfigService) => ({\n    secret: config.get(JWT_SECRET_NAME),\n    signOptions: { expiresIn: JWT_EXPIRES },\n  }),\n})\n                    \n                \n\n\n        \n    \n\n    src/auth/jwt-auth.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/auth/helpers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        roomPrefix\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (userId: number): string => `room_${userId}`\n                    \n                \n\n\n        \n    \n\n    src/SpeechRecognition/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SR_POOL_LIFETIME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 2400000\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SR_POOL_NUMBER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 4\n                    \n                \n\n\n        \n    \n\n    src/SpeechRecognition/sr.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SRProcessPath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : resolve(\n  'src',\n  'SpeechRecognition',\n  'scripts',\n  'speechToText.process.js',\n)\n                    \n                \n\n\n        \n    \n\n    src/workers/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        STANDARD_POOL_LIFETIME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 900000\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STANDARD_POOL_NUMBER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n\n\n        \n    \n\n    src/calls/types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        StatusToTimestampDict\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  [CallStatus.active]: 'startTimestamp',\n  [CallStatus.ended]: 'endTimestamp',\n  [CallStatus.rejected]: 'rejectedTimestamp',\n  [CallStatus.failed]: 'failedTimestamp',\n  [CallStatus.cancelled]: 'cancelledTimestamp',\n}\n                    \n                \n\n\n        \n    \n\n    src/webrtc/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TIME_EXCEED_LIMIT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 30000\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
